/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.TermsOfServiceUserStatus;
import com.konfigthis.client.model.TermsOfServiceUserStatuses;
import com.konfigthis.client.model.TermsOfServiceUserStatusesCreateUserStatusRequest;
import com.konfigthis.client.model.TermsOfServiceUserStatusesCreateUserStatusRequestTos;
import com.konfigthis.client.model.TermsOfServiceUserStatusesCreateUserStatusRequestUser;
import com.konfigthis.client.model.TermsOfServiceUserStatusesUpdateUserStatusRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TermsOfServiceUserStatusesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TermsOfServiceUserStatusesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TermsOfServiceUserStatusesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createUserStatusCall(TermsOfServiceUserStatusesCreateUserStatusRequest termsOfServiceUserStatusesCreateUserStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = termsOfServiceUserStatusesCreateUserStatusRequest;

        // create path and map variables
        String localVarPath = "/terms_of_service_user_statuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserStatusValidateBeforeCall(TermsOfServiceUserStatusesCreateUserStatusRequest termsOfServiceUserStatusesCreateUserStatusRequest, final ApiCallback _callback) throws ApiException {
        return createUserStatusCall(termsOfServiceUserStatusesCreateUserStatusRequest, _callback);

    }


    private ApiResponse<TermsOfServiceUserStatus> createUserStatusWithHttpInfo(TermsOfServiceUserStatusesCreateUserStatusRequest termsOfServiceUserStatusesCreateUserStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserStatusValidateBeforeCall(termsOfServiceUserStatusesCreateUserStatusRequest, null);
        Type localVarReturnType = new TypeToken<TermsOfServiceUserStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createUserStatusAsync(TermsOfServiceUserStatusesCreateUserStatusRequest termsOfServiceUserStatusesCreateUserStatusRequest, final ApiCallback<TermsOfServiceUserStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserStatusValidateBeforeCall(termsOfServiceUserStatusesCreateUserStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<TermsOfServiceUserStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateUserStatusRequestBuilder {
        private final TermsOfServiceUserStatusesCreateUserStatusRequestTos tos;
        private final TermsOfServiceUserStatusesCreateUserStatusRequestUser user;
        private final Boolean isAccepted;

        private CreateUserStatusRequestBuilder(TermsOfServiceUserStatusesCreateUserStatusRequestTos tos, TermsOfServiceUserStatusesCreateUserStatusRequestUser user, Boolean isAccepted) {
            this.tos = tos;
            this.user = user;
            this.isAccepted = isAccepted;
        }

        /**
         * Build call for createUserStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a terms of service status object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TermsOfServiceUserStatusesCreateUserStatusRequest termsOfServiceUserStatusesCreateUserStatusRequest = buildBodyParams();
            return createUserStatusCall(termsOfServiceUserStatusesCreateUserStatusRequest, _callback);
        }

        private TermsOfServiceUserStatusesCreateUserStatusRequest buildBodyParams() {
            TermsOfServiceUserStatusesCreateUserStatusRequest termsOfServiceUserStatusesCreateUserStatusRequest = new TermsOfServiceUserStatusesCreateUserStatusRequest();
            termsOfServiceUserStatusesCreateUserStatusRequest.tos(this.tos);
            termsOfServiceUserStatusesCreateUserStatusRequest.user(this.user);
            termsOfServiceUserStatusesCreateUserStatusRequest.isAccepted(this.isAccepted);
            return termsOfServiceUserStatusesCreateUserStatusRequest;
        }

        /**
         * Execute createUserStatus request
         * @return TermsOfServiceUserStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a terms of service status object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public TermsOfServiceUserStatus execute() throws ApiException {
            TermsOfServiceUserStatusesCreateUserStatusRequest termsOfServiceUserStatusesCreateUserStatusRequest = buildBodyParams();
            ApiResponse<TermsOfServiceUserStatus> localVarResp = createUserStatusWithHttpInfo(termsOfServiceUserStatusesCreateUserStatusRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createUserStatus request with HTTP info returned
         * @return ApiResponse&lt;TermsOfServiceUserStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a terms of service status object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TermsOfServiceUserStatus> executeWithHttpInfo() throws ApiException {
            TermsOfServiceUserStatusesCreateUserStatusRequest termsOfServiceUserStatusesCreateUserStatusRequest = buildBodyParams();
            return createUserStatusWithHttpInfo(termsOfServiceUserStatusesCreateUserStatusRequest);
        }

        /**
         * Execute createUserStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a terms of service status object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TermsOfServiceUserStatus> _callback) throws ApiException {
            TermsOfServiceUserStatusesCreateUserStatusRequest termsOfServiceUserStatusesCreateUserStatusRequest = buildBodyParams();
            return createUserStatusAsync(termsOfServiceUserStatusesCreateUserStatusRequest, _callback);
        }
    }

    /**
     * Create terms of service status for new user
     * Sets the status for a terms of service for a user.
     * @return CreateUserStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a terms of service status object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserStatusRequestBuilder createUserStatus(TermsOfServiceUserStatusesCreateUserStatusRequestTos tos, TermsOfServiceUserStatusesCreateUserStatusRequestUser user, Boolean isAccepted) throws IllegalArgumentException {
        if (tos == null) throw new IllegalArgumentException("\"tos\" is required but got null");
        if (user == null) throw new IllegalArgumentException("\"user\" is required but got null");
        if (isAccepted == null) throw new IllegalArgumentException("\"isAccepted\" is required but got null");
        return new CreateUserStatusRequestBuilder(tos, user, isAccepted);
    }
    private okhttp3.Call listUserStatusesCall(String tosId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terms_of_service_user_statuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tosId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tos_id", tosId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserStatusesValidateBeforeCall(String tosId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tosId' is set
        if (tosId == null) {
            throw new ApiException("Missing the required parameter 'tosId' when calling listUserStatuses(Async)");
        }

        return listUserStatusesCall(tosId, userId, _callback);

    }


    private ApiResponse<TermsOfServiceUserStatuses> listUserStatusesWithHttpInfo(String tosId, String userId) throws ApiException {
        okhttp3.Call localVarCall = listUserStatusesValidateBeforeCall(tosId, userId, null);
        Type localVarReturnType = new TypeToken<TermsOfServiceUserStatuses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserStatusesAsync(String tosId, String userId, final ApiCallback<TermsOfServiceUserStatuses> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserStatusesValidateBeforeCall(tosId, userId, _callback);
        Type localVarReturnType = new TypeToken<TermsOfServiceUserStatuses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserStatusesRequestBuilder {
        private final String tosId;
        private String userId;

        private ListUserStatusesRequestBuilder(String tosId) {
            this.tosId = tosId;
        }

        /**
         * Set userId
         * @param userId Limits results to the given user ID. (optional)
         * @return ListUserStatusesRequestBuilder
         */
        public ListUserStatusesRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Build call for listUserStatuses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of terms of service statuses. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserStatusesCall(tosId, userId, _callback);
        }


        /**
         * Execute listUserStatuses request
         * @return TermsOfServiceUserStatuses
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of terms of service statuses. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public TermsOfServiceUserStatuses execute() throws ApiException {
            ApiResponse<TermsOfServiceUserStatuses> localVarResp = listUserStatusesWithHttpInfo(tosId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserStatuses request with HTTP info returned
         * @return ApiResponse&lt;TermsOfServiceUserStatuses&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of terms of service statuses. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TermsOfServiceUserStatuses> executeWithHttpInfo() throws ApiException {
            return listUserStatusesWithHttpInfo(tosId, userId);
        }

        /**
         * Execute listUserStatuses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of terms of service statuses. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TermsOfServiceUserStatuses> _callback) throws ApiException {
            return listUserStatusesAsync(tosId, userId, _callback);
        }
    }

    /**
     * List terms of service user statuses
     * Retrieves an overview of users and their status for a terms of service, including Whether they have accepted the terms and when.
     * @param tosId The ID of the terms of service. (required)
     * @return ListUserStatusesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of terms of service statuses. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListUserStatusesRequestBuilder listUserStatuses(String tosId) throws IllegalArgumentException {
        if (tosId == null) throw new IllegalArgumentException("\"tosId\" is required but got null");
            

        return new ListUserStatusesRequestBuilder(tosId);
    }
    private okhttp3.Call updateUserStatusCall(String termsOfServiceUserStatusId, TermsOfServiceUserStatusesUpdateUserStatusRequest termsOfServiceUserStatusesUpdateUserStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = termsOfServiceUserStatusesUpdateUserStatusRequest;

        // create path and map variables
        String localVarPath = "/terms_of_service_user_statuses/{terms_of_service_user_status_id}"
            .replace("{" + "terms_of_service_user_status_id" + "}", localVarApiClient.escapeString(termsOfServiceUserStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserStatusValidateBeforeCall(String termsOfServiceUserStatusId, TermsOfServiceUserStatusesUpdateUserStatusRequest termsOfServiceUserStatusesUpdateUserStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'termsOfServiceUserStatusId' is set
        if (termsOfServiceUserStatusId == null) {
            throw new ApiException("Missing the required parameter 'termsOfServiceUserStatusId' when calling updateUserStatus(Async)");
        }

        return updateUserStatusCall(termsOfServiceUserStatusId, termsOfServiceUserStatusesUpdateUserStatusRequest, _callback);

    }


    private ApiResponse<TermsOfServiceUserStatus> updateUserStatusWithHttpInfo(String termsOfServiceUserStatusId, TermsOfServiceUserStatusesUpdateUserStatusRequest termsOfServiceUserStatusesUpdateUserStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserStatusValidateBeforeCall(termsOfServiceUserStatusId, termsOfServiceUserStatusesUpdateUserStatusRequest, null);
        Type localVarReturnType = new TypeToken<TermsOfServiceUserStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserStatusAsync(String termsOfServiceUserStatusId, TermsOfServiceUserStatusesUpdateUserStatusRequest termsOfServiceUserStatusesUpdateUserStatusRequest, final ApiCallback<TermsOfServiceUserStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserStatusValidateBeforeCall(termsOfServiceUserStatusId, termsOfServiceUserStatusesUpdateUserStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<TermsOfServiceUserStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserStatusRequestBuilder {
        private final Boolean isAccepted;
        private final String termsOfServiceUserStatusId;

        private UpdateUserStatusRequestBuilder(Boolean isAccepted, String termsOfServiceUserStatusId) {
            this.isAccepted = isAccepted;
            this.termsOfServiceUserStatusId = termsOfServiceUserStatusId;
        }

        /**
         * Build call for updateUserStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated terms of service status object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TermsOfServiceUserStatusesUpdateUserStatusRequest termsOfServiceUserStatusesUpdateUserStatusRequest = buildBodyParams();
            return updateUserStatusCall(termsOfServiceUserStatusId, termsOfServiceUserStatusesUpdateUserStatusRequest, _callback);
        }

        private TermsOfServiceUserStatusesUpdateUserStatusRequest buildBodyParams() {
            TermsOfServiceUserStatusesUpdateUserStatusRequest termsOfServiceUserStatusesUpdateUserStatusRequest = new TermsOfServiceUserStatusesUpdateUserStatusRequest();
            termsOfServiceUserStatusesUpdateUserStatusRequest.isAccepted(this.isAccepted);
            return termsOfServiceUserStatusesUpdateUserStatusRequest;
        }

        /**
         * Execute updateUserStatus request
         * @return TermsOfServiceUserStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated terms of service status object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public TermsOfServiceUserStatus execute() throws ApiException {
            TermsOfServiceUserStatusesUpdateUserStatusRequest termsOfServiceUserStatusesUpdateUserStatusRequest = buildBodyParams();
            ApiResponse<TermsOfServiceUserStatus> localVarResp = updateUserStatusWithHttpInfo(termsOfServiceUserStatusId, termsOfServiceUserStatusesUpdateUserStatusRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUserStatus request with HTTP info returned
         * @return ApiResponse&lt;TermsOfServiceUserStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated terms of service status object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TermsOfServiceUserStatus> executeWithHttpInfo() throws ApiException {
            TermsOfServiceUserStatusesUpdateUserStatusRequest termsOfServiceUserStatusesUpdateUserStatusRequest = buildBodyParams();
            return updateUserStatusWithHttpInfo(termsOfServiceUserStatusId, termsOfServiceUserStatusesUpdateUserStatusRequest);
        }

        /**
         * Execute updateUserStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated terms of service status object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TermsOfServiceUserStatus> _callback) throws ApiException {
            TermsOfServiceUserStatusesUpdateUserStatusRequest termsOfServiceUserStatusesUpdateUserStatusRequest = buildBodyParams();
            return updateUserStatusAsync(termsOfServiceUserStatusId, termsOfServiceUserStatusesUpdateUserStatusRequest, _callback);
        }
    }

    /**
     * Update terms of service status for existing user
     * Updates the status for a terms of service for a user.
     * @param termsOfServiceUserStatusId The ID of the terms of service status. (required)
     * @return UpdateUserStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated terms of service status object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserStatusRequestBuilder updateUserStatus(Boolean isAccepted, String termsOfServiceUserStatusId) throws IllegalArgumentException {
        if (isAccepted == null) throw new IllegalArgumentException("\"isAccepted\" is required but got null");
        if (termsOfServiceUserStatusId == null) throw new IllegalArgumentException("\"termsOfServiceUserStatusId\" is required but got null");
            

        return new UpdateUserStatusRequestBuilder(isAccepted, termsOfServiceUserStatusId);
    }
}
