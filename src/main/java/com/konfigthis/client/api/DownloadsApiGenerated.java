/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DownloadsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DownloadsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DownloadsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call fileContentGetCall(String fileId, String range, String boxapi, String version, String accessToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/content"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (range != null) {
            localVarHeaderParams.put("range", localVarApiClient.parameterToString(range));
        }

        if (boxapi != null) {
            localVarHeaderParams.put("boxapi", localVarApiClient.parameterToString(boxapi));
        }

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileContentGetValidateBeforeCall(String fileId, String range, String boxapi, String version, String accessToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling fileContentGet(Async)");
        }

        return fileContentGetCall(fileId, range, boxapi, version, accessToken, _callback);

    }


    private ApiResponse<File> fileContentGetWithHttpInfo(String fileId, String range, String boxapi, String version, String accessToken) throws ApiException {
        okhttp3.Call localVarCall = fileContentGetValidateBeforeCall(fileId, range, boxapi, version, accessToken, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call fileContentGetAsync(String fileId, String range, String boxapi, String version, String accessToken, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileContentGetValidateBeforeCall(fileId, range, boxapi, version, accessToken, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FileContentGetRequestBuilder {
        private final String fileId;
        private String range;
        private String boxapi;
        private String version;
        private String accessToken;

        private FileContentGetRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Set range
         * @param range The byte range of the content to download.  The format &#x60;bytes&#x3D;{start_byte}-{end_byte}&#x60; can be used to specify what section of the file to download. (optional)
         * @return FileContentGetRequestBuilder
         */
        public FileContentGetRequestBuilder range(String range) {
            this.range = range;
            return this;
        }
        
        /**
         * Set boxapi
         * @param boxapi The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format &#x60;shared_link&#x3D;[link]&#x60; or if a password is required then use &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60;.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item. (optional)
         * @return FileContentGetRequestBuilder
         */
        public FileContentGetRequestBuilder boxapi(String boxapi) {
            this.boxapi = boxapi;
            return this;
        }
        
        /**
         * Set version
         * @param version The file version to download (optional)
         * @return FileContentGetRequestBuilder
         */
        public FileContentGetRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set accessToken
         * @param accessToken An optional access token that can be used to pre-authenticate this request, which means that a download link can be shared with a browser or a third party service without them needing to know how to handle the authentication. When using this parameter, please make sure that the access token is sufficiently scoped down to only allow read access to that file and no other files or folders. (optional)
         * @return FileContentGetRequestBuilder
         */
        public FileContentGetRequestBuilder accessToken(String accessToken) {
            this.accessToken = accessToken;
            return this;
        }
        
        /**
         * Build call for fileContentGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the requested file if the client has the **follow redirects** setting enabled to automatically follow HTTP &#x60;3xx&#x60; responses as redirects. If not, the request will return &#x60;302&#x60; instead. For details, see the [download file guide](g://downloads/file#download-url). </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> If the file is not ready to be downloaded yet &#x60;Retry-After&#x60; header will be returned indicating the time in seconds after which the file will be available for the client to download.  This response can occur when the file was uploaded immediately before the download request. </td><td>  * Retry-After - Indicates the number of seconds the client should wait before attempting their commit request again. <br>  </td></tr>
            <tr><td> 302 </td><td> If the file is available for download the response will include a &#x60;Location&#x60; header for the file on &#x60;dl.boxcloud.com&#x60;.  The &#x60;dl.boxcloud.com&#x60; URL is not persistent and clients will need to follow the redirect to actually download the file. </td><td>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return fileContentGetCall(fileId, range, boxapi, version, accessToken, _callback);
        }


        /**
         * Execute fileContentGet request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the requested file if the client has the **follow redirects** setting enabled to automatically follow HTTP &#x60;3xx&#x60; responses as redirects. If not, the request will return &#x60;302&#x60; instead. For details, see the [download file guide](g://downloads/file#download-url). </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> If the file is not ready to be downloaded yet &#x60;Retry-After&#x60; header will be returned indicating the time in seconds after which the file will be available for the client to download.  This response can occur when the file was uploaded immediately before the download request. </td><td>  * Retry-After - Indicates the number of seconds the client should wait before attempting their commit request again. <br>  </td></tr>
            <tr><td> 302 </td><td> If the file is available for download the response will include a &#x60;Location&#x60; header for the file on &#x60;dl.boxcloud.com&#x60;.  The &#x60;dl.boxcloud.com&#x60; URL is not persistent and clients will need to follow the redirect to actually download the file. </td><td>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = fileContentGetWithHttpInfo(fileId, range, boxapi, version, accessToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute fileContentGet request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the requested file if the client has the **follow redirects** setting enabled to automatically follow HTTP &#x60;3xx&#x60; responses as redirects. If not, the request will return &#x60;302&#x60; instead. For details, see the [download file guide](g://downloads/file#download-url). </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> If the file is not ready to be downloaded yet &#x60;Retry-After&#x60; header will be returned indicating the time in seconds after which the file will be available for the client to download.  This response can occur when the file was uploaded immediately before the download request. </td><td>  * Retry-After - Indicates the number of seconds the client should wait before attempting their commit request again. <br>  </td></tr>
            <tr><td> 302 </td><td> If the file is available for download the response will include a &#x60;Location&#x60; header for the file on &#x60;dl.boxcloud.com&#x60;.  The &#x60;dl.boxcloud.com&#x60; URL is not persistent and clients will need to follow the redirect to actually download the file. </td><td>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return fileContentGetWithHttpInfo(fileId, range, boxapi, version, accessToken);
        }

        /**
         * Execute fileContentGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the requested file if the client has the **follow redirects** setting enabled to automatically follow HTTP &#x60;3xx&#x60; responses as redirects. If not, the request will return &#x60;302&#x60; instead. For details, see the [download file guide](g://downloads/file#download-url). </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> If the file is not ready to be downloaded yet &#x60;Retry-After&#x60; header will be returned indicating the time in seconds after which the file will be available for the client to download.  This response can occur when the file was uploaded immediately before the download request. </td><td>  * Retry-After - Indicates the number of seconds the client should wait before attempting their commit request again. <br>  </td></tr>
            <tr><td> 302 </td><td> If the file is available for download the response will include a &#x60;Location&#x60; header for the file on &#x60;dl.boxcloud.com&#x60;.  The &#x60;dl.boxcloud.com&#x60; URL is not persistent and clients will need to follow the redirect to actually download the file. </td><td>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return fileContentGetAsync(fileId, range, boxapi, version, accessToken, _callback);
        }
    }

    /**
     * Download file
     * Returns the contents of a file in binary format.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return FileContentGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested file if the client has the **follow redirects** setting enabled to automatically follow HTTP &#x60;3xx&#x60; responses as redirects. If not, the request will return &#x60;302&#x60; instead. For details, see the [download file guide](g://downloads/file#download-url). </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> If the file is not ready to be downloaded yet &#x60;Retry-After&#x60; header will be returned indicating the time in seconds after which the file will be available for the client to download.  This response can occur when the file was uploaded immediately before the download request. </td><td>  * Retry-After - Indicates the number of seconds the client should wait before attempting their commit request again. <br>  </td></tr>
        <tr><td> 302 </td><td> If the file is available for download the response will include a &#x60;Location&#x60; header for the file on &#x60;dl.boxcloud.com&#x60;.  The &#x60;dl.boxcloud.com&#x60; URL is not persistent and clients will need to follow the redirect to actually download the file. </td><td>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public FileContentGetRequestBuilder fileContentGet(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new FileContentGetRequestBuilder(fileId);
    }
}
