/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.SharedLinksWebLinksAddLinkToWebLinkRequest;
import com.konfigthis.client.model.SharedLinksWebLinksAddLinkToWebLinkRequestSharedLink;
import com.konfigthis.client.model.SharedLinksWebLinksRemoveSharedLinkRequest;
import com.konfigthis.client.model.SharedLinksWebLinksUpdateSharedLinkRequest;
import com.konfigthis.client.model.SharedLinksWebLinksUpdateSharedLinkRequestSharedLink;
import com.konfigthis.client.model.WebLink;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SharedLinksWebLinksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SharedLinksWebLinksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SharedLinksWebLinksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addLinkToWebLinkCall(String webLinkId, String fields, SharedLinksWebLinksAddLinkToWebLinkRequest sharedLinksWebLinksAddLinkToWebLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedLinksWebLinksAddLinkToWebLinkRequest;

        // create path and map variables
        String localVarPath = "/web_links/{web_link_id}#add_shared_link"
            .replace("{" + "web_link_id" + "}", localVarApiClient.escapeString(webLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLinkToWebLinkValidateBeforeCall(String webLinkId, String fields, SharedLinksWebLinksAddLinkToWebLinkRequest sharedLinksWebLinksAddLinkToWebLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webLinkId' is set
        if (webLinkId == null) {
            throw new ApiException("Missing the required parameter 'webLinkId' when calling addLinkToWebLink(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling addLinkToWebLink(Async)");
        }

        return addLinkToWebLinkCall(webLinkId, fields, sharedLinksWebLinksAddLinkToWebLinkRequest, _callback);

    }


    private ApiResponse<WebLink> addLinkToWebLinkWithHttpInfo(String webLinkId, String fields, SharedLinksWebLinksAddLinkToWebLinkRequest sharedLinksWebLinksAddLinkToWebLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = addLinkToWebLinkValidateBeforeCall(webLinkId, fields, sharedLinksWebLinksAddLinkToWebLinkRequest, null);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addLinkToWebLinkAsync(String webLinkId, String fields, SharedLinksWebLinksAddLinkToWebLinkRequest sharedLinksWebLinksAddLinkToWebLinkRequest, final ApiCallback<WebLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLinkToWebLinkValidateBeforeCall(webLinkId, fields, sharedLinksWebLinksAddLinkToWebLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddLinkToWebLinkRequestBuilder {
        private final String webLinkId;
        private final String fields;
        private SharedLinksWebLinksAddLinkToWebLinkRequestSharedLink sharedLink;

        private AddLinkToWebLinkRequestBuilder(String webLinkId, String fields) {
            this.webLinkId = webLinkId;
            this.fields = fields;
        }

        /**
         * Set sharedLink
         * @param sharedLink  (optional)
         * @return AddLinkToWebLinkRequestBuilder
         */
        public AddLinkToWebLinkRequestBuilder sharedLink(SharedLinksWebLinksAddLinkToWebLinkRequestSharedLink sharedLink) {
            this.sharedLink = sharedLink;
            return this;
        }
        
        /**
         * Build call for addLinkToWebLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a web link with a new shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SharedLinksWebLinksAddLinkToWebLinkRequest sharedLinksWebLinksAddLinkToWebLinkRequest = buildBodyParams();
            return addLinkToWebLinkCall(webLinkId, fields, sharedLinksWebLinksAddLinkToWebLinkRequest, _callback);
        }

        private SharedLinksWebLinksAddLinkToWebLinkRequest buildBodyParams() {
            SharedLinksWebLinksAddLinkToWebLinkRequest sharedLinksWebLinksAddLinkToWebLinkRequest = new SharedLinksWebLinksAddLinkToWebLinkRequest();
            sharedLinksWebLinksAddLinkToWebLinkRequest.sharedLink(this.sharedLink);
            return sharedLinksWebLinksAddLinkToWebLinkRequest;
        }

        /**
         * Execute addLinkToWebLink request
         * @return WebLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a web link with a new shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public WebLink execute() throws ApiException {
            SharedLinksWebLinksAddLinkToWebLinkRequest sharedLinksWebLinksAddLinkToWebLinkRequest = buildBodyParams();
            ApiResponse<WebLink> localVarResp = addLinkToWebLinkWithHttpInfo(webLinkId, fields, sharedLinksWebLinksAddLinkToWebLinkRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addLinkToWebLink request with HTTP info returned
         * @return ApiResponse&lt;WebLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a web link with a new shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebLink> executeWithHttpInfo() throws ApiException {
            SharedLinksWebLinksAddLinkToWebLinkRequest sharedLinksWebLinksAddLinkToWebLinkRequest = buildBodyParams();
            return addLinkToWebLinkWithHttpInfo(webLinkId, fields, sharedLinksWebLinksAddLinkToWebLinkRequest);
        }

        /**
         * Execute addLinkToWebLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a web link with a new shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebLink> _callback) throws ApiException {
            SharedLinksWebLinksAddLinkToWebLinkRequest sharedLinksWebLinksAddLinkToWebLinkRequest = buildBodyParams();
            return addLinkToWebLinkAsync(webLinkId, fields, sharedLinksWebLinksAddLinkToWebLinkRequest, _callback);
        }
    }

    /**
     * Add shared link to web link
     * Adds a shared link to a web link.
     * @param webLinkId The ID of the web link. (required)
     * @param fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item. (required)
     * @return AddLinkToWebLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the base representation of a web link with a new shared link attached. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public AddLinkToWebLinkRequestBuilder addLinkToWebLink(String webLinkId, String fields) throws IllegalArgumentException {
        if (webLinkId == null) throw new IllegalArgumentException("\"webLinkId\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        return new AddLinkToWebLinkRequestBuilder(webLinkId, fields);
    }
    private okhttp3.Call findSharedWebLinkCall(String boxapi, String ifNoneMatch, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shared_items#web_links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("if-none-match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (boxapi != null) {
            localVarHeaderParams.put("boxapi", localVarApiClient.parameterToString(boxapi));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findSharedWebLinkValidateBeforeCall(String boxapi, String ifNoneMatch, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boxapi' is set
        if (boxapi == null) {
            throw new ApiException("Missing the required parameter 'boxapi' when calling findSharedWebLink(Async)");
        }

        return findSharedWebLinkCall(boxapi, ifNoneMatch, fields, _callback);

    }


    private ApiResponse<WebLink> findSharedWebLinkWithHttpInfo(String boxapi, String ifNoneMatch, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = findSharedWebLinkValidateBeforeCall(boxapi, ifNoneMatch, fields, null);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findSharedWebLinkAsync(String boxapi, String ifNoneMatch, List<String> fields, final ApiCallback<WebLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = findSharedWebLinkValidateBeforeCall(boxapi, ifNoneMatch, fields, _callback);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindSharedWebLinkRequestBuilder {
        private final String boxapi;
        private String ifNoneMatch;
        private List<String> fields;

        private FindSharedWebLinkRequestBuilder(String boxapi) {
            this.boxapi = boxapi;
        }

        /**
         * Set ifNoneMatch
         * @param ifNoneMatch Ensures an item is only returned if it has changed.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;304 Not Modified&#x60; if the item has not changed since. (optional)
         * @return FindSharedWebLinkRequestBuilder
         */
        public FindSharedWebLinkRequestBuilder ifNoneMatch(String ifNoneMatch) {
            this.ifNoneMatch = ifNoneMatch;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return FindSharedWebLinkRequestBuilder
         */
        public FindSharedWebLinkRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for findSharedWebLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a full file resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findSharedWebLinkCall(boxapi, ifNoneMatch, fields, _callback);
        }


        /**
         * Execute findSharedWebLink request
         * @return WebLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a full file resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public WebLink execute() throws ApiException {
            ApiResponse<WebLink> localVarResp = findSharedWebLinkWithHttpInfo(boxapi, ifNoneMatch, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findSharedWebLink request with HTTP info returned
         * @return ApiResponse&lt;WebLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a full file resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebLink> executeWithHttpInfo() throws ApiException {
            return findSharedWebLinkWithHttpInfo(boxapi, ifNoneMatch, fields);
        }

        /**
         * Execute findSharedWebLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a full file resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebLink> _callback) throws ApiException {
            return findSharedWebLinkAsync(boxapi, ifNoneMatch, fields, _callback);
        }
    }

    /**
     * Find web link for shared link
     * Returns the web link represented by a shared link.  A shared web link can be represented by a shared link, which can originate within the current enterprise or within another.  This endpoint allows an application to retrieve information about a shared web link when only given a shared link.
     * @param boxapi A header containing the shared link and optional password for the shared link.  The format for this header is as follows.  &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60; (required)
     * @return FindSharedWebLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a full file resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public FindSharedWebLinkRequestBuilder findSharedWebLink(String boxapi) throws IllegalArgumentException {
        if (boxapi == null) throw new IllegalArgumentException("\"boxapi\" is required but got null");
            

        return new FindSharedWebLinkRequestBuilder(boxapi);
    }
    private okhttp3.Call getLinkInfoCall(String webLinkId, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/web_links/{web_link_id}#get_shared_link"
            .replace("{" + "web_link_id" + "}", localVarApiClient.escapeString(webLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinkInfoValidateBeforeCall(String webLinkId, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webLinkId' is set
        if (webLinkId == null) {
            throw new ApiException("Missing the required parameter 'webLinkId' when calling getLinkInfo(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling getLinkInfo(Async)");
        }

        return getLinkInfoCall(webLinkId, fields, _callback);

    }


    private ApiResponse<WebLink> getLinkInfoWithHttpInfo(String webLinkId, String fields) throws ApiException {
        okhttp3.Call localVarCall = getLinkInfoValidateBeforeCall(webLinkId, fields, null);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLinkInfoAsync(String webLinkId, String fields, final ApiCallback<WebLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinkInfoValidateBeforeCall(webLinkId, fields, _callback);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLinkInfoRequestBuilder {
        private final String webLinkId;
        private final String fields;

        private GetLinkInfoRequestBuilder(String webLinkId, String fields) {
            this.webLinkId = webLinkId;
            this.fields = fields;
        }

        /**
         * Build call for getLinkInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a web link with the additional shared link information. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLinkInfoCall(webLinkId, fields, _callback);
        }


        /**
         * Execute getLinkInfo request
         * @return WebLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a web link with the additional shared link information. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public WebLink execute() throws ApiException {
            ApiResponse<WebLink> localVarResp = getLinkInfoWithHttpInfo(webLinkId, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLinkInfo request with HTTP info returned
         * @return ApiResponse&lt;WebLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a web link with the additional shared link information. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebLink> executeWithHttpInfo() throws ApiException {
            return getLinkInfoWithHttpInfo(webLinkId, fields);
        }

        /**
         * Execute getLinkInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a web link with the additional shared link information. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebLink> _callback) throws ApiException {
            return getLinkInfoAsync(webLinkId, fields, _callback);
        }
    }

    /**
     * Get shared link for web link
     * Gets the information for a shared link on a web link.
     * @param webLinkId The ID of the web link. (required)
     * @param fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item. (required)
     * @return GetLinkInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the base representation of a web link with the additional shared link information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetLinkInfoRequestBuilder getLinkInfo(String webLinkId, String fields) throws IllegalArgumentException {
        if (webLinkId == null) throw new IllegalArgumentException("\"webLinkId\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        return new GetLinkInfoRequestBuilder(webLinkId, fields);
    }
    private okhttp3.Call removeSharedLinkCall(String webLinkId, String fields, SharedLinksWebLinksRemoveSharedLinkRequest sharedLinksWebLinksRemoveSharedLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedLinksWebLinksRemoveSharedLinkRequest;

        // create path and map variables
        String localVarPath = "/web_links/{web_link_id}#remove_shared_link"
            .replace("{" + "web_link_id" + "}", localVarApiClient.escapeString(webLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSharedLinkValidateBeforeCall(String webLinkId, String fields, SharedLinksWebLinksRemoveSharedLinkRequest sharedLinksWebLinksRemoveSharedLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webLinkId' is set
        if (webLinkId == null) {
            throw new ApiException("Missing the required parameter 'webLinkId' when calling removeSharedLink(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling removeSharedLink(Async)");
        }

        return removeSharedLinkCall(webLinkId, fields, sharedLinksWebLinksRemoveSharedLinkRequest, _callback);

    }


    private ApiResponse<WebLink> removeSharedLinkWithHttpInfo(String webLinkId, String fields, SharedLinksWebLinksRemoveSharedLinkRequest sharedLinksWebLinksRemoveSharedLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = removeSharedLinkValidateBeforeCall(webLinkId, fields, sharedLinksWebLinksRemoveSharedLinkRequest, null);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeSharedLinkAsync(String webLinkId, String fields, SharedLinksWebLinksRemoveSharedLinkRequest sharedLinksWebLinksRemoveSharedLinkRequest, final ApiCallback<WebLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSharedLinkValidateBeforeCall(webLinkId, fields, sharedLinksWebLinksRemoveSharedLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveSharedLinkRequestBuilder {
        private final String webLinkId;
        private final String fields;
        private Object sharedLink;

        private RemoveSharedLinkRequestBuilder(String webLinkId, String fields) {
            this.webLinkId = webLinkId;
            this.fields = fields;
        }

        /**
         * Set sharedLink
         * @param sharedLink By setting this value to &#x60;null&#x60;, the shared link is removed from the web link. (optional)
         * @return RemoveSharedLinkRequestBuilder
         */
        public RemoveSharedLinkRequestBuilder sharedLink(Object sharedLink) {
            this.sharedLink = sharedLink;
            return this;
        }
        
        /**
         * Build call for removeSharedLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of a web link, with the shared link removed. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SharedLinksWebLinksRemoveSharedLinkRequest sharedLinksWebLinksRemoveSharedLinkRequest = buildBodyParams();
            return removeSharedLinkCall(webLinkId, fields, sharedLinksWebLinksRemoveSharedLinkRequest, _callback);
        }

        private SharedLinksWebLinksRemoveSharedLinkRequest buildBodyParams() {
            SharedLinksWebLinksRemoveSharedLinkRequest sharedLinksWebLinksRemoveSharedLinkRequest = new SharedLinksWebLinksRemoveSharedLinkRequest();
            sharedLinksWebLinksRemoveSharedLinkRequest.sharedLink(this.sharedLink);
            return sharedLinksWebLinksRemoveSharedLinkRequest;
        }

        /**
         * Execute removeSharedLink request
         * @return WebLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of a web link, with the shared link removed. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public WebLink execute() throws ApiException {
            SharedLinksWebLinksRemoveSharedLinkRequest sharedLinksWebLinksRemoveSharedLinkRequest = buildBodyParams();
            ApiResponse<WebLink> localVarResp = removeSharedLinkWithHttpInfo(webLinkId, fields, sharedLinksWebLinksRemoveSharedLinkRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeSharedLink request with HTTP info returned
         * @return ApiResponse&lt;WebLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of a web link, with the shared link removed. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebLink> executeWithHttpInfo() throws ApiException {
            SharedLinksWebLinksRemoveSharedLinkRequest sharedLinksWebLinksRemoveSharedLinkRequest = buildBodyParams();
            return removeSharedLinkWithHttpInfo(webLinkId, fields, sharedLinksWebLinksRemoveSharedLinkRequest);
        }

        /**
         * Execute removeSharedLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of a web link, with the shared link removed. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebLink> _callback) throws ApiException {
            SharedLinksWebLinksRemoveSharedLinkRequest sharedLinksWebLinksRemoveSharedLinkRequest = buildBodyParams();
            return removeSharedLinkAsync(webLinkId, fields, sharedLinksWebLinksRemoveSharedLinkRequest, _callback);
        }
    }

    /**
     * Remove shared link from web link
     * Removes a shared link from a web link.
     * @param webLinkId The ID of the web link. (required)
     * @param fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item. (required)
     * @return RemoveSharedLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a basic representation of a web link, with the shared link removed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSharedLinkRequestBuilder removeSharedLink(String webLinkId, String fields) throws IllegalArgumentException {
        if (webLinkId == null) throw new IllegalArgumentException("\"webLinkId\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        return new RemoveSharedLinkRequestBuilder(webLinkId, fields);
    }
    private okhttp3.Call updateSharedLinkCall(String webLinkId, String fields, SharedLinksWebLinksUpdateSharedLinkRequest sharedLinksWebLinksUpdateSharedLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedLinksWebLinksUpdateSharedLinkRequest;

        // create path and map variables
        String localVarPath = "/web_links/{web_link_id}#update_shared_link"
            .replace("{" + "web_link_id" + "}", localVarApiClient.escapeString(webLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSharedLinkValidateBeforeCall(String webLinkId, String fields, SharedLinksWebLinksUpdateSharedLinkRequest sharedLinksWebLinksUpdateSharedLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webLinkId' is set
        if (webLinkId == null) {
            throw new ApiException("Missing the required parameter 'webLinkId' when calling updateSharedLink(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling updateSharedLink(Async)");
        }

        return updateSharedLinkCall(webLinkId, fields, sharedLinksWebLinksUpdateSharedLinkRequest, _callback);

    }


    private ApiResponse<WebLink> updateSharedLinkWithHttpInfo(String webLinkId, String fields, SharedLinksWebLinksUpdateSharedLinkRequest sharedLinksWebLinksUpdateSharedLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSharedLinkValidateBeforeCall(webLinkId, fields, sharedLinksWebLinksUpdateSharedLinkRequest, null);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSharedLinkAsync(String webLinkId, String fields, SharedLinksWebLinksUpdateSharedLinkRequest sharedLinksWebLinksUpdateSharedLinkRequest, final ApiCallback<WebLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSharedLinkValidateBeforeCall(webLinkId, fields, sharedLinksWebLinksUpdateSharedLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSharedLinkRequestBuilder {
        private final String webLinkId;
        private final String fields;
        private SharedLinksWebLinksUpdateSharedLinkRequestSharedLink sharedLink;

        private UpdateSharedLinkRequestBuilder(String webLinkId, String fields) {
            this.webLinkId = webLinkId;
            this.fields = fields;
        }

        /**
         * Set sharedLink
         * @param sharedLink  (optional)
         * @return UpdateSharedLinkRequestBuilder
         */
        public UpdateSharedLinkRequestBuilder sharedLink(SharedLinksWebLinksUpdateSharedLinkRequestSharedLink sharedLink) {
            this.sharedLink = sharedLink;
            return this;
        }
        
        /**
         * Build call for updateSharedLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of the web link, with the updated shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SharedLinksWebLinksUpdateSharedLinkRequest sharedLinksWebLinksUpdateSharedLinkRequest = buildBodyParams();
            return updateSharedLinkCall(webLinkId, fields, sharedLinksWebLinksUpdateSharedLinkRequest, _callback);
        }

        private SharedLinksWebLinksUpdateSharedLinkRequest buildBodyParams() {
            SharedLinksWebLinksUpdateSharedLinkRequest sharedLinksWebLinksUpdateSharedLinkRequest = new SharedLinksWebLinksUpdateSharedLinkRequest();
            sharedLinksWebLinksUpdateSharedLinkRequest.sharedLink(this.sharedLink);
            return sharedLinksWebLinksUpdateSharedLinkRequest;
        }

        /**
         * Execute updateSharedLink request
         * @return WebLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of the web link, with the updated shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public WebLink execute() throws ApiException {
            SharedLinksWebLinksUpdateSharedLinkRequest sharedLinksWebLinksUpdateSharedLinkRequest = buildBodyParams();
            ApiResponse<WebLink> localVarResp = updateSharedLinkWithHttpInfo(webLinkId, fields, sharedLinksWebLinksUpdateSharedLinkRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSharedLink request with HTTP info returned
         * @return ApiResponse&lt;WebLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of the web link, with the updated shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebLink> executeWithHttpInfo() throws ApiException {
            SharedLinksWebLinksUpdateSharedLinkRequest sharedLinksWebLinksUpdateSharedLinkRequest = buildBodyParams();
            return updateSharedLinkWithHttpInfo(webLinkId, fields, sharedLinksWebLinksUpdateSharedLinkRequest);
        }

        /**
         * Execute updateSharedLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of the web link, with the updated shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebLink> _callback) throws ApiException {
            SharedLinksWebLinksUpdateSharedLinkRequest sharedLinksWebLinksUpdateSharedLinkRequest = buildBodyParams();
            return updateSharedLinkAsync(webLinkId, fields, sharedLinksWebLinksUpdateSharedLinkRequest, _callback);
        }
    }

    /**
     * Update shared link on web link
     * Updates a shared link on a web link.
     * @param webLinkId The ID of the web link. (required)
     * @param fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item. (required)
     * @return UpdateSharedLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a basic representation of the web link, with the updated shared link attached. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSharedLinkRequestBuilder updateSharedLink(String webLinkId, String fields) throws IllegalArgumentException {
        if (webLinkId == null) throw new IllegalArgumentException("\"webLinkId\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        return new UpdateSharedLinkRequestBuilder(webLinkId, fields);
    }
}
