/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FolderLock;
import com.konfigthis.client.model.FolderLocks;
import com.konfigthis.client.model.FolderLocksCreateRequest;
import com.konfigthis.client.model.FolderLocksCreateRequestFolder;
import com.konfigthis.client.model.FolderLocksCreateRequestLockedOperations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FolderLocksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FolderLocksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FolderLocksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(FolderLocksCreateRequest folderLocksCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = folderLocksCreateRequest;

        // create path and map variables
        String localVarPath = "/folder_locks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(FolderLocksCreateRequest folderLocksCreateRequest, final ApiCallback _callback) throws ApiException {
        return createCall(folderLocksCreateRequest, _callback);

    }


    private ApiResponse<FolderLock> createWithHttpInfo(FolderLocksCreateRequest folderLocksCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(folderLocksCreateRequest, null);
        Type localVarReturnType = new TypeToken<FolderLock>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(FolderLocksCreateRequest folderLocksCreateRequest, final ApiCallback<FolderLock> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(folderLocksCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<FolderLock>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final FolderLocksCreateRequestFolder folder;
        private FolderLocksCreateRequestLockedOperations lockedOperations;

        private CreateRequestBuilder(FolderLocksCreateRequestFolder folder) {
            this.folder = folder;
        }

        /**
         * Set lockedOperations
         * @param lockedOperations  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder lockedOperations(FolderLocksCreateRequestLockedOperations lockedOperations) {
            this.lockedOperations = lockedOperations;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the instance of the folder lock that was applied to the folder, including the user that applied the lock and the operations set. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FolderLocksCreateRequest folderLocksCreateRequest = buildBodyParams();
            return createCall(folderLocksCreateRequest, _callback);
        }

        private FolderLocksCreateRequest buildBodyParams() {
            FolderLocksCreateRequest folderLocksCreateRequest = new FolderLocksCreateRequest();
            folderLocksCreateRequest.lockedOperations(this.lockedOperations);
            folderLocksCreateRequest.folder(this.folder);
            return folderLocksCreateRequest;
        }

        /**
         * Execute create request
         * @return FolderLock
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the instance of the folder lock that was applied to the folder, including the user that applied the lock and the operations set. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FolderLock execute() throws ApiException {
            FolderLocksCreateRequest folderLocksCreateRequest = buildBodyParams();
            ApiResponse<FolderLock> localVarResp = createWithHttpInfo(folderLocksCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;FolderLock&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the instance of the folder lock that was applied to the folder, including the user that applied the lock and the operations set. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FolderLock> executeWithHttpInfo() throws ApiException {
            FolderLocksCreateRequest folderLocksCreateRequest = buildBodyParams();
            return createWithHttpInfo(folderLocksCreateRequest);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the instance of the folder lock that was applied to the folder, including the user that applied the lock and the operations set. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FolderLock> _callback) throws ApiException {
            FolderLocksCreateRequest folderLocksCreateRequest = buildBodyParams();
            return createAsync(folderLocksCreateRequest, _callback);
        }
    }

    /**
     * Create folder lock
     * Creates a folder lock on a folder, preventing it from being moved and/or deleted.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the instance of the folder lock that was applied to the folder, including the user that applied the lock and the operations set. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(FolderLocksCreateRequestFolder folder) throws IllegalArgumentException {
        if (folder == null) throw new IllegalArgumentException("\"folder\" is required but got null");
        return new CreateRequestBuilder(folder);
    }
    private okhttp3.Call deleteFolderLockCall(String folderLockId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder_locks/{folder_lock_id}"
            .replace("{" + "folder_lock_id" + "}", localVarApiClient.escapeString(folderLockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderLockValidateBeforeCall(String folderLockId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderLockId' is set
        if (folderLockId == null) {
            throw new ApiException("Missing the required parameter 'folderLockId' when calling deleteFolderLock(Async)");
        }

        return deleteFolderLockCall(folderLockId, _callback);

    }


    private ApiResponse<Void> deleteFolderLockWithHttpInfo(String folderLockId) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderLockValidateBeforeCall(folderLockId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFolderLockAsync(String folderLockId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderLockValidateBeforeCall(folderLockId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFolderLockRequestBuilder {
        private final String folderLockId;

        private DeleteFolderLockRequestBuilder(String folderLockId) {
            this.folderLockId = folderLockId;
        }

        /**
         * Build call for deleteFolderLock
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the folder lock is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFolderLockCall(folderLockId, _callback);
        }


        /**
         * Execute deleteFolderLock request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the folder lock is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFolderLockWithHttpInfo(folderLockId);
        }

        /**
         * Execute deleteFolderLock request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the folder lock is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFolderLockWithHttpInfo(folderLockId);
        }

        /**
         * Execute deleteFolderLock request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the folder lock is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFolderLockAsync(folderLockId, _callback);
        }
    }

    /**
     * Delete folder lock
     * Deletes a folder lock on a given folder.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
     * @param folderLockId The ID of the folder lock. (required)
     * @return DeleteFolderLockRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the folder lock is successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFolderLockRequestBuilder deleteFolderLock(String folderLockId) throws IllegalArgumentException {
        if (folderLockId == null) throw new IllegalArgumentException("\"folderLockId\" is required but got null");
            

        return new DeleteFolderLockRequestBuilder(folderLockId);
    }
    private okhttp3.Call listDetailsCall(String folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder_locks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (folderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("folder_id", folderId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDetailsValidateBeforeCall(String folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling listDetails(Async)");
        }

        return listDetailsCall(folderId, _callback);

    }


    private ApiResponse<FolderLocks> listDetailsWithHttpInfo(String folderId) throws ApiException {
        okhttp3.Call localVarCall = listDetailsValidateBeforeCall(folderId, null);
        Type localVarReturnType = new TypeToken<FolderLocks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDetailsAsync(String folderId, final ApiCallback<FolderLocks> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDetailsValidateBeforeCall(folderId, _callback);
        Type localVarReturnType = new TypeToken<FolderLocks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDetailsRequestBuilder {
        private final String folderId;

        private ListDetailsRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Build call for listDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns details for all folder locks applied to the folder, including the lock type and user that applied the lock. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDetailsCall(folderId, _callback);
        }


        /**
         * Execute listDetails request
         * @return FolderLocks
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns details for all folder locks applied to the folder, including the lock type and user that applied the lock. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FolderLocks execute() throws ApiException {
            ApiResponse<FolderLocks> localVarResp = listDetailsWithHttpInfo(folderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDetails request with HTTP info returned
         * @return ApiResponse&lt;FolderLocks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns details for all folder locks applied to the folder, including the lock type and user that applied the lock. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FolderLocks> executeWithHttpInfo() throws ApiException {
            return listDetailsWithHttpInfo(folderId);
        }

        /**
         * Execute listDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns details for all folder locks applied to the folder, including the lock type and user that applied the lock. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FolderLocks> _callback) throws ApiException {
            return listDetailsAsync(folderId, _callback);
        }
    }

    /**
     * List folder locks
     * Retrieves folder lock details for a given folder.  You must be authenticated as the owner or co-owner of the folder to use this endpoint.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return ListDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns details for all folder locks applied to the folder, including the lock type and user that applied the lock. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListDetailsRequestBuilder listDetails(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new ListDetailsRequestBuilder(folderId);
    }
}
