/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import java.io.File;
import com.konfigthis.client.model.Files;
import com.konfigthis.client.model.UploadsFileContentUpdateRequest;
import com.konfigthis.client.model.UploadsFileContentUpdateRequestAttributes;
import com.konfigthis.client.model.UploadsSmallFileRequest;
import com.konfigthis.client.model.UploadsSmallFileRequestAttributes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UploadsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UploadsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UploadsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call fileContentUpdateCall(String fileId, UploadsFileContentUpdateRequestAttributes attributes, File _file, String ifMatch, List<String> fields, String contentMd5, UploadsFileContentUpdateRequest uploadsFileContentUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.box.com/api/2.0" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsFileContentUpdateRequest;

        // create path and map variables
        String localVarPath = "/files/{file_id}/content"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("attributes", attributes);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("if-match", localVarApiClient.parameterToString(ifMatch));
        }

        if (contentMd5 != null) {
            localVarHeaderParams.put("content-md5", localVarApiClient.parameterToString(contentMd5));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileContentUpdateValidateBeforeCall(String fileId, UploadsFileContentUpdateRequestAttributes attributes, File _file, String ifMatch, List<String> fields, String contentMd5, UploadsFileContentUpdateRequest uploadsFileContentUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling fileContentUpdate(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling fileContentUpdate(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling fileContentUpdate(Async)");
        }

        return fileContentUpdateCall(fileId, attributes, _file, ifMatch, fields, contentMd5, uploadsFileContentUpdateRequest, _callback);

    }


    private ApiResponse<Files> fileContentUpdateWithHttpInfo(String fileId, UploadsFileContentUpdateRequestAttributes attributes, File _file, String ifMatch, List<String> fields, String contentMd5, UploadsFileContentUpdateRequest uploadsFileContentUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = fileContentUpdateValidateBeforeCall(fileId, attributes, _file, ifMatch, fields, contentMd5, uploadsFileContentUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call fileContentUpdateAsync(String fileId, UploadsFileContentUpdateRequestAttributes attributes, File _file, String ifMatch, List<String> fields, String contentMd5, UploadsFileContentUpdateRequest uploadsFileContentUpdateRequest, final ApiCallback<Files> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileContentUpdateValidateBeforeCall(fileId, attributes, _file, ifMatch, fields, contentMd5, uploadsFileContentUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FileContentUpdateRequestBuilder {
        private final String fileId;
        private final UploadsFileContentUpdateRequestAttributes attributes;
        private final File _file;
        private String ifMatch;
        private List<String> fields;
        private String contentMd5;

        private FileContentUpdateRequestBuilder(String fileId, UploadsFileContentUpdateRequestAttributes attributes, File _file) {
            this.fileId = fileId;
            this.attributes = attributes;
            this._file = _file;
        }

        /**
         * Set ifMatch
         * @param ifMatch Ensures this item hasn&#39;t recently changed before making changes.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since. (optional)
         * @return FileContentUpdateRequestBuilder
         */
        public FileContentUpdateRequestBuilder ifMatch(String ifMatch) {
            this.ifMatch = ifMatch;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return FileContentUpdateRequestBuilder
         */
        public FileContentUpdateRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set contentMd5
         * @param contentMd5 An optional header containing the SHA1 hash of the file to ensure that the file was not corrupted in transit. (optional)
         * @return FileContentUpdateRequestBuilder
         */
        public FileContentUpdateRequestBuilder contentMd5(String contentMd5) {
            this.contentMd5 = contentMd5;
            return this;
        }
        
        /**
         * Build call for fileContentUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the new file object in a list. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsFileContentUpdateRequest uploadsFileContentUpdateRequest = buildBodyParams();
            return fileContentUpdateCall(fileId, attributes, _file, ifMatch, fields, contentMd5, uploadsFileContentUpdateRequest, _callback);
        }

        private UploadsFileContentUpdateRequest buildBodyParams() {
            UploadsFileContentUpdateRequest uploadsFileContentUpdateRequest = new UploadsFileContentUpdateRequest();
            uploadsFileContentUpdateRequest.attributes(this.attributes);
            uploadsFileContentUpdateRequest._file(this._file);
            return uploadsFileContentUpdateRequest;
        }

        /**
         * Execute fileContentUpdate request
         * @return Files
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the new file object in a list. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Files execute() throws ApiException {
            UploadsFileContentUpdateRequest uploadsFileContentUpdateRequest = buildBodyParams();
            ApiResponse<Files> localVarResp = fileContentUpdateWithHttpInfo(fileId, attributes, _file, ifMatch, fields, contentMd5, uploadsFileContentUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute fileContentUpdate request with HTTP info returned
         * @return ApiResponse&lt;Files&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the new file object in a list. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Files> executeWithHttpInfo() throws ApiException {
            UploadsFileContentUpdateRequest uploadsFileContentUpdateRequest = buildBodyParams();
            return fileContentUpdateWithHttpInfo(fileId, attributes, _file, ifMatch, fields, contentMd5, uploadsFileContentUpdateRequest);
        }

        /**
         * Execute fileContentUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the new file object in a list. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Files> _callback) throws ApiException {
            UploadsFileContentUpdateRequest uploadsFileContentUpdateRequest = buildBodyParams();
            return fileContentUpdateAsync(fileId, attributes, _file, ifMatch, fields, contentMd5, uploadsFileContentUpdateRequest, _callback);
        }
    }

    /**
     * Upload file version
     * Update a file&#39;s content. For file sizes over 50MB we recommend using the Chunk Upload APIs.  # Request body order  The &#x60;attributes&#x60; part of the body must come **before** the &#x60;file&#x60; part. Requests that do not follow this format when uploading the file will receive a HTTP &#x60;400&#x60; error with a &#x60;metadata_after_file_contents&#x60; error code.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param attributes  (required)
     * @param _file The content of the file to upload to Box.  &lt;Message warning&gt;    The &#x60;attributes&#x60; part of the body must come **before** the   &#x60;file&#x60; part. Requests that do not follow this format when   uploading the file will receive a HTTP &#x60;400&#x60; error with a   &#x60;metadata_after_file_contents&#x60; error code.  &lt;/Message&gt; (required)
     * @return FileContentUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the new file object in a list. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public FileContentUpdateRequestBuilder fileContentUpdate(String fileId, UploadsFileContentUpdateRequestAttributes attributes, File _file) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (attributes == null) throw new IllegalArgumentException("\"attributes\" is required but got null");
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new FileContentUpdateRequestBuilder(fileId, attributes, _file);
    }
    private okhttp3.Call smallFileCall(UploadsSmallFileRequestAttributes attributes, File _file, List<String> fields, String contentMd5, UploadsSmallFileRequest uploadsSmallFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.box.com/api/2.0" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsSmallFileRequest;

        // create path and map variables
        String localVarPath = "/files/content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("attributes", attributes);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (contentMd5 != null) {
            localVarHeaderParams.put("content-md5", localVarApiClient.parameterToString(contentMd5));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smallFileValidateBeforeCall(UploadsSmallFileRequestAttributes attributes, File _file, List<String> fields, String contentMd5, UploadsSmallFileRequest uploadsSmallFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling smallFile(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling smallFile(Async)");
        }

        return smallFileCall(attributes, _file, fields, contentMd5, uploadsSmallFileRequest, _callback);

    }


    private ApiResponse<Files> smallFileWithHttpInfo(UploadsSmallFileRequestAttributes attributes, File _file, List<String> fields, String contentMd5, UploadsSmallFileRequest uploadsSmallFileRequest) throws ApiException {
        okhttp3.Call localVarCall = smallFileValidateBeforeCall(attributes, _file, fields, contentMd5, uploadsSmallFileRequest, null);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call smallFileAsync(UploadsSmallFileRequestAttributes attributes, File _file, List<String> fields, String contentMd5, UploadsSmallFileRequest uploadsSmallFileRequest, final ApiCallback<Files> _callback) throws ApiException {

        okhttp3.Call localVarCall = smallFileValidateBeforeCall(attributes, _file, fields, contentMd5, uploadsSmallFileRequest, _callback);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SmallFileRequestBuilder {
        private final UploadsSmallFileRequestAttributes attributes;
        private final File _file;
        private List<String> fields;
        private String contentMd5;

        private SmallFileRequestBuilder(UploadsSmallFileRequestAttributes attributes, File _file) {
            this.attributes = attributes;
            this._file = _file;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return SmallFileRequestBuilder
         */
        public SmallFileRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set contentMd5
         * @param contentMd5 An optional header containing the SHA1 hash of the file to ensure that the file was not corrupted in transit. (optional)
         * @return SmallFileRequestBuilder
         */
        public SmallFileRequestBuilder contentMd5(String contentMd5) {
            this.contentMd5 = contentMd5;
            return this;
        }
        
        /**
         * Build call for smallFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the new file object in a list. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsSmallFileRequest uploadsSmallFileRequest = buildBodyParams();
            return smallFileCall(attributes, _file, fields, contentMd5, uploadsSmallFileRequest, _callback);
        }

        private UploadsSmallFileRequest buildBodyParams() {
            UploadsSmallFileRequest uploadsSmallFileRequest = new UploadsSmallFileRequest();
            uploadsSmallFileRequest.attributes(this.attributes);
            uploadsSmallFileRequest._file(this._file);
            return uploadsSmallFileRequest;
        }

        /**
         * Execute smallFile request
         * @return Files
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the new file object in a list. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Files execute() throws ApiException {
            UploadsSmallFileRequest uploadsSmallFileRequest = buildBodyParams();
            ApiResponse<Files> localVarResp = smallFileWithHttpInfo(attributes, _file, fields, contentMd5, uploadsSmallFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute smallFile request with HTTP info returned
         * @return ApiResponse&lt;Files&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the new file object in a list. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Files> executeWithHttpInfo() throws ApiException {
            UploadsSmallFileRequest uploadsSmallFileRequest = buildBodyParams();
            return smallFileWithHttpInfo(attributes, _file, fields, contentMd5, uploadsSmallFileRequest);
        }

        /**
         * Execute smallFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the new file object in a list. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Files> _callback) throws ApiException {
            UploadsSmallFileRequest uploadsSmallFileRequest = buildBodyParams();
            return smallFileAsync(attributes, _file, fields, contentMd5, uploadsSmallFileRequest, _callback);
        }
    }

    /**
     * Upload file
     * Uploads a small file to Box. For file sizes over 50MB we recommend using the Chunk Upload APIs.  # Request body order  The &#x60;attributes&#x60; part of the body must come **before** the &#x60;file&#x60; part. Requests that do not follow this format when uploading the file will receive a HTTP &#x60;400&#x60; error with a &#x60;metadata_after_file_contents&#x60; error code.
     * @param attributes  (required)
     * @param _file The content of the file to upload to Box.  &lt;Message warning&gt;    The &#x60;attributes&#x60; part of the body must come **before** the   &#x60;file&#x60; part. Requests that do not follow this format when   uploading the file will receive a HTTP &#x60;400&#x60; error with a   &#x60;metadata_after_file_contents&#x60; error code.  &lt;/Message&gt; (required)
     * @return SmallFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the new file object in a list. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public SmallFileRequestBuilder smallFile(UploadsSmallFileRequestAttributes attributes, File _file) throws IllegalArgumentException {
        if (attributes == null) throw new IllegalArgumentException("\"attributes\" is required but got null");
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new SmallFileRequestBuilder(attributes, _file);
    }
}
