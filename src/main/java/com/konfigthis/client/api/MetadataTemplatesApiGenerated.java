/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AMetadataTemplateUpdateOperation;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.MetadataFieldWrite;
import com.konfigthis.client.model.MetadataTemplate;
import com.konfigthis.client.model.MetadataTemplates;
import com.konfigthis.client.model.MetadataTemplatesCreateNewTemplateRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MetadataTemplatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetadataTemplatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MetadataTemplatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTemplateCall(MetadataTemplatesCreateNewTemplateRequest metadataTemplatesCreateNewTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadataTemplatesCreateNewTemplateRequest;

        // create path and map variables
        String localVarPath = "/metadata_templates/schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTemplateValidateBeforeCall(MetadataTemplatesCreateNewTemplateRequest metadataTemplatesCreateNewTemplateRequest, final ApiCallback _callback) throws ApiException {
        return createNewTemplateCall(metadataTemplatesCreateNewTemplateRequest, _callback);

    }


    private ApiResponse<MetadataTemplate> createNewTemplateWithHttpInfo(MetadataTemplatesCreateNewTemplateRequest metadataTemplatesCreateNewTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewTemplateValidateBeforeCall(metadataTemplatesCreateNewTemplateRequest, null);
        Type localVarReturnType = new TypeToken<MetadataTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTemplateAsync(MetadataTemplatesCreateNewTemplateRequest metadataTemplatesCreateNewTemplateRequest, final ApiCallback<MetadataTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTemplateValidateBeforeCall(metadataTemplatesCreateNewTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<MetadataTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTemplateRequestBuilder {
        private final String scope;
        private final String displayName;
        private String templateKey;
        private Boolean hidden;
        private List<MetadataFieldWrite> fields;
        private Boolean copyInstanceOnItemCopy;

        private CreateNewTemplateRequestBuilder(String scope, String displayName) {
            this.scope = scope;
            this.displayName = displayName;
        }

        /**
         * Set templateKey
         * @param templateKey A unique identifier for the template. This identifier needs to be unique across the enterprise for which the metadata template is being created.  When not provided, the API will create a unique &#x60;templateKey&#x60; based on the value of the &#x60;displayName&#x60;. (optional)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder templateKey(String templateKey) {
            this.templateKey = templateKey;
            return this;
        }
        
        /**
         * Set hidden
         * @param hidden Defines if this template is visible in the Box web app UI, or if it is purely intended for usage through the API. (optional, default to false)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder hidden(Boolean hidden) {
            this.hidden = hidden;
            return this;
        }
        
        /**
         * Set fields
         * @param fields An ordered list of template fields which are part of the template. Each field can be a regular text field, date field, number field, as well as a single or multi-select list. (optional)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder fields(List<MetadataFieldWrite> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set copyInstanceOnItemCopy
         * @param copyInstanceOnItemCopy Whether or not to copy any metadata attached to a file or folder when it is copied. By default, metadata is not copied along with a file or folder when it is copied. (optional, default to false)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder copyInstanceOnItemCopy(Boolean copyInstanceOnItemCopy) {
            this.copyInstanceOnItemCopy = copyInstanceOnItemCopy;
            return this;
        }
        
        /**
         * Build call for createNewTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The schema representing the metadata template created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MetadataTemplatesCreateNewTemplateRequest metadataTemplatesCreateNewTemplateRequest = buildBodyParams();
            return createNewTemplateCall(metadataTemplatesCreateNewTemplateRequest, _callback);
        }

        private MetadataTemplatesCreateNewTemplateRequest buildBodyParams() {
            MetadataTemplatesCreateNewTemplateRequest metadataTemplatesCreateNewTemplateRequest = new MetadataTemplatesCreateNewTemplateRequest();
            metadataTemplatesCreateNewTemplateRequest.scope(this.scope);
            metadataTemplatesCreateNewTemplateRequest.templateKey(this.templateKey);
            metadataTemplatesCreateNewTemplateRequest.displayName(this.displayName);
            metadataTemplatesCreateNewTemplateRequest.hidden(this.hidden);
            metadataTemplatesCreateNewTemplateRequest.fields(this.fields);
            metadataTemplatesCreateNewTemplateRequest.copyInstanceOnItemCopy(this.copyInstanceOnItemCopy);
            return metadataTemplatesCreateNewTemplateRequest;
        }

        /**
         * Execute createNewTemplate request
         * @return MetadataTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The schema representing the metadata template created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataTemplate execute() throws ApiException {
            MetadataTemplatesCreateNewTemplateRequest metadataTemplatesCreateNewTemplateRequest = buildBodyParams();
            ApiResponse<MetadataTemplate> localVarResp = createNewTemplateWithHttpInfo(metadataTemplatesCreateNewTemplateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTemplate request with HTTP info returned
         * @return ApiResponse&lt;MetadataTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The schema representing the metadata template created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataTemplate> executeWithHttpInfo() throws ApiException {
            MetadataTemplatesCreateNewTemplateRequest metadataTemplatesCreateNewTemplateRequest = buildBodyParams();
            return createNewTemplateWithHttpInfo(metadataTemplatesCreateNewTemplateRequest);
        }

        /**
         * Execute createNewTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The schema representing the metadata template created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataTemplate> _callback) throws ApiException {
            MetadataTemplatesCreateNewTemplateRequest metadataTemplatesCreateNewTemplateRequest = buildBodyParams();
            return createNewTemplateAsync(metadataTemplatesCreateNewTemplateRequest, _callback);
        }
    }

    /**
     * Create metadata template
     * Creates a new metadata template that can be applied to files and folders.
     * @return CreateNewTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The schema representing the metadata template created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTemplateRequestBuilder createNewTemplate(String scope, String displayName) throws IllegalArgumentException {
        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (displayName == null) throw new IllegalArgumentException("\"displayName\" is required but got null");
            

        return new CreateNewTemplateRequestBuilder(scope, displayName);
    }
    private okhttp3.Call deleteSchemaCall(String scope, String templateKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata_templates/{scope}/{template_key}/schema"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "template_key" + "}", localVarApiClient.escapeString(templateKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSchemaValidateBeforeCall(String scope, String templateKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteSchema(Async)");
        }

        // verify the required parameter 'templateKey' is set
        if (templateKey == null) {
            throw new ApiException("Missing the required parameter 'templateKey' when calling deleteSchema(Async)");
        }

        return deleteSchemaCall(scope, templateKey, _callback);

    }


    private ApiResponse<Void> deleteSchemaWithHttpInfo(String scope, String templateKey) throws ApiException {
        okhttp3.Call localVarCall = deleteSchemaValidateBeforeCall(scope, templateKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSchemaAsync(String scope, String templateKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSchemaValidateBeforeCall(scope, templateKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSchemaRequestBuilder {
        private final String scope;
        private final String templateKey;

        private DeleteSchemaRequestBuilder(String scope, String templateKey) {
            this.scope = scope;
            this.templateKey = templateKey;
        }

        /**
         * Build call for deleteSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the metadata template is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSchemaCall(scope, templateKey, _callback);
        }


        /**
         * Execute deleteSchema request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the metadata template is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSchemaWithHttpInfo(scope, templateKey);
        }

        /**
         * Execute deleteSchema request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the metadata template is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSchemaWithHttpInfo(scope, templateKey);
        }

        /**
         * Execute deleteSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the metadata template is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSchemaAsync(scope, templateKey, _callback);
        }
    }

    /**
     * Remove metadata template
     * Delete a metadata template and its instances. This deletion is permanent and can not be reversed.
     * @param scope The scope of the metadata template (required)
     * @param templateKey The name of the metadata template (required)
     * @return DeleteSchemaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the metadata template is successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSchemaRequestBuilder deleteSchema(String scope, String templateKey) throws IllegalArgumentException {
        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (templateKey == null) throw new IllegalArgumentException("\"templateKey\" is required but got null");
            

        return new DeleteSchemaRequestBuilder(scope, templateKey);
    }
    private okhttp3.Call findByInstanceIdCall(UUID metadataInstanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata_templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metadataInstanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata_instance_id", metadataInstanceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findByInstanceIdValidateBeforeCall(UUID metadataInstanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metadataInstanceId' is set
        if (metadataInstanceId == null) {
            throw new ApiException("Missing the required parameter 'metadataInstanceId' when calling findByInstanceId(Async)");
        }

        return findByInstanceIdCall(metadataInstanceId, _callback);

    }


    private ApiResponse<MetadataTemplates> findByInstanceIdWithHttpInfo(UUID metadataInstanceId) throws ApiException {
        okhttp3.Call localVarCall = findByInstanceIdValidateBeforeCall(metadataInstanceId, null);
        Type localVarReturnType = new TypeToken<MetadataTemplates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findByInstanceIdAsync(UUID metadataInstanceId, final ApiCallback<MetadataTemplates> _callback) throws ApiException {

        okhttp3.Call localVarCall = findByInstanceIdValidateBeforeCall(metadataInstanceId, _callback);
        Type localVarReturnType = new TypeToken<MetadataTemplates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindByInstanceIdRequestBuilder {
        private final UUID metadataInstanceId;

        private FindByInstanceIdRequestBuilder(UUID metadataInstanceId) {
            this.metadataInstanceId = metadataInstanceId;
        }

        /**
         * Build call for findByInstanceId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list containing the 1 metadata template that matches the instance ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findByInstanceIdCall(metadataInstanceId, _callback);
        }


        /**
         * Execute findByInstanceId request
         * @return MetadataTemplates
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list containing the 1 metadata template that matches the instance ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataTemplates execute() throws ApiException {
            ApiResponse<MetadataTemplates> localVarResp = findByInstanceIdWithHttpInfo(metadataInstanceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findByInstanceId request with HTTP info returned
         * @return ApiResponse&lt;MetadataTemplates&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list containing the 1 metadata template that matches the instance ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataTemplates> executeWithHttpInfo() throws ApiException {
            return findByInstanceIdWithHttpInfo(metadataInstanceId);
        }

        /**
         * Execute findByInstanceId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list containing the 1 metadata template that matches the instance ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataTemplates> _callback) throws ApiException {
            return findByInstanceIdAsync(metadataInstanceId, _callback);
        }
    }

    /**
     * Find metadata template by instance ID
     * Finds a metadata template by searching for the ID of an instance of the template.
     * @param metadataInstanceId The ID of an instance of the metadata template to find. (required)
     * @return FindByInstanceIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list containing the 1 metadata template that matches the instance ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public FindByInstanceIdRequestBuilder findByInstanceId(UUID metadataInstanceId) throws IllegalArgumentException {
        if (metadataInstanceId == null) throw new IllegalArgumentException("\"metadataInstanceId\" is required but got null");
            

        return new FindByInstanceIdRequestBuilder(metadataInstanceId);
    }
    private okhttp3.Call getByIdCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata_templates/{template_id}"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getById(Async)");
        }

        return getByIdCall(templateId, _callback);

    }


    private ApiResponse<MetadataTemplate> getByIdWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<MetadataTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String templateId, final ApiCallback<MetadataTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<MetadataTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String templateId;

        private GetByIdRequestBuilder(String templateId) {
            this.templateId = templateId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the metadata template that matches the ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(templateId, _callback);
        }


        /**
         * Execute getById request
         * @return MetadataTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the metadata template that matches the ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataTemplate execute() throws ApiException {
            ApiResponse<MetadataTemplate> localVarResp = getByIdWithHttpInfo(templateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;MetadataTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the metadata template that matches the ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataTemplate> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(templateId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the metadata template that matches the ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataTemplate> _callback) throws ApiException {
            return getByIdAsync(templateId, _callback);
        }
    }

    /**
     * Get metadata template by ID
     * Retrieves a metadata template by its ID.
     * @param templateId The ID of the template (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the metadata template that matches the ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new GetByIdRequestBuilder(templateId);
    }
    private okhttp3.Call getByNameSchemaCall(String scope, String templateKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata_templates/{scope}/{template_key}/schema"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "template_key" + "}", localVarApiClient.escapeString(templateKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByNameSchemaValidateBeforeCall(String scope, String templateKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getByNameSchema(Async)");
        }

        // verify the required parameter 'templateKey' is set
        if (templateKey == null) {
            throw new ApiException("Missing the required parameter 'templateKey' when calling getByNameSchema(Async)");
        }

        return getByNameSchemaCall(scope, templateKey, _callback);

    }


    private ApiResponse<MetadataTemplate> getByNameSchemaWithHttpInfo(String scope, String templateKey) throws ApiException {
        okhttp3.Call localVarCall = getByNameSchemaValidateBeforeCall(scope, templateKey, null);
        Type localVarReturnType = new TypeToken<MetadataTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByNameSchemaAsync(String scope, String templateKey, final ApiCallback<MetadataTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByNameSchemaValidateBeforeCall(scope, templateKey, _callback);
        Type localVarReturnType = new TypeToken<MetadataTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByNameSchemaRequestBuilder {
        private final String scope;
        private final String templateKey;

        private GetByNameSchemaRequestBuilder(String scope, String templateKey) {
            this.scope = scope;
            this.templateKey = templateKey;
        }

        /**
         * Build call for getByNameSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the metadata template matching the &#x60;scope&#x60; and &#x60;template&#x60; name. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByNameSchemaCall(scope, templateKey, _callback);
        }


        /**
         * Execute getByNameSchema request
         * @return MetadataTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the metadata template matching the &#x60;scope&#x60; and &#x60;template&#x60; name. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataTemplate execute() throws ApiException {
            ApiResponse<MetadataTemplate> localVarResp = getByNameSchemaWithHttpInfo(scope, templateKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByNameSchema request with HTTP info returned
         * @return ApiResponse&lt;MetadataTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the metadata template matching the &#x60;scope&#x60; and &#x60;template&#x60; name. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataTemplate> executeWithHttpInfo() throws ApiException {
            return getByNameSchemaWithHttpInfo(scope, templateKey);
        }

        /**
         * Execute getByNameSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the metadata template matching the &#x60;scope&#x60; and &#x60;template&#x60; name. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataTemplate> _callback) throws ApiException {
            return getByNameSchemaAsync(scope, templateKey, _callback);
        }
    }

    /**
     * Get metadata template by name
     * Retrieves a metadata template by its &#x60;scope&#x60; and &#x60;templateKey&#x60; values.  To find the &#x60;scope&#x60; and &#x60;templateKey&#x60; for a template, list all templates for an enterprise or globally, or list all templates applied to a file or folder.
     * @param scope The scope of the metadata template (required)
     * @param templateKey The name of the metadata template (required)
     * @return GetByNameSchemaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the metadata template matching the &#x60;scope&#x60; and &#x60;template&#x60; name. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetByNameSchemaRequestBuilder getByNameSchema(String scope, String templateKey) throws IllegalArgumentException {
        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (templateKey == null) throw new IllegalArgumentException("\"templateKey\" is required but got null");
            

        return new GetByNameSchemaRequestBuilder(scope, templateKey);
    }
    private okhttp3.Call listForEnterpriseCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata_templates/enterprise";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listForEnterpriseValidateBeforeCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        return listForEnterpriseCall(marker, limit, _callback);

    }


    private ApiResponse<MetadataTemplates> listForEnterpriseWithHttpInfo(String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listForEnterpriseValidateBeforeCall(marker, limit, null);
        Type localVarReturnType = new TypeToken<MetadataTemplates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listForEnterpriseAsync(String marker, Long limit, final ApiCallback<MetadataTemplates> _callback) throws ApiException {

        okhttp3.Call localVarCall = listForEnterpriseValidateBeforeCall(marker, limit, _callback);
        Type localVarReturnType = new TypeToken<MetadataTemplates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListForEnterpriseRequestBuilder {
        private String marker;
        private Long limit;

        private ListForEnterpriseRequestBuilder() {
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListForEnterpriseRequestBuilder
         */
        public ListForEnterpriseRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListForEnterpriseRequestBuilder
         */
        public ListForEnterpriseRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listForEnterprise
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all of the metadata templates within an enterprise and their corresponding schema. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listForEnterpriseCall(marker, limit, _callback);
        }


        /**
         * Execute listForEnterprise request
         * @return MetadataTemplates
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all of the metadata templates within an enterprise and their corresponding schema. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataTemplates execute() throws ApiException {
            ApiResponse<MetadataTemplates> localVarResp = listForEnterpriseWithHttpInfo(marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listForEnterprise request with HTTP info returned
         * @return ApiResponse&lt;MetadataTemplates&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all of the metadata templates within an enterprise and their corresponding schema. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataTemplates> executeWithHttpInfo() throws ApiException {
            return listForEnterpriseWithHttpInfo(marker, limit);
        }

        /**
         * Execute listForEnterprise request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all of the metadata templates within an enterprise and their corresponding schema. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataTemplates> _callback) throws ApiException {
            return listForEnterpriseAsync(marker, limit, _callback);
        }
    }

    /**
     * List all metadata templates for enterprise
     * Used to retrieve all metadata templates created to be used specifically within the user&#39;s enterprise
     * @return ListForEnterpriseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all of the metadata templates within an enterprise and their corresponding schema. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListForEnterpriseRequestBuilder listForEnterprise() throws IllegalArgumentException {
        return new ListForEnterpriseRequestBuilder();
    }
    private okhttp3.Call listGlobalCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata_templates/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGlobalValidateBeforeCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        return listGlobalCall(marker, limit, _callback);

    }


    private ApiResponse<MetadataTemplates> listGlobalWithHttpInfo(String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listGlobalValidateBeforeCall(marker, limit, null);
        Type localVarReturnType = new TypeToken<MetadataTemplates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGlobalAsync(String marker, Long limit, final ApiCallback<MetadataTemplates> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGlobalValidateBeforeCall(marker, limit, _callback);
        Type localVarReturnType = new TypeToken<MetadataTemplates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGlobalRequestBuilder {
        private String marker;
        private Long limit;

        private ListGlobalRequestBuilder() {
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListGlobalRequestBuilder
         */
        public ListGlobalRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListGlobalRequestBuilder
         */
        public ListGlobalRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listGlobal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all of the metadata templates available to all enterprises and their corresponding schema. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGlobalCall(marker, limit, _callback);
        }


        /**
         * Execute listGlobal request
         * @return MetadataTemplates
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all of the metadata templates available to all enterprises and their corresponding schema. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataTemplates execute() throws ApiException {
            ApiResponse<MetadataTemplates> localVarResp = listGlobalWithHttpInfo(marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGlobal request with HTTP info returned
         * @return ApiResponse&lt;MetadataTemplates&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all of the metadata templates available to all enterprises and their corresponding schema. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataTemplates> executeWithHttpInfo() throws ApiException {
            return listGlobalWithHttpInfo(marker, limit);
        }

        /**
         * Execute listGlobal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all of the metadata templates available to all enterprises and their corresponding schema. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataTemplates> _callback) throws ApiException {
            return listGlobalAsync(marker, limit, _callback);
        }
    }

    /**
     * List all global metadata templates
     * Used to retrieve all generic, global metadata templates available to all enterprises using Box.
     * @return ListGlobalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all of the metadata templates available to all enterprises and their corresponding schema. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListGlobalRequestBuilder listGlobal() throws IllegalArgumentException {
        return new ListGlobalRequestBuilder();
    }
    private okhttp3.Call updateSchemaCall(String scope, String templateKey, List<AMetadataTemplateUpdateOperation> ametadataTemplateUpdateOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ametadataTemplateUpdateOperation;

        // create path and map variables
        String localVarPath = "/metadata_templates/{scope}/{template_key}/schema"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "template_key" + "}", localVarApiClient.escapeString(templateKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSchemaValidateBeforeCall(String scope, String templateKey, List<AMetadataTemplateUpdateOperation> ametadataTemplateUpdateOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateSchema(Async)");
        }

        // verify the required parameter 'templateKey' is set
        if (templateKey == null) {
            throw new ApiException("Missing the required parameter 'templateKey' when calling updateSchema(Async)");
        }

        return updateSchemaCall(scope, templateKey, ametadataTemplateUpdateOperation, _callback);

    }


    private ApiResponse<MetadataTemplate> updateSchemaWithHttpInfo(String scope, String templateKey, List<AMetadataTemplateUpdateOperation> ametadataTemplateUpdateOperation) throws ApiException {
        okhttp3.Call localVarCall = updateSchemaValidateBeforeCall(scope, templateKey, ametadataTemplateUpdateOperation, null);
        Type localVarReturnType = new TypeToken<MetadataTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSchemaAsync(String scope, String templateKey, List<AMetadataTemplateUpdateOperation> ametadataTemplateUpdateOperation, final ApiCallback<MetadataTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSchemaValidateBeforeCall(scope, templateKey, ametadataTemplateUpdateOperation, _callback);
        Type localVarReturnType = new TypeToken<MetadataTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSchemaRequestBuilder {
        private final String scope;
        private final String templateKey;
        private List<AMetadataTemplateUpdateOperation> ametadataTemplateUpdateOperation;

        private UpdateSchemaRequestBuilder(String scope, String templateKey) {
            this.scope = scope;
            this.templateKey = templateKey;
        }

        /**
         * Set ametadataTemplateUpdateOperation
         * @param ametadataTemplateUpdateOperation  (optional)
         * @return UpdateSchemaRequestBuilder
         */
        public UpdateSchemaRequestBuilder ametadataTemplateUpdateOperation(List<AMetadataTemplateUpdateOperation> ametadataTemplateUpdateOperation) {
            this.ametadataTemplateUpdateOperation = ametadataTemplateUpdateOperation;
            return this;
        }

        /**
         * Build call for updateSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<AMetadataTemplateUpdateOperation> ametadataTemplateUpdateOperation = buildBodyParams();
            return updateSchemaCall(scope, templateKey, ametadataTemplateUpdateOperation, _callback);
        }

        private List<AMetadataTemplateUpdateOperation> buildBodyParams() {
            return this.ametadataTemplateUpdateOperation;
        }

        /**
         * Execute updateSchema request
         * @return MetadataTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataTemplate execute() throws ApiException {
            List<AMetadataTemplateUpdateOperation> ametadataTemplateUpdateOperation = buildBodyParams();
            ApiResponse<MetadataTemplate> localVarResp = updateSchemaWithHttpInfo(scope, templateKey, ametadataTemplateUpdateOperation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSchema request with HTTP info returned
         * @return ApiResponse&lt;MetadataTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataTemplate> executeWithHttpInfo() throws ApiException {
            List<AMetadataTemplateUpdateOperation> ametadataTemplateUpdateOperation = buildBodyParams();
            return updateSchemaWithHttpInfo(scope, templateKey, ametadataTemplateUpdateOperation);
        }

        /**
         * Execute updateSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataTemplate> _callback) throws ApiException {
            List<AMetadataTemplateUpdateOperation> ametadataTemplateUpdateOperation = buildBodyParams();
            return updateSchemaAsync(scope, templateKey, ametadataTemplateUpdateOperation, _callback);
        }
    }

    /**
     * Update metadata template
     * Updates a metadata template.  The metadata template can only be updated if the template already exists.  The update is applied atomically. If any errors occur during the application of the operations, the metadata template will not be changed.
     * @param scope The scope of the metadata template (required)
     * @param templateKey The name of the metadata template (required)
     * @return UpdateSchemaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated metadata template, with the custom template data included. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSchemaRequestBuilder updateSchema(String scope, String templateKey) throws IllegalArgumentException {
        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (templateKey == null) throw new IllegalArgumentException("\"templateKey\" is required but got null");
            

        return new UpdateSchemaRequestBuilder(scope, templateKey);
    }
}
