/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest;
import com.konfigthis.client.model.StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequestAssignedTo;
import com.konfigthis.client.model.StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequestStoragePolicy;
import com.konfigthis.client.model.StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest;
import com.konfigthis.client.model.StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequestStoragePolicy;
import com.konfigthis.client.model.StoragePolicyAssignment;
import com.konfigthis.client.model.StoragePolicyAssignments;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StandardAndZonesStoragePolicyAssignmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StandardAndZonesStoragePolicyAssignmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StandardAndZonesStoragePolicyAssignmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAssignmentCall(StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest;

        // create path and map variables
        String localVarPath = "/storage_policy_assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssignmentValidateBeforeCall(StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest, final ApiCallback _callback) throws ApiException {
        return createAssignmentCall(standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest, _callback);

    }


    private ApiResponse<StoragePolicyAssignment> createAssignmentWithHttpInfo(StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest) throws ApiException {
        okhttp3.Call localVarCall = createAssignmentValidateBeforeCall(standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest, null);
        Type localVarReturnType = new TypeToken<StoragePolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAssignmentAsync(StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest, final ApiCallback<StoragePolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssignmentValidateBeforeCall(standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest, _callback);
        Type localVarReturnType = new TypeToken<StoragePolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateAssignmentRequestBuilder {
        private final StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequestStoragePolicy storagePolicy;
        private final StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequestAssignedTo assignedTo;

        private CreateAssignmentRequestBuilder(StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequestStoragePolicy storagePolicy, StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequestAssignedTo assignedTo) {
            this.storagePolicy = storagePolicy;
            this.assignedTo = assignedTo;
        }

        /**
         * Build call for createAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the new storage policy assignment created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest = buildBodyParams();
            return createAssignmentCall(standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest, _callback);
        }

        private StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest buildBodyParams() {
            StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest = new StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest();
            standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest.storagePolicy(this.storagePolicy);
            standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest.assignedTo(this.assignedTo);
            return standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest;
        }

        /**
         * Execute createAssignment request
         * @return StoragePolicyAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the new storage policy assignment created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public StoragePolicyAssignment execute() throws ApiException {
            StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest = buildBodyParams();
            ApiResponse<StoragePolicyAssignment> localVarResp = createAssignmentWithHttpInfo(standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createAssignment request with HTTP info returned
         * @return ApiResponse&lt;StoragePolicyAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the new storage policy assignment created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StoragePolicyAssignment> executeWithHttpInfo() throws ApiException {
            StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest = buildBodyParams();
            return createAssignmentWithHttpInfo(standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest);
        }

        /**
         * Execute createAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the new storage policy assignment created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StoragePolicyAssignment> _callback) throws ApiException {
            StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest = buildBodyParams();
            return createAssignmentAsync(standardAndZonesStoragePolicyAssignmentsCreateAssignmentRequest, _callback);
        }
    }

    /**
     * Assign storage policy
     * Creates a storage policy assignment for an enterprise or user.
     * @return CreateAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the new storage policy assignment created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAssignmentRequestBuilder createAssignment(StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequestStoragePolicy storagePolicy, StandardAndZonesStoragePolicyAssignmentsCreateAssignmentRequestAssignedTo assignedTo) throws IllegalArgumentException {
        if (storagePolicy == null) throw new IllegalArgumentException("\"storagePolicy\" is required but got null");
        if (assignedTo == null) throw new IllegalArgumentException("\"assignedTo\" is required but got null");
        return new CreateAssignmentRequestBuilder(storagePolicy, assignedTo);
    }
    private okhttp3.Call getSpecificAssignmentCall(String storagePolicyAssignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage_policy_assignments/{storage_policy_assignment_id}"
            .replace("{" + "storage_policy_assignment_id" + "}", localVarApiClient.escapeString(storagePolicyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificAssignmentValidateBeforeCall(String storagePolicyAssignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storagePolicyAssignmentId' is set
        if (storagePolicyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'storagePolicyAssignmentId' when calling getSpecificAssignment(Async)");
        }

        return getSpecificAssignmentCall(storagePolicyAssignmentId, _callback);

    }


    private ApiResponse<StoragePolicyAssignment> getSpecificAssignmentWithHttpInfo(String storagePolicyAssignmentId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificAssignmentValidateBeforeCall(storagePolicyAssignmentId, null);
        Type localVarReturnType = new TypeToken<StoragePolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificAssignmentAsync(String storagePolicyAssignmentId, final ApiCallback<StoragePolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificAssignmentValidateBeforeCall(storagePolicyAssignmentId, _callback);
        Type localVarReturnType = new TypeToken<StoragePolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificAssignmentRequestBuilder {
        private final String storagePolicyAssignmentId;

        private GetSpecificAssignmentRequestBuilder(String storagePolicyAssignmentId) {
            this.storagePolicyAssignmentId = storagePolicyAssignmentId;
        }

        /**
         * Build call for getSpecificAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a storage policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificAssignmentCall(storagePolicyAssignmentId, _callback);
        }


        /**
         * Execute getSpecificAssignment request
         * @return StoragePolicyAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a storage policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public StoragePolicyAssignment execute() throws ApiException {
            ApiResponse<StoragePolicyAssignment> localVarResp = getSpecificAssignmentWithHttpInfo(storagePolicyAssignmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificAssignment request with HTTP info returned
         * @return ApiResponse&lt;StoragePolicyAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a storage policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StoragePolicyAssignment> executeWithHttpInfo() throws ApiException {
            return getSpecificAssignmentWithHttpInfo(storagePolicyAssignmentId);
        }

        /**
         * Execute getSpecificAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a storage policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StoragePolicyAssignment> _callback) throws ApiException {
            return getSpecificAssignmentAsync(storagePolicyAssignmentId, _callback);
        }
    }

    /**
     * Get storage policy assignment
     * Fetches a specific storage policy assignment.
     * @param storagePolicyAssignmentId The ID of the storage policy assignment. (required)
     * @return GetSpecificAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a storage policy assignment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificAssignmentRequestBuilder getSpecificAssignment(String storagePolicyAssignmentId) throws IllegalArgumentException {
        if (storagePolicyAssignmentId == null) throw new IllegalArgumentException("\"storagePolicyAssignmentId\" is required but got null");
            

        return new GetSpecificAssignmentRequestBuilder(storagePolicyAssignmentId);
    }
    private okhttp3.Call listAssignmentsCall(String resolvedForType, String resolvedForId, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage_policy_assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (resolvedForType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolved_for_type", resolvedForType));
        }

        if (resolvedForId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolved_for_id", resolvedForId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssignmentsValidateBeforeCall(String resolvedForType, String resolvedForId, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resolvedForType' is set
        if (resolvedForType == null) {
            throw new ApiException("Missing the required parameter 'resolvedForType' when calling listAssignments(Async)");
        }

        // verify the required parameter 'resolvedForId' is set
        if (resolvedForId == null) {
            throw new ApiException("Missing the required parameter 'resolvedForId' when calling listAssignments(Async)");
        }

        return listAssignmentsCall(resolvedForType, resolvedForId, marker, _callback);

    }


    private ApiResponse<StoragePolicyAssignments> listAssignmentsWithHttpInfo(String resolvedForType, String resolvedForId, String marker) throws ApiException {
        okhttp3.Call localVarCall = listAssignmentsValidateBeforeCall(resolvedForType, resolvedForId, marker, null);
        Type localVarReturnType = new TypeToken<StoragePolicyAssignments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssignmentsAsync(String resolvedForType, String resolvedForId, String marker, final ApiCallback<StoragePolicyAssignments> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssignmentsValidateBeforeCall(resolvedForType, resolvedForId, marker, _callback);
        Type localVarReturnType = new TypeToken<StoragePolicyAssignments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssignmentsRequestBuilder {
        private final String resolvedForType;
        private final String resolvedForId;
        private String marker;

        private ListAssignmentsRequestBuilder(String resolvedForType, String resolvedForId) {
            this.resolvedForType = resolvedForType;
            this.resolvedForId = resolvedForId;
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListAssignmentsRequestBuilder
         */
        public ListAssignmentsRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Build call for listAssignments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of storage policies for the enterprise or user. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssignmentsCall(resolvedForType, resolvedForId, marker, _callback);
        }


        /**
         * Execute listAssignments request
         * @return StoragePolicyAssignments
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of storage policies for the enterprise or user. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public StoragePolicyAssignments execute() throws ApiException {
            ApiResponse<StoragePolicyAssignments> localVarResp = listAssignmentsWithHttpInfo(resolvedForType, resolvedForId, marker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssignments request with HTTP info returned
         * @return ApiResponse&lt;StoragePolicyAssignments&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of storage policies for the enterprise or user. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StoragePolicyAssignments> executeWithHttpInfo() throws ApiException {
            return listAssignmentsWithHttpInfo(resolvedForType, resolvedForId, marker);
        }

        /**
         * Execute listAssignments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of storage policies for the enterprise or user. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StoragePolicyAssignments> _callback) throws ApiException {
            return listAssignmentsAsync(resolvedForType, resolvedForId, marker, _callback);
        }
    }

    /**
     * List storage policy assignments
     * Fetches all the storage policy assignment for an enterprise or user.
     * @param resolvedForType The target type to return assignments for (required)
     * @param resolvedForId The ID of the user or enterprise to return assignments for (required)
     * @return ListAssignmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of storage policies for the enterprise or user. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListAssignmentsRequestBuilder listAssignments(String resolvedForType, String resolvedForId) throws IllegalArgumentException {
        if (resolvedForType == null) throw new IllegalArgumentException("\"resolvedForType\" is required but got null");
            

        if (resolvedForId == null) throw new IllegalArgumentException("\"resolvedForId\" is required but got null");
            

        return new ListAssignmentsRequestBuilder(resolvedForType, resolvedForId);
    }
    private okhttp3.Call unassignStoragePolicyCall(String storagePolicyAssignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage_policy_assignments/{storage_policy_assignment_id}"
            .replace("{" + "storage_policy_assignment_id" + "}", localVarApiClient.escapeString(storagePolicyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignStoragePolicyValidateBeforeCall(String storagePolicyAssignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storagePolicyAssignmentId' is set
        if (storagePolicyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'storagePolicyAssignmentId' when calling unassignStoragePolicy(Async)");
        }

        return unassignStoragePolicyCall(storagePolicyAssignmentId, _callback);

    }


    private ApiResponse<Void> unassignStoragePolicyWithHttpInfo(String storagePolicyAssignmentId) throws ApiException {
        okhttp3.Call localVarCall = unassignStoragePolicyValidateBeforeCall(storagePolicyAssignmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unassignStoragePolicyAsync(String storagePolicyAssignmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignStoragePolicyValidateBeforeCall(storagePolicyAssignmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnassignStoragePolicyRequestBuilder {
        private final String storagePolicyAssignmentId;

        private UnassignStoragePolicyRequestBuilder(String storagePolicyAssignmentId) {
            this.storagePolicyAssignmentId = storagePolicyAssignmentId;
        }

        /**
         * Build call for unassignStoragePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the storage policy assignment is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unassignStoragePolicyCall(storagePolicyAssignmentId, _callback);
        }


        /**
         * Execute unassignStoragePolicy request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the storage policy assignment is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unassignStoragePolicyWithHttpInfo(storagePolicyAssignmentId);
        }

        /**
         * Execute unassignStoragePolicy request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the storage policy assignment is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unassignStoragePolicyWithHttpInfo(storagePolicyAssignmentId);
        }

        /**
         * Execute unassignStoragePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the storage policy assignment is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unassignStoragePolicyAsync(storagePolicyAssignmentId, _callback);
        }
    }

    /**
     * Unassign storage policy
     * Delete a storage policy assignment.  Deleting a storage policy assignment on a user will have the user inherit the enterprise&#39;s default storage policy.  There is a rate limit for calling this endpoint of only twice per user in a 24 hour time frame.
     * @param storagePolicyAssignmentId The ID of the storage policy assignment. (required)
     * @return UnassignStoragePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the storage policy assignment is successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UnassignStoragePolicyRequestBuilder unassignStoragePolicy(String storagePolicyAssignmentId) throws IllegalArgumentException {
        if (storagePolicyAssignmentId == null) throw new IllegalArgumentException("\"storagePolicyAssignmentId\" is required but got null");
            

        return new UnassignStoragePolicyRequestBuilder(storagePolicyAssignmentId);
    }
    private okhttp3.Call updateSpecificAssignmentCall(String storagePolicyAssignmentId, StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest;

        // create path and map variables
        String localVarPath = "/storage_policy_assignments/{storage_policy_assignment_id}"
            .replace("{" + "storage_policy_assignment_id" + "}", localVarApiClient.escapeString(storagePolicyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpecificAssignmentValidateBeforeCall(String storagePolicyAssignmentId, StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storagePolicyAssignmentId' is set
        if (storagePolicyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'storagePolicyAssignmentId' when calling updateSpecificAssignment(Async)");
        }

        return updateSpecificAssignmentCall(storagePolicyAssignmentId, standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest, _callback);

    }


    private ApiResponse<StoragePolicyAssignment> updateSpecificAssignmentWithHttpInfo(String storagePolicyAssignmentId, StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSpecificAssignmentValidateBeforeCall(storagePolicyAssignmentId, standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest, null);
        Type localVarReturnType = new TypeToken<StoragePolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSpecificAssignmentAsync(String storagePolicyAssignmentId, StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest, final ApiCallback<StoragePolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpecificAssignmentValidateBeforeCall(storagePolicyAssignmentId, standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest, _callback);
        Type localVarReturnType = new TypeToken<StoragePolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSpecificAssignmentRequestBuilder {
        private final StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequestStoragePolicy storagePolicy;
        private final String storagePolicyAssignmentId;

        private UpdateSpecificAssignmentRequestBuilder(StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequestStoragePolicy storagePolicy, String storagePolicyAssignmentId) {
            this.storagePolicy = storagePolicy;
            this.storagePolicyAssignmentId = storagePolicyAssignmentId;
        }

        /**
         * Build call for updateSpecificAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated storage policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest = buildBodyParams();
            return updateSpecificAssignmentCall(storagePolicyAssignmentId, standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest, _callback);
        }

        private StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest buildBodyParams() {
            StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest = new StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest();
            standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest.storagePolicy(this.storagePolicy);
            return standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest;
        }

        /**
         * Execute updateSpecificAssignment request
         * @return StoragePolicyAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated storage policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public StoragePolicyAssignment execute() throws ApiException {
            StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest = buildBodyParams();
            ApiResponse<StoragePolicyAssignment> localVarResp = updateSpecificAssignmentWithHttpInfo(storagePolicyAssignmentId, standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSpecificAssignment request with HTTP info returned
         * @return ApiResponse&lt;StoragePolicyAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated storage policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StoragePolicyAssignment> executeWithHttpInfo() throws ApiException {
            StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest = buildBodyParams();
            return updateSpecificAssignmentWithHttpInfo(storagePolicyAssignmentId, standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest);
        }

        /**
         * Execute updateSpecificAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated storage policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StoragePolicyAssignment> _callback) throws ApiException {
            StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest = buildBodyParams();
            return updateSpecificAssignmentAsync(storagePolicyAssignmentId, standardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequest, _callback);
        }
    }

    /**
     * Update storage policy assignment
     * Updates a specific storage policy assignment.
     * @param storagePolicyAssignmentId The ID of the storage policy assignment. (required)
     * @return UpdateSpecificAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an updated storage policy assignment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSpecificAssignmentRequestBuilder updateSpecificAssignment(StandardAndZonesStoragePolicyAssignmentsUpdateSpecificAssignmentRequestStoragePolicy storagePolicy, String storagePolicyAssignmentId) throws IllegalArgumentException {
        if (storagePolicy == null) throw new IllegalArgumentException("\"storagePolicy\" is required but got null");
        if (storagePolicyAssignmentId == null) throw new IllegalArgumentException("\"storagePolicyAssignmentId\" is required but got null");
            

        return new UpdateSpecificAssignmentRequestBuilder(storagePolicy, storagePolicyAssignmentId);
    }
}
