/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.CollaborationAllowlistExemptTarget;
import com.konfigthis.client.model.CollaborationAllowlistExemptTargets;
import com.konfigthis.client.model.DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest;
import com.konfigthis.client.model.DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequestUser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DomainRestrictionsUserExemptionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainRestrictionsUserExemptionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DomainRestrictionsUserExemptionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createUserExemptionFromCollaborationDomainRestrictionsCall(DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest;

        // create path and map variables
        String localVarPath = "/collaboration_whitelist_exempt_targets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserExemptionFromCollaborationDomainRestrictionsValidateBeforeCall(DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        return createUserExemptionFromCollaborationDomainRestrictionsCall(domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest, _callback);

    }


    private ApiResponse<CollaborationAllowlistExemptTarget> createUserExemptionFromCollaborationDomainRestrictionsWithHttpInfo(DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserExemptionFromCollaborationDomainRestrictionsValidateBeforeCall(domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest, null);
        Type localVarReturnType = new TypeToken<CollaborationAllowlistExemptTarget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createUserExemptionFromCollaborationDomainRestrictionsAsync(DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest, final ApiCallback<CollaborationAllowlistExemptTarget> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserExemptionFromCollaborationDomainRestrictionsValidateBeforeCall(domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest, _callback);
        Type localVarReturnType = new TypeToken<CollaborationAllowlistExemptTarget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateUserExemptionFromCollaborationDomainRestrictionsRequestBuilder {
        private final DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequestUser user;

        private CreateUserExemptionFromCollaborationDomainRestrictionsRequestBuilder(DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequestUser user) {
            this.user = user;
        }

        /**
         * Build call for createUserExemptionFromCollaborationDomainRestrictions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new exemption entry. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest = buildBodyParams();
            return createUserExemptionFromCollaborationDomainRestrictionsCall(domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest, _callback);
        }

        private DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest buildBodyParams() {
            DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest = new DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest();
            domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest.user(this.user);
            return domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest;
        }

        /**
         * Execute createUserExemptionFromCollaborationDomainRestrictions request
         * @return CollaborationAllowlistExemptTarget
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new exemption entry. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public CollaborationAllowlistExemptTarget execute() throws ApiException {
            DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest = buildBodyParams();
            ApiResponse<CollaborationAllowlistExemptTarget> localVarResp = createUserExemptionFromCollaborationDomainRestrictionsWithHttpInfo(domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createUserExemptionFromCollaborationDomainRestrictions request with HTTP info returned
         * @return ApiResponse&lt;CollaborationAllowlistExemptTarget&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new exemption entry. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollaborationAllowlistExemptTarget> executeWithHttpInfo() throws ApiException {
            DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest = buildBodyParams();
            return createUserExemptionFromCollaborationDomainRestrictionsWithHttpInfo(domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest);
        }

        /**
         * Execute createUserExemptionFromCollaborationDomainRestrictions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new exemption entry. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollaborationAllowlistExemptTarget> _callback) throws ApiException {
            DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest = buildBodyParams();
            return createUserExemptionFromCollaborationDomainRestrictionsAsync(domainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequest, _callback);
        }
    }

    /**
     * Create user exemption from collaboration domain restrictions
     * Exempts a user from the restrictions set out by the allowed list of domains for collaborations.
     * @return CreateUserExemptionFromCollaborationDomainRestrictionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a new exemption entry. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserExemptionFromCollaborationDomainRestrictionsRequestBuilder createUserExemptionFromCollaborationDomainRestrictions(DomainRestrictionsUserExemptionsCreateUserExemptionFromCollaborationDomainRestrictionsRequestUser user) throws IllegalArgumentException {
        if (user == null) throw new IllegalArgumentException("\"user\" is required but got null");
        return new CreateUserExemptionFromCollaborationDomainRestrictionsRequestBuilder(user);
    }
    private okhttp3.Call getUserExemptionCall(String collaborationWhitelistExemptTargetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collaboration_whitelist_exempt_targets/{collaboration_whitelist_exempt_target_id}"
            .replace("{" + "collaboration_whitelist_exempt_target_id" + "}", localVarApiClient.escapeString(collaborationWhitelistExemptTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserExemptionValidateBeforeCall(String collaborationWhitelistExemptTargetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collaborationWhitelistExemptTargetId' is set
        if (collaborationWhitelistExemptTargetId == null) {
            throw new ApiException("Missing the required parameter 'collaborationWhitelistExemptTargetId' when calling getUserExemption(Async)");
        }

        return getUserExemptionCall(collaborationWhitelistExemptTargetId, _callback);

    }


    private ApiResponse<CollaborationAllowlistExemptTarget> getUserExemptionWithHttpInfo(String collaborationWhitelistExemptTargetId) throws ApiException {
        okhttp3.Call localVarCall = getUserExemptionValidateBeforeCall(collaborationWhitelistExemptTargetId, null);
        Type localVarReturnType = new TypeToken<CollaborationAllowlistExemptTarget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserExemptionAsync(String collaborationWhitelistExemptTargetId, final ApiCallback<CollaborationAllowlistExemptTarget> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserExemptionValidateBeforeCall(collaborationWhitelistExemptTargetId, _callback);
        Type localVarReturnType = new TypeToken<CollaborationAllowlistExemptTarget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserExemptionRequestBuilder {
        private final String collaborationWhitelistExemptTargetId;

        private GetUserExemptionRequestBuilder(String collaborationWhitelistExemptTargetId) {
            this.collaborationWhitelistExemptTargetId = collaborationWhitelistExemptTargetId;
        }

        /**
         * Build call for getUserExemption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the user&#39;s exempted from the list of collaboration domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserExemptionCall(collaborationWhitelistExemptTargetId, _callback);
        }


        /**
         * Execute getUserExemption request
         * @return CollaborationAllowlistExemptTarget
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the user&#39;s exempted from the list of collaboration domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public CollaborationAllowlistExemptTarget execute() throws ApiException {
            ApiResponse<CollaborationAllowlistExemptTarget> localVarResp = getUserExemptionWithHttpInfo(collaborationWhitelistExemptTargetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserExemption request with HTTP info returned
         * @return ApiResponse&lt;CollaborationAllowlistExemptTarget&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the user&#39;s exempted from the list of collaboration domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollaborationAllowlistExemptTarget> executeWithHttpInfo() throws ApiException {
            return getUserExemptionWithHttpInfo(collaborationWhitelistExemptTargetId);
        }

        /**
         * Execute getUserExemption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the user&#39;s exempted from the list of collaboration domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollaborationAllowlistExemptTarget> _callback) throws ApiException {
            return getUserExemptionAsync(collaborationWhitelistExemptTargetId, _callback);
        }
    }

    /**
     * Get user exempt from collaboration domain restrictions
     * Returns a users who has been exempt from the collaboration domain restrictions.
     * @param collaborationWhitelistExemptTargetId The ID of the exemption to the list. (required)
     * @return GetUserExemptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the user&#39;s exempted from the list of collaboration domains. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserExemptionRequestBuilder getUserExemption(String collaborationWhitelistExemptTargetId) throws IllegalArgumentException {
        if (collaborationWhitelistExemptTargetId == null) throw new IllegalArgumentException("\"collaborationWhitelistExemptTargetId\" is required but got null");
            

        return new GetUserExemptionRequestBuilder(collaborationWhitelistExemptTargetId);
    }
    private okhttp3.Call listExemptUsersCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collaboration_whitelist_exempt_targets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listExemptUsersValidateBeforeCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        return listExemptUsersCall(marker, limit, _callback);

    }


    private ApiResponse<CollaborationAllowlistExemptTargets> listExemptUsersWithHttpInfo(String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listExemptUsersValidateBeforeCall(marker, limit, null);
        Type localVarReturnType = new TypeToken<CollaborationAllowlistExemptTargets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listExemptUsersAsync(String marker, Long limit, final ApiCallback<CollaborationAllowlistExemptTargets> _callback) throws ApiException {

        okhttp3.Call localVarCall = listExemptUsersValidateBeforeCall(marker, limit, _callback);
        Type localVarReturnType = new TypeToken<CollaborationAllowlistExemptTargets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListExemptUsersRequestBuilder {
        private String marker;
        private Long limit;

        private ListExemptUsersRequestBuilder() {
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListExemptUsersRequestBuilder
         */
        public ListExemptUsersRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListExemptUsersRequestBuilder
         */
        public ListExemptUsersRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listExemptUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of user exemptions. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listExemptUsersCall(marker, limit, _callback);
        }


        /**
         * Execute listExemptUsers request
         * @return CollaborationAllowlistExemptTargets
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of user exemptions. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public CollaborationAllowlistExemptTargets execute() throws ApiException {
            ApiResponse<CollaborationAllowlistExemptTargets> localVarResp = listExemptUsersWithHttpInfo(marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listExemptUsers request with HTTP info returned
         * @return ApiResponse&lt;CollaborationAllowlistExemptTargets&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of user exemptions. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollaborationAllowlistExemptTargets> executeWithHttpInfo() throws ApiException {
            return listExemptUsersWithHttpInfo(marker, limit);
        }

        /**
         * Execute listExemptUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of user exemptions. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollaborationAllowlistExemptTargets> _callback) throws ApiException {
            return listExemptUsersAsync(marker, limit, _callback);
        }
    }

    /**
     * List users exempt from collaboration domain restrictions
     * Returns a list of users who have been exempt from the collaboration domain restrictions.
     * @return ListExemptUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of user exemptions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListExemptUsersRequestBuilder listExemptUsers() throws IllegalArgumentException {
        return new ListExemptUsersRequestBuilder();
    }
    private okhttp3.Call removeExemptionCall(String collaborationWhitelistExemptTargetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collaboration_whitelist_exempt_targets/{collaboration_whitelist_exempt_target_id}"
            .replace("{" + "collaboration_whitelist_exempt_target_id" + "}", localVarApiClient.escapeString(collaborationWhitelistExemptTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeExemptionValidateBeforeCall(String collaborationWhitelistExemptTargetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collaborationWhitelistExemptTargetId' is set
        if (collaborationWhitelistExemptTargetId == null) {
            throw new ApiException("Missing the required parameter 'collaborationWhitelistExemptTargetId' when calling removeExemption(Async)");
        }

        return removeExemptionCall(collaborationWhitelistExemptTargetId, _callback);

    }


    private ApiResponse<Void> removeExemptionWithHttpInfo(String collaborationWhitelistExemptTargetId) throws ApiException {
        okhttp3.Call localVarCall = removeExemptionValidateBeforeCall(collaborationWhitelistExemptTargetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeExemptionAsync(String collaborationWhitelistExemptTargetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeExemptionValidateBeforeCall(collaborationWhitelistExemptTargetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveExemptionRequestBuilder {
        private final String collaborationWhitelistExemptTargetId;

        private RemoveExemptionRequestBuilder(String collaborationWhitelistExemptTargetId) {
            this.collaborationWhitelistExemptTargetId = collaborationWhitelistExemptTargetId;
        }

        /**
         * Build call for removeExemption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the exemption was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeExemptionCall(collaborationWhitelistExemptTargetId, _callback);
        }


        /**
         * Execute removeExemption request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the exemption was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeExemptionWithHttpInfo(collaborationWhitelistExemptTargetId);
        }

        /**
         * Execute removeExemption request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the exemption was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeExemptionWithHttpInfo(collaborationWhitelistExemptTargetId);
        }

        /**
         * Execute removeExemption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the exemption was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeExemptionAsync(collaborationWhitelistExemptTargetId, _callback);
        }
    }

    /**
     * Remove user from list of users exempt from domain restrictions
     * Removes a user&#39;s exemption from the restrictions set out by the allowed list of domains for collaborations.
     * @param collaborationWhitelistExemptTargetId The ID of the exemption to the list. (required)
     * @return RemoveExemptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A blank response is returned if the exemption was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveExemptionRequestBuilder removeExemption(String collaborationWhitelistExemptTargetId) throws IllegalArgumentException {
        if (collaborationWhitelistExemptTargetId == null) throw new IllegalArgumentException("\"collaborationWhitelistExemptTargetId\" is required but got null");
            

        return new RemoveExemptionRequestBuilder(collaborationWhitelistExemptTargetId);
    }
}
