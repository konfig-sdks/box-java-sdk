/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.DevicePinner;
import com.konfigthis.client.model.DevicePinners;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DevicePinnersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DevicePinnersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DevicePinnersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getPinnerInfoCall(String devicePinnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/device_pinners/{device_pinner_id}"
            .replace("{" + "device_pinner_id" + "}", localVarApiClient.escapeString(devicePinnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPinnerInfoValidateBeforeCall(String devicePinnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'devicePinnerId' is set
        if (devicePinnerId == null) {
            throw new ApiException("Missing the required parameter 'devicePinnerId' when calling getPinnerInfo(Async)");
        }

        return getPinnerInfoCall(devicePinnerId, _callback);

    }


    private ApiResponse<DevicePinner> getPinnerInfoWithHttpInfo(String devicePinnerId) throws ApiException {
        okhttp3.Call localVarCall = getPinnerInfoValidateBeforeCall(devicePinnerId, null);
        Type localVarReturnType = new TypeToken<DevicePinner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPinnerInfoAsync(String devicePinnerId, final ApiCallback<DevicePinner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPinnerInfoValidateBeforeCall(devicePinnerId, _callback);
        Type localVarReturnType = new TypeToken<DevicePinner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPinnerInfoRequestBuilder {
        private final String devicePinnerId;

        private GetPinnerInfoRequestBuilder(String devicePinnerId) {
            this.devicePinnerId = devicePinnerId;
        }

        /**
         * Build call for getPinnerInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns information about a single device pin. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPinnerInfoCall(devicePinnerId, _callback);
        }


        /**
         * Execute getPinnerInfo request
         * @return DevicePinner
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns information about a single device pin. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public DevicePinner execute() throws ApiException {
            ApiResponse<DevicePinner> localVarResp = getPinnerInfoWithHttpInfo(devicePinnerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPinnerInfo request with HTTP info returned
         * @return ApiResponse&lt;DevicePinner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns information about a single device pin. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DevicePinner> executeWithHttpInfo() throws ApiException {
            return getPinnerInfoWithHttpInfo(devicePinnerId);
        }

        /**
         * Execute getPinnerInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns information about a single device pin. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DevicePinner> _callback) throws ApiException {
            return getPinnerInfoAsync(devicePinnerId, _callback);
        }
    }

    /**
     * Get device pin
     * Retrieves information about an individual device pin.
     * @param devicePinnerId The ID of the device pin (required)
     * @return GetPinnerInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns information about a single device pin. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetPinnerInfoRequestBuilder getPinnerInfo(String devicePinnerId) throws IllegalArgumentException {
        if (devicePinnerId == null) throw new IllegalArgumentException("\"devicePinnerId\" is required but got null");
            

        return new GetPinnerInfoRequestBuilder(devicePinnerId);
    }
    private okhttp3.Call listPinnerInfoCall(String enterpriseId, String marker, Long limit, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise_id}/device_pinners"
            .replace("{" + "enterprise_id" + "}", localVarApiClient.escapeString(enterpriseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPinnerInfoValidateBeforeCall(String enterpriseId, String marker, Long limit, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterpriseId' is set
        if (enterpriseId == null) {
            throw new ApiException("Missing the required parameter 'enterpriseId' when calling listPinnerInfo(Async)");
        }

        return listPinnerInfoCall(enterpriseId, marker, limit, direction, _callback);

    }


    private ApiResponse<DevicePinners> listPinnerInfoWithHttpInfo(String enterpriseId, String marker, Long limit, String direction) throws ApiException {
        okhttp3.Call localVarCall = listPinnerInfoValidateBeforeCall(enterpriseId, marker, limit, direction, null);
        Type localVarReturnType = new TypeToken<DevicePinners>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPinnerInfoAsync(String enterpriseId, String marker, Long limit, String direction, final ApiCallback<DevicePinners> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPinnerInfoValidateBeforeCall(enterpriseId, marker, limit, direction, _callback);
        Type localVarReturnType = new TypeToken<DevicePinners>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPinnerInfoRequestBuilder {
        private final String enterpriseId;
        private String marker;
        private Long limit;
        private String direction;

        private ListPinnerInfoRequestBuilder(String enterpriseId) {
            this.enterpriseId = enterpriseId;
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListPinnerInfoRequestBuilder
         */
        public ListPinnerInfoRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListPinnerInfoRequestBuilder
         */
        public ListPinnerInfoRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set direction
         * @param direction The direction to sort results in. This can be either in alphabetical ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. (optional)
         * @return ListPinnerInfoRequestBuilder
         */
        public ListPinnerInfoRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Build call for listPinnerInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of device pins for a given enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPinnerInfoCall(enterpriseId, marker, limit, direction, _callback);
        }


        /**
         * Execute listPinnerInfo request
         * @return DevicePinners
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of device pins for a given enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public DevicePinners execute() throws ApiException {
            ApiResponse<DevicePinners> localVarResp = listPinnerInfoWithHttpInfo(enterpriseId, marker, limit, direction);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPinnerInfo request with HTTP info returned
         * @return ApiResponse&lt;DevicePinners&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of device pins for a given enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DevicePinners> executeWithHttpInfo() throws ApiException {
            return listPinnerInfoWithHttpInfo(enterpriseId, marker, limit, direction);
        }

        /**
         * Execute listPinnerInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of device pins for a given enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DevicePinners> _callback) throws ApiException {
            return listPinnerInfoAsync(enterpriseId, marker, limit, direction, _callback);
        }
    }

    /**
     * List enterprise device pins
     * Retrieves all the device pins within an enterprise.  The user must have admin privileges, and the application needs the \&quot;manage enterprise\&quot; scope to make this call.
     * @param enterpriseId The ID of the enterprise (required)
     * @return ListPinnerInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of device pins for a given enterprise. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListPinnerInfoRequestBuilder listPinnerInfo(String enterpriseId) throws IllegalArgumentException {
        if (enterpriseId == null) throw new IllegalArgumentException("\"enterpriseId\" is required but got null");
            

        return new ListPinnerInfoRequestBuilder(enterpriseId);
    }
    private okhttp3.Call removeDevicePinCall(String devicePinnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/device_pinners/{device_pinner_id}"
            .replace("{" + "device_pinner_id" + "}", localVarApiClient.escapeString(devicePinnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDevicePinValidateBeforeCall(String devicePinnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'devicePinnerId' is set
        if (devicePinnerId == null) {
            throw new ApiException("Missing the required parameter 'devicePinnerId' when calling removeDevicePin(Async)");
        }

        return removeDevicePinCall(devicePinnerId, _callback);

    }


    private ApiResponse<Void> removeDevicePinWithHttpInfo(String devicePinnerId) throws ApiException {
        okhttp3.Call localVarCall = removeDevicePinValidateBeforeCall(devicePinnerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeDevicePinAsync(String devicePinnerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDevicePinValidateBeforeCall(devicePinnerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveDevicePinRequestBuilder {
        private final String devicePinnerId;

        private RemoveDevicePinRequestBuilder(String devicePinnerId) {
            this.devicePinnerId = devicePinnerId;
        }

        /**
         * Build call for removeDevicePin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the pin has been deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeDevicePinCall(devicePinnerId, _callback);
        }


        /**
         * Execute removeDevicePin request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the pin has been deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeDevicePinWithHttpInfo(devicePinnerId);
        }

        /**
         * Execute removeDevicePin request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the pin has been deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeDevicePinWithHttpInfo(devicePinnerId);
        }

        /**
         * Execute removeDevicePin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the pin has been deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeDevicePinAsync(devicePinnerId, _callback);
        }
    }

    /**
     * Remove device pin
     * Deletes an individual device pin.
     * @param devicePinnerId The ID of the device pin (required)
     * @return RemoveDevicePinRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the pin has been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveDevicePinRequestBuilder removeDevicePin(String devicePinnerId) throws IllegalArgumentException {
        if (devicePinnerId == null) throw new IllegalArgumentException("\"devicePinnerId\" is required but got null");
            

        return new RemoveDevicePinRequestBuilder(devicePinnerId);
    }
}
