/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.Collaboration;
import com.konfigthis.client.model.CollaborationsUpdateCollaborationRequest;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PostCollaborationsRequest;
import com.konfigthis.client.model.PostCollaborationsRequestAccessibleBy;
import com.konfigthis.client.model.PostCollaborationsRequestItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CollaborationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CollaborationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CollaborationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call collaborationsCall(List<String> fields, Boolean notify, PostCollaborationsRequest postCollaborationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postCollaborationsRequest;

        // create path and map variables
        String localVarPath = "/collaborations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (notify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notify", notify));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collaborationsValidateBeforeCall(List<String> fields, Boolean notify, PostCollaborationsRequest postCollaborationsRequest, final ApiCallback _callback) throws ApiException {
        return collaborationsCall(fields, notify, postCollaborationsRequest, _callback);

    }


    private ApiResponse<Collaboration> collaborationsWithHttpInfo(List<String> fields, Boolean notify, PostCollaborationsRequest postCollaborationsRequest) throws ApiException {
        okhttp3.Call localVarCall = collaborationsValidateBeforeCall(fields, notify, postCollaborationsRequest, null);
        Type localVarReturnType = new TypeToken<Collaboration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call collaborationsAsync(List<String> fields, Boolean notify, PostCollaborationsRequest postCollaborationsRequest, final ApiCallback<Collaboration> _callback) throws ApiException {

        okhttp3.Call localVarCall = collaborationsValidateBeforeCall(fields, notify, postCollaborationsRequest, _callback);
        Type localVarReturnType = new TypeToken<Collaboration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CollaborationsRequestBuilder {
        private final PostCollaborationsRequestItem item;
        private final PostCollaborationsRequestAccessibleBy accessibleBy;
        private final String role;
        private Boolean isAccessOnly;
        private Boolean canViewPath;
        private OffsetDateTime expiresAt;
        private List<String> fields;
        private Boolean notify;

        private CollaborationsRequestBuilder(PostCollaborationsRequestItem item, PostCollaborationsRequestAccessibleBy accessibleBy, String role) {
            this.item = item;
            this.accessibleBy = accessibleBy;
            this.role = role;
        }

        /**
         * Set isAccessOnly
         * @param isAccessOnly If set to &#x60;true&#x60;, collaborators have access to shared items, but such items won&#39;t be visible in the All Files list. Additionally, collaborators won&#39;t see the the path to the root folder for the shared item. (optional)
         * @return CollaborationsRequestBuilder
         */
        public CollaborationsRequestBuilder isAccessOnly(Boolean isAccessOnly) {
            this.isAccessOnly = isAccessOnly;
            return this;
        }
        
        /**
         * Set canViewPath
         * @param canViewPath Determines if the invited users can see the entire parent path to the associated folder. The user will not gain privileges in any parent folder and therefore can not see content the user is not collaborated on.  Be aware that this meaningfully increases the time required to load the invitee&#39;s **All Files** page. We recommend you limit the number of collaborations with &#x60;can_view_path&#x60; enabled to 1,000 per user.  Only owner or co-owners can invite collaborators with a &#x60;can_view_path&#x60; of &#x60;true&#x60;.  &#x60;can_view_path&#x60; can only be used for folder collaborations. (optional)
         * @return CollaborationsRequestBuilder
         */
        public CollaborationsRequestBuilder canViewPath(Boolean canViewPath) {
            this.canViewPath = canViewPath;
            return this;
        }
        
        /**
         * Set expiresAt
         * @param expiresAt Set the expiration date for the collaboration. At this date, the collaboration will be automatically removed from the item.  This feature will only work if the **Automatically remove invited collaborators: Allow folder owners to extend the expiry date** setting has been enabled in the **Enterprise Settings** of the **Admin Console**. When the setting is not enabled, collaborations can not have an expiry date and a value for this field will be result in an error. (optional)
         * @return CollaborationsRequestBuilder
         */
        public CollaborationsRequestBuilder expiresAt(OffsetDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return CollaborationsRequestBuilder
         */
        public CollaborationsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set notify
         * @param notify Determines if users should receive email notification for the action performed. (optional)
         * @return CollaborationsRequestBuilder
         */
        public CollaborationsRequestBuilder notify(Boolean notify) {
            this.notify = notify;
            return this;
        }
        
        /**
         * Build call for collaborations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new collaboration object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostCollaborationsRequest postCollaborationsRequest = buildBodyParams();
            return collaborationsCall(fields, notify, postCollaborationsRequest, _callback);
        }

        private PostCollaborationsRequest buildBodyParams() {
            PostCollaborationsRequest postCollaborationsRequest = new PostCollaborationsRequest();
            postCollaborationsRequest.item(this.item);
            postCollaborationsRequest.accessibleBy(this.accessibleBy);
            if (this.role != null)
            postCollaborationsRequest.role(PostCollaborationsRequest.RoleEnum.fromValue(this.role));
            postCollaborationsRequest.isAccessOnly(this.isAccessOnly);
            postCollaborationsRequest.canViewPath(this.canViewPath);
            postCollaborationsRequest.expiresAt(this.expiresAt);
            return postCollaborationsRequest;
        }

        /**
         * Execute collaborations request
         * @return Collaboration
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new collaboration object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Collaboration execute() throws ApiException {
            PostCollaborationsRequest postCollaborationsRequest = buildBodyParams();
            ApiResponse<Collaboration> localVarResp = collaborationsWithHttpInfo(fields, notify, postCollaborationsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute collaborations request with HTTP info returned
         * @return ApiResponse&lt;Collaboration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new collaboration object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Collaboration> executeWithHttpInfo() throws ApiException {
            PostCollaborationsRequest postCollaborationsRequest = buildBodyParams();
            return collaborationsWithHttpInfo(fields, notify, postCollaborationsRequest);
        }

        /**
         * Execute collaborations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new collaboration object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Collaboration> _callback) throws ApiException {
            PostCollaborationsRequest postCollaborationsRequest = buildBodyParams();
            return collaborationsAsync(fields, notify, postCollaborationsRequest, _callback);
        }
    }

    /**
     * Create collaboration
     * Adds a collaboration for a single user or a single group to a file or folder.  Collaborations can be created using email address, user IDs, or a group IDs.  If a collaboration is being created with a group, access to this endpoint is dependent on the group&#39;s ability to be invited.  If collaboration is in &#x60;pending&#x60; status, the following fields are redacted: - &#x60;login&#x60; and &#x60;name&#x60; are hidden if a collaboration was created using &#x60;user_id&#x60;, -  &#x60;name&#x60; is hidden if a collaboration was created using &#x60;login&#x60;.
     * @return CollaborationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new collaboration object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CollaborationsRequestBuilder collaborations(PostCollaborationsRequestItem item, PostCollaborationsRequestAccessibleBy accessibleBy, String role) throws IllegalArgumentException {
        if (item == null) throw new IllegalArgumentException("\"item\" is required but got null");
        if (accessibleBy == null) throw new IllegalArgumentException("\"accessibleBy\" is required but got null");
        if (role == null) throw new IllegalArgumentException("\"role\" is required but got null");
            

        return new CollaborationsRequestBuilder(item, accessibleBy, role);
    }
    private okhttp3.Call getSingleCollaborationCall(String collaborationId, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collaborations/{collaboration_id}"
            .replace("{" + "collaboration_id" + "}", localVarApiClient.escapeString(collaborationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleCollaborationValidateBeforeCall(String collaborationId, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collaborationId' is set
        if (collaborationId == null) {
            throw new ApiException("Missing the required parameter 'collaborationId' when calling getSingleCollaboration(Async)");
        }

        return getSingleCollaborationCall(collaborationId, fields, _callback);

    }


    private ApiResponse<Collaboration> getSingleCollaborationWithHttpInfo(String collaborationId, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getSingleCollaborationValidateBeforeCall(collaborationId, fields, null);
        Type localVarReturnType = new TypeToken<Collaboration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleCollaborationAsync(String collaborationId, List<String> fields, final ApiCallback<Collaboration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleCollaborationValidateBeforeCall(collaborationId, fields, _callback);
        Type localVarReturnType = new TypeToken<Collaboration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleCollaborationRequestBuilder {
        private final String collaborationId;
        private List<String> fields;

        private GetSingleCollaborationRequestBuilder(String collaborationId) {
            this.collaborationId = collaborationId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return GetSingleCollaborationRequestBuilder
         */
        public GetSingleCollaborationRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getSingleCollaboration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collaboration object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCollaborationCall(collaborationId, fields, _callback);
        }


        /**
         * Execute getSingleCollaboration request
         * @return Collaboration
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collaboration object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Collaboration execute() throws ApiException {
            ApiResponse<Collaboration> localVarResp = getSingleCollaborationWithHttpInfo(collaborationId, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleCollaboration request with HTTP info returned
         * @return ApiResponse&lt;Collaboration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collaboration object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Collaboration> executeWithHttpInfo() throws ApiException {
            return getSingleCollaborationWithHttpInfo(collaborationId, fields);
        }

        /**
         * Execute getSingleCollaboration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collaboration object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Collaboration> _callback) throws ApiException {
            return getSingleCollaborationAsync(collaborationId, fields, _callback);
        }
    }

    /**
     * Get collaboration
     * Retrieves a single collaboration.
     * @param collaborationId The ID of the collaboration (required)
     * @return GetSingleCollaborationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collaboration object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleCollaborationRequestBuilder getSingleCollaboration(String collaborationId) throws IllegalArgumentException {
        if (collaborationId == null) throw new IllegalArgumentException("\"collaborationId\" is required but got null");
            

        return new GetSingleCollaborationRequestBuilder(collaborationId);
    }
    private okhttp3.Call removeSingleCollaborationCall(String collaborationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collaborations/{collaboration_id}"
            .replace("{" + "collaboration_id" + "}", localVarApiClient.escapeString(collaborationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSingleCollaborationValidateBeforeCall(String collaborationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collaborationId' is set
        if (collaborationId == null) {
            throw new ApiException("Missing the required parameter 'collaborationId' when calling removeSingleCollaboration(Async)");
        }

        return removeSingleCollaborationCall(collaborationId, _callback);

    }


    private ApiResponse<Void> removeSingleCollaborationWithHttpInfo(String collaborationId) throws ApiException {
        okhttp3.Call localVarCall = removeSingleCollaborationValidateBeforeCall(collaborationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeSingleCollaborationAsync(String collaborationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSingleCollaborationValidateBeforeCall(collaborationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveSingleCollaborationRequestBuilder {
        private final String collaborationId;

        private RemoveSingleCollaborationRequestBuilder(String collaborationId) {
            this.collaborationId = collaborationId;
        }

        /**
         * Build call for removeSingleCollaboration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the collaboration was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSingleCollaborationCall(collaborationId, _callback);
        }


        /**
         * Execute removeSingleCollaboration request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the collaboration was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeSingleCollaborationWithHttpInfo(collaborationId);
        }

        /**
         * Execute removeSingleCollaboration request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the collaboration was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeSingleCollaborationWithHttpInfo(collaborationId);
        }

        /**
         * Execute removeSingleCollaboration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the collaboration was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeSingleCollaborationAsync(collaborationId, _callback);
        }
    }

    /**
     * Remove collaboration
     * Deletes a single collaboration.
     * @param collaborationId The ID of the collaboration (required)
     * @return RemoveSingleCollaborationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A blank response is returned if the collaboration was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSingleCollaborationRequestBuilder removeSingleCollaboration(String collaborationId) throws IllegalArgumentException {
        if (collaborationId == null) throw new IllegalArgumentException("\"collaborationId\" is required but got null");
            

        return new RemoveSingleCollaborationRequestBuilder(collaborationId);
    }
    private okhttp3.Call updateCollaborationCall(String collaborationId, CollaborationsUpdateCollaborationRequest collaborationsUpdateCollaborationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collaborationsUpdateCollaborationRequest;

        // create path and map variables
        String localVarPath = "/collaborations/{collaboration_id}"
            .replace("{" + "collaboration_id" + "}", localVarApiClient.escapeString(collaborationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCollaborationValidateBeforeCall(String collaborationId, CollaborationsUpdateCollaborationRequest collaborationsUpdateCollaborationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collaborationId' is set
        if (collaborationId == null) {
            throw new ApiException("Missing the required parameter 'collaborationId' when calling updateCollaboration(Async)");
        }

        return updateCollaborationCall(collaborationId, collaborationsUpdateCollaborationRequest, _callback);

    }


    private ApiResponse<Collaboration> updateCollaborationWithHttpInfo(String collaborationId, CollaborationsUpdateCollaborationRequest collaborationsUpdateCollaborationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCollaborationValidateBeforeCall(collaborationId, collaborationsUpdateCollaborationRequest, null);
        Type localVarReturnType = new TypeToken<Collaboration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCollaborationAsync(String collaborationId, CollaborationsUpdateCollaborationRequest collaborationsUpdateCollaborationRequest, final ApiCallback<Collaboration> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCollaborationValidateBeforeCall(collaborationId, collaborationsUpdateCollaborationRequest, _callback);
        Type localVarReturnType = new TypeToken<Collaboration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCollaborationRequestBuilder {
        private final String role;
        private final String collaborationId;
        private String status;
        private OffsetDateTime expiresAt;
        private Boolean canViewPath;

        private UpdateCollaborationRequestBuilder(String role, String collaborationId) {
            this.role = role;
            this.collaborationId = collaborationId;
        }

        /**
         * Set status
         * @param status &lt;!--alex ignore reject--&gt; Set the status of a &#x60;pending&#x60; collaboration invitation, effectively accepting, or rejecting the invite. (optional)
         * @return UpdateCollaborationRequestBuilder
         */
        public UpdateCollaborationRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set expiresAt
         * @param expiresAt Update the expiration date for the collaboration. At this date, the collaboration will be automatically removed from the item.  This feature will only work if the **Automatically remove invited collaborators: Allow folder owners to extend the expiry date** setting has been enabled in the **Enterprise Settings** of the **Admin Console**. When the setting is not enabled, collaborations can not have an expiry date and a value for this field will be result in an error.  Additionally, a collaboration can only be given an expiration if it was created after the **Automatically remove invited collaborator** setting was enabled. (optional)
         * @return UpdateCollaborationRequestBuilder
         */
        public UpdateCollaborationRequestBuilder expiresAt(OffsetDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }
        
        /**
         * Set canViewPath
         * @param canViewPath Determines if the invited users can see the entire parent path to the associated folder. The user will not gain privileges in any parent folder and therefore can not see content the user is not collaborated on.  Be aware that this meaningfully increases the time required to load the invitee&#39;s **All Files** page. We recommend you limit the number of collaborations with &#x60;can_view_path&#x60; enabled to 1,000 per user.  Only owner or co-owners can invite collaborators with a &#x60;can_view_path&#x60; of &#x60;true&#x60;.  &#x60;can_view_path&#x60; can only be used for folder collaborations. (optional)
         * @return UpdateCollaborationRequestBuilder
         */
        public UpdateCollaborationRequestBuilder canViewPath(Boolean canViewPath) {
            this.canViewPath = canViewPath;
            return this;
        }
        
        /**
         * Build call for updateCollaboration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated collaboration object unless the owner has changed. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> If the role is changed to &#x60;owner&#x60;, the collaboration is deleted and a new collaboration is created. The previous &#x60;owner&#x60; of the old collaboration will be a &#x60;co-owner&#x60; on the new collaboration. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CollaborationsUpdateCollaborationRequest collaborationsUpdateCollaborationRequest = buildBodyParams();
            return updateCollaborationCall(collaborationId, collaborationsUpdateCollaborationRequest, _callback);
        }

        private CollaborationsUpdateCollaborationRequest buildBodyParams() {
            CollaborationsUpdateCollaborationRequest collaborationsUpdateCollaborationRequest = new CollaborationsUpdateCollaborationRequest();
            if (this.role != null)
            collaborationsUpdateCollaborationRequest.role(CollaborationsUpdateCollaborationRequest.RoleEnum.fromValue(this.role));
            if (this.status != null)
            collaborationsUpdateCollaborationRequest.status(CollaborationsUpdateCollaborationRequest.StatusEnum.fromValue(this.status));
            collaborationsUpdateCollaborationRequest.expiresAt(this.expiresAt);
            collaborationsUpdateCollaborationRequest.canViewPath(this.canViewPath);
            return collaborationsUpdateCollaborationRequest;
        }

        /**
         * Execute updateCollaboration request
         * @return Collaboration
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated collaboration object unless the owner has changed. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> If the role is changed to &#x60;owner&#x60;, the collaboration is deleted and a new collaboration is created. The previous &#x60;owner&#x60; of the old collaboration will be a &#x60;co-owner&#x60; on the new collaboration. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Collaboration execute() throws ApiException {
            CollaborationsUpdateCollaborationRequest collaborationsUpdateCollaborationRequest = buildBodyParams();
            ApiResponse<Collaboration> localVarResp = updateCollaborationWithHttpInfo(collaborationId, collaborationsUpdateCollaborationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCollaboration request with HTTP info returned
         * @return ApiResponse&lt;Collaboration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated collaboration object unless the owner has changed. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> If the role is changed to &#x60;owner&#x60;, the collaboration is deleted and a new collaboration is created. The previous &#x60;owner&#x60; of the old collaboration will be a &#x60;co-owner&#x60; on the new collaboration. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Collaboration> executeWithHttpInfo() throws ApiException {
            CollaborationsUpdateCollaborationRequest collaborationsUpdateCollaborationRequest = buildBodyParams();
            return updateCollaborationWithHttpInfo(collaborationId, collaborationsUpdateCollaborationRequest);
        }

        /**
         * Execute updateCollaboration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated collaboration object unless the owner has changed. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> If the role is changed to &#x60;owner&#x60;, the collaboration is deleted and a new collaboration is created. The previous &#x60;owner&#x60; of the old collaboration will be a &#x60;co-owner&#x60; on the new collaboration. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Collaboration> _callback) throws ApiException {
            CollaborationsUpdateCollaborationRequest collaborationsUpdateCollaborationRequest = buildBodyParams();
            return updateCollaborationAsync(collaborationId, collaborationsUpdateCollaborationRequest, _callback);
        }
    }

    /**
     * Update collaboration
     * Updates a collaboration. Can be used to change the owner of an item, or to accept collaboration invites.
     * @param collaborationId The ID of the collaboration (required)
     * @return UpdateCollaborationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an updated collaboration object unless the owner has changed. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> If the role is changed to &#x60;owner&#x60;, the collaboration is deleted and a new collaboration is created. The previous &#x60;owner&#x60; of the old collaboration will be a &#x60;co-owner&#x60; on the new collaboration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCollaborationRequestBuilder updateCollaboration(String role, String collaborationId) throws IllegalArgumentException {
        if (role == null) throw new IllegalArgumentException("\"role\" is required but got null");
            

        if (collaborationId == null) throw new IllegalArgumentException("\"collaborationId\" is required but got null");
            

        return new UpdateCollaborationRequestBuilder(role, collaborationId);
    }
}
