/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FileRequest;
import com.konfigthis.client.model.FileRequestCopyRequest;
import com.konfigthis.client.model.FileRequestCopyRequestAllOfFolder;
import com.konfigthis.client.model.FileRequestUpdateRequest;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FileRequestsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileRequestsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FileRequestsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call copyRequestToFolderCall(String fileRequestId, FileRequestCopyRequest fileRequestCopyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileRequestCopyRequest;

        // create path and map variables
        String localVarPath = "/file_requests/{file_request_id}/copy"
            .replace("{" + "file_request_id" + "}", localVarApiClient.escapeString(fileRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyRequestToFolderValidateBeforeCall(String fileRequestId, FileRequestCopyRequest fileRequestCopyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileRequestId' is set
        if (fileRequestId == null) {
            throw new ApiException("Missing the required parameter 'fileRequestId' when calling copyRequestToFolder(Async)");
        }

        return copyRequestToFolderCall(fileRequestId, fileRequestCopyRequest, _callback);

    }


    private ApiResponse<FileRequest> copyRequestToFolderWithHttpInfo(String fileRequestId, FileRequestCopyRequest fileRequestCopyRequest) throws ApiException {
        okhttp3.Call localVarCall = copyRequestToFolderValidateBeforeCall(fileRequestId, fileRequestCopyRequest, null);
        Type localVarReturnType = new TypeToken<FileRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call copyRequestToFolderAsync(String fileRequestId, FileRequestCopyRequest fileRequestCopyRequest, final ApiCallback<FileRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyRequestToFolderValidateBeforeCall(fileRequestId, fileRequestCopyRequest, _callback);
        Type localVarReturnType = new TypeToken<FileRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CopyRequestToFolderRequestBuilder {
        private final FileRequestCopyRequestAllOfFolder folder;
        private final String fileRequestId;
        private String title;
        private String description;
        private String status;
        private Boolean isEmailRequired;
        private Boolean isDescriptionRequired;
        private OffsetDateTime expiresAt;

        private CopyRequestToFolderRequestBuilder(FileRequestCopyRequestAllOfFolder folder, String fileRequestId) {
            this.folder = folder;
            this.fileRequestId = fileRequestId;
        }

        /**
         * Set title
         * @param title An optional new title for the file request. This can be used to change the title of the file request.  This will default to the value on the existing file request. (optional)
         * @return CopyRequestToFolderRequestBuilder
         */
        public CopyRequestToFolderRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description An optional new description for the file request. This can be used to change the description of the file request.  This will default to the value on the existing file request. (optional)
         * @return CopyRequestToFolderRequestBuilder
         */
        public CopyRequestToFolderRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set status
         * @param status An optional new status of the file request.  When the status is set to &#x60;inactive&#x60;, the file request will no longer accept new submissions, and any visitor to the file request URL will receive a &#x60;HTTP 404&#x60; status code.  This will default to the value on the existing file request. (optional)
         * @return CopyRequestToFolderRequestBuilder
         */
        public CopyRequestToFolderRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set isEmailRequired
         * @param isEmailRequired Whether a file request submitter is required to provide their email address.  When this setting is set to true, the Box UI will show an email field on the file request form.  This will default to the value on the existing file request. (optional)
         * @return CopyRequestToFolderRequestBuilder
         */
        public CopyRequestToFolderRequestBuilder isEmailRequired(Boolean isEmailRequired) {
            this.isEmailRequired = isEmailRequired;
            return this;
        }
        
        /**
         * Set isDescriptionRequired
         * @param isDescriptionRequired Whether a file request submitter is required to provide a description of the files they are submitting.  When this setting is set to true, the Box UI will show a description field on the file request form.  This will default to the value on the existing file request. (optional)
         * @return CopyRequestToFolderRequestBuilder
         */
        public CopyRequestToFolderRequestBuilder isDescriptionRequired(Boolean isDescriptionRequired) {
            this.isDescriptionRequired = isDescriptionRequired;
            return this;
        }
        
        /**
         * Set expiresAt
         * @param expiresAt The date after which a file request will no longer accept new submissions.  After this date, the &#x60;status&#x60; will automatically be set to &#x60;inactive&#x60;.  This will default to the value on the existing file request. (optional)
         * @return CopyRequestToFolderRequestBuilder
         */
        public CopyRequestToFolderRequestBuilder expiresAt(OffsetDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }
        
        /**
         * Build call for copyRequestToFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns updated file request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileRequestCopyRequest fileRequestCopyRequest = buildBodyParams();
            return copyRequestToFolderCall(fileRequestId, fileRequestCopyRequest, _callback);
        }

        private FileRequestCopyRequest buildBodyParams() {
            FileRequestCopyRequest fileRequestCopyRequest = new FileRequestCopyRequest();
            return fileRequestCopyRequest;
        }

        /**
         * Execute copyRequestToFolder request
         * @return FileRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns updated file request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileRequest execute() throws ApiException {
            FileRequestCopyRequest fileRequestCopyRequest = buildBodyParams();
            ApiResponse<FileRequest> localVarResp = copyRequestToFolderWithHttpInfo(fileRequestId, fileRequestCopyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute copyRequestToFolder request with HTTP info returned
         * @return ApiResponse&lt;FileRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns updated file request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileRequest> executeWithHttpInfo() throws ApiException {
            FileRequestCopyRequest fileRequestCopyRequest = buildBodyParams();
            return copyRequestToFolderWithHttpInfo(fileRequestId, fileRequestCopyRequest);
        }

        /**
         * Execute copyRequestToFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns updated file request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileRequest> _callback) throws ApiException {
            FileRequestCopyRequest fileRequestCopyRequest = buildBodyParams();
            return copyRequestToFolderAsync(fileRequestId, fileRequestCopyRequest, _callback);
        }
    }

    /**
     * Copy file request
     * Copies an existing file request that is already present on one folder, and applies it to another folder.
     * @param fileRequestId The unique identifier that represent a file request.  The ID for any file request can be determined by visiting a file request builder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/filerequest/123&#x60; the &#x60;file_request_id&#x60; is &#x60;123&#x60;. (required)
     * @return CopyRequestToFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated file request object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CopyRequestToFolderRequestBuilder copyRequestToFolder(FileRequestCopyRequestAllOfFolder folder, String fileRequestId) throws IllegalArgumentException {
        if (folder == null) throw new IllegalArgumentException("\"folder\" is required but got null");
        if (fileRequestId == null) throw new IllegalArgumentException("\"fileRequestId\" is required but got null");
            

        return new CopyRequestToFolderRequestBuilder(folder, fileRequestId);
    }
    private okhttp3.Call deletePermanentlyCall(String fileRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file_requests/{file_request_id}"
            .replace("{" + "file_request_id" + "}", localVarApiClient.escapeString(fileRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePermanentlyValidateBeforeCall(String fileRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileRequestId' is set
        if (fileRequestId == null) {
            throw new ApiException("Missing the required parameter 'fileRequestId' when calling deletePermanently(Async)");
        }

        return deletePermanentlyCall(fileRequestId, _callback);

    }


    private ApiResponse<Void> deletePermanentlyWithHttpInfo(String fileRequestId) throws ApiException {
        okhttp3.Call localVarCall = deletePermanentlyValidateBeforeCall(fileRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePermanentlyAsync(String fileRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePermanentlyValidateBeforeCall(fileRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePermanentlyRequestBuilder {
        private final String fileRequestId;

        private DeletePermanentlyRequestBuilder(String fileRequestId) {
            this.fileRequestId = fileRequestId;
        }

        /**
         * Build call for deletePermanently
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the file request has been successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePermanentlyCall(fileRequestId, _callback);
        }


        /**
         * Execute deletePermanently request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the file request has been successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePermanentlyWithHttpInfo(fileRequestId);
        }

        /**
         * Execute deletePermanently request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the file request has been successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePermanentlyWithHttpInfo(fileRequestId);
        }

        /**
         * Execute deletePermanently request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the file request has been successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePermanentlyAsync(fileRequestId, _callback);
        }
    }

    /**
     * Delete file request
     * Deletes a file request permanently.
     * @param fileRequestId The unique identifier that represent a file request.  The ID for any file request can be determined by visiting a file request builder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/filerequest/123&#x60; the &#x60;file_request_id&#x60; is &#x60;123&#x60;. (required)
     * @return DeletePermanentlyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the file request has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePermanentlyRequestBuilder deletePermanently(String fileRequestId) throws IllegalArgumentException {
        if (fileRequestId == null) throw new IllegalArgumentException("\"fileRequestId\" is required but got null");
            

        return new DeletePermanentlyRequestBuilder(fileRequestId);
    }
    private okhttp3.Call getInformationCall(String fileRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file_requests/{file_request_id}"
            .replace("{" + "file_request_id" + "}", localVarApiClient.escapeString(fileRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInformationValidateBeforeCall(String fileRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileRequestId' is set
        if (fileRequestId == null) {
            throw new ApiException("Missing the required parameter 'fileRequestId' when calling getInformation(Async)");
        }

        return getInformationCall(fileRequestId, _callback);

    }


    private ApiResponse<FileRequest> getInformationWithHttpInfo(String fileRequestId) throws ApiException {
        okhttp3.Call localVarCall = getInformationValidateBeforeCall(fileRequestId, null);
        Type localVarReturnType = new TypeToken<FileRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInformationAsync(String fileRequestId, final ApiCallback<FileRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInformationValidateBeforeCall(fileRequestId, _callback);
        Type localVarReturnType = new TypeToken<FileRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInformationRequestBuilder {
        private final String fileRequestId;

        private GetInformationRequestBuilder(String fileRequestId) {
            this.fileRequestId = fileRequestId;
        }

        /**
         * Build call for getInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInformationCall(fileRequestId, _callback);
        }


        /**
         * Execute getInformation request
         * @return FileRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileRequest execute() throws ApiException {
            ApiResponse<FileRequest> localVarResp = getInformationWithHttpInfo(fileRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInformation request with HTTP info returned
         * @return ApiResponse&lt;FileRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileRequest> executeWithHttpInfo() throws ApiException {
            return getInformationWithHttpInfo(fileRequestId);
        }

        /**
         * Execute getInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileRequest> _callback) throws ApiException {
            return getInformationAsync(fileRequestId, _callback);
        }
    }

    /**
     * Get file request
     * Retrieves the information about a file request.
     * @param fileRequestId The unique identifier that represent a file request.  The ID for any file request can be determined by visiting a file request builder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/filerequest/123&#x60; the &#x60;file_request_id&#x60; is &#x60;123&#x60;. (required)
     * @return GetInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a file request object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetInformationRequestBuilder getInformation(String fileRequestId) throws IllegalArgumentException {
        if (fileRequestId == null) throw new IllegalArgumentException("\"fileRequestId\" is required but got null");
            

        return new GetInformationRequestBuilder(fileRequestId);
    }
    private okhttp3.Call updateRequestCall(String fileRequestId, String ifMatch, FileRequestUpdateRequest fileRequestUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileRequestUpdateRequest;

        // create path and map variables
        String localVarPath = "/file_requests/{file_request_id}"
            .replace("{" + "file_request_id" + "}", localVarApiClient.escapeString(fileRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("if-match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRequestValidateBeforeCall(String fileRequestId, String ifMatch, FileRequestUpdateRequest fileRequestUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileRequestId' is set
        if (fileRequestId == null) {
            throw new ApiException("Missing the required parameter 'fileRequestId' when calling updateRequest(Async)");
        }

        return updateRequestCall(fileRequestId, ifMatch, fileRequestUpdateRequest, _callback);

    }


    private ApiResponse<FileRequest> updateRequestWithHttpInfo(String fileRequestId, String ifMatch, FileRequestUpdateRequest fileRequestUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRequestValidateBeforeCall(fileRequestId, ifMatch, fileRequestUpdateRequest, null);
        Type localVarReturnType = new TypeToken<FileRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRequestAsync(String fileRequestId, String ifMatch, FileRequestUpdateRequest fileRequestUpdateRequest, final ApiCallback<FileRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRequestValidateBeforeCall(fileRequestId, ifMatch, fileRequestUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<FileRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestRequestBuilder {
        private final String fileRequestId;
        private String title;
        private String description;
        private String status;
        private Boolean isEmailRequired;
        private Boolean isDescriptionRequired;
        private OffsetDateTime expiresAt;
        private String ifMatch;

        private UpdateRequestRequestBuilder(String fileRequestId) {
            this.fileRequestId = fileRequestId;
        }

        /**
         * Set title
         * @param title An optional new title for the file request. This can be used to change the title of the file request.  This will default to the value on the existing file request. (optional)
         * @return UpdateRequestRequestBuilder
         */
        public UpdateRequestRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description An optional new description for the file request. This can be used to change the description of the file request.  This will default to the value on the existing file request. (optional)
         * @return UpdateRequestRequestBuilder
         */
        public UpdateRequestRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set status
         * @param status An optional new status of the file request.  When the status is set to &#x60;inactive&#x60;, the file request will no longer accept new submissions, and any visitor to the file request URL will receive a &#x60;HTTP 404&#x60; status code.  This will default to the value on the existing file request. (optional)
         * @return UpdateRequestRequestBuilder
         */
        public UpdateRequestRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set isEmailRequired
         * @param isEmailRequired Whether a file request submitter is required to provide their email address.  When this setting is set to true, the Box UI will show an email field on the file request form.  This will default to the value on the existing file request. (optional)
         * @return UpdateRequestRequestBuilder
         */
        public UpdateRequestRequestBuilder isEmailRequired(Boolean isEmailRequired) {
            this.isEmailRequired = isEmailRequired;
            return this;
        }
        
        /**
         * Set isDescriptionRequired
         * @param isDescriptionRequired Whether a file request submitter is required to provide a description of the files they are submitting.  When this setting is set to true, the Box UI will show a description field on the file request form.  This will default to the value on the existing file request. (optional)
         * @return UpdateRequestRequestBuilder
         */
        public UpdateRequestRequestBuilder isDescriptionRequired(Boolean isDescriptionRequired) {
            this.isDescriptionRequired = isDescriptionRequired;
            return this;
        }
        
        /**
         * Set expiresAt
         * @param expiresAt The date after which a file request will no longer accept new submissions.  After this date, the &#x60;status&#x60; will automatically be set to &#x60;inactive&#x60;.  This will default to the value on the existing file request. (optional)
         * @return UpdateRequestRequestBuilder
         */
        public UpdateRequestRequestBuilder expiresAt(OffsetDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }
        
        /**
         * Set ifMatch
         * @param ifMatch Ensures this item hasn&#39;t recently changed before making changes.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since. (optional)
         * @return UpdateRequestRequestBuilder
         */
        public UpdateRequestRequestBuilder ifMatch(String ifMatch) {
            this.ifMatch = ifMatch;
            return this;
        }
        
        /**
         * Build call for updateRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated file request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileRequestUpdateRequest fileRequestUpdateRequest = buildBodyParams();
            return updateRequestCall(fileRequestId, ifMatch, fileRequestUpdateRequest, _callback);
        }

        private FileRequestUpdateRequest buildBodyParams() {
            FileRequestUpdateRequest fileRequestUpdateRequest = new FileRequestUpdateRequest();
            fileRequestUpdateRequest.title(this.title);
            fileRequestUpdateRequest.description(this.description);
            if (this.status != null)
            fileRequestUpdateRequest.status(FileRequestUpdateRequest.StatusEnum.fromValue(this.status));
            fileRequestUpdateRequest.isEmailRequired(this.isEmailRequired);
            fileRequestUpdateRequest.isDescriptionRequired(this.isDescriptionRequired);
            fileRequestUpdateRequest.expiresAt(this.expiresAt);
            return fileRequestUpdateRequest;
        }

        /**
         * Execute updateRequest request
         * @return FileRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated file request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileRequest execute() throws ApiException {
            FileRequestUpdateRequest fileRequestUpdateRequest = buildBodyParams();
            ApiResponse<FileRequest> localVarResp = updateRequestWithHttpInfo(fileRequestId, ifMatch, fileRequestUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRequest request with HTTP info returned
         * @return ApiResponse&lt;FileRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated file request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileRequest> executeWithHttpInfo() throws ApiException {
            FileRequestUpdateRequest fileRequestUpdateRequest = buildBodyParams();
            return updateRequestWithHttpInfo(fileRequestId, ifMatch, fileRequestUpdateRequest);
        }

        /**
         * Execute updateRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated file request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileRequest> _callback) throws ApiException {
            FileRequestUpdateRequest fileRequestUpdateRequest = buildBodyParams();
            return updateRequestAsync(fileRequestId, ifMatch, fileRequestUpdateRequest, _callback);
        }
    }

    /**
     * Update file request
     * Updates a file request. This can be used to activate or deactivate a file request.
     * @param fileRequestId The unique identifier that represent a file request.  The ID for any file request can be determined by visiting a file request builder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/filerequest/123&#x60; the &#x60;file_request_id&#x60; is &#x60;123&#x60;. (required)
     * @return UpdateRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated file request object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRequestRequestBuilder updateRequest(String fileRequestId) throws IllegalArgumentException {
        if (fileRequestId == null) throw new IllegalArgumentException("\"fileRequestId\" is required but got null");
            

        return new UpdateRequestRequestBuilder(fileRequestId);
    }
}
