/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.TermsOfService;
import com.konfigthis.client.model.TermsOfServiceCreateForEnterpriseAndTypeRequest;
import com.konfigthis.client.model.TermsOfServiceUpdateSpecificTermRequest;
import com.konfigthis.client.model.TermsOfServices;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TermsOfServiceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TermsOfServiceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TermsOfServiceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createForEnterpriseAndTypeCall(TermsOfServiceCreateForEnterpriseAndTypeRequest termsOfServiceCreateForEnterpriseAndTypeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = termsOfServiceCreateForEnterpriseAndTypeRequest;

        // create path and map variables
        String localVarPath = "/terms_of_services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createForEnterpriseAndTypeValidateBeforeCall(TermsOfServiceCreateForEnterpriseAndTypeRequest termsOfServiceCreateForEnterpriseAndTypeRequest, final ApiCallback _callback) throws ApiException {
        return createForEnterpriseAndTypeCall(termsOfServiceCreateForEnterpriseAndTypeRequest, _callback);

    }


    private ApiResponse<TermsOfService> createForEnterpriseAndTypeWithHttpInfo(TermsOfServiceCreateForEnterpriseAndTypeRequest termsOfServiceCreateForEnterpriseAndTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = createForEnterpriseAndTypeValidateBeforeCall(termsOfServiceCreateForEnterpriseAndTypeRequest, null);
        Type localVarReturnType = new TypeToken<TermsOfService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createForEnterpriseAndTypeAsync(TermsOfServiceCreateForEnterpriseAndTypeRequest termsOfServiceCreateForEnterpriseAndTypeRequest, final ApiCallback<TermsOfService> _callback) throws ApiException {

        okhttp3.Call localVarCall = createForEnterpriseAndTypeValidateBeforeCall(termsOfServiceCreateForEnterpriseAndTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<TermsOfService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateForEnterpriseAndTypeRequestBuilder {
        private final String status;
        private final String text;
        private String tosType;

        private CreateForEnterpriseAndTypeRequestBuilder(String status, String text) {
            this.status = status;
            this.text = text;
        }

        /**
         * Set tosType
         * @param tosType The type of user to set the terms of service for. (optional)
         * @return CreateForEnterpriseAndTypeRequestBuilder
         */
        public CreateForEnterpriseAndTypeRequestBuilder tosType(String tosType) {
            this.tosType = tosType;
            return this;
        }
        
        /**
         * Build call for createForEnterpriseAndType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new task object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TermsOfServiceCreateForEnterpriseAndTypeRequest termsOfServiceCreateForEnterpriseAndTypeRequest = buildBodyParams();
            return createForEnterpriseAndTypeCall(termsOfServiceCreateForEnterpriseAndTypeRequest, _callback);
        }

        private TermsOfServiceCreateForEnterpriseAndTypeRequest buildBodyParams() {
            TermsOfServiceCreateForEnterpriseAndTypeRequest termsOfServiceCreateForEnterpriseAndTypeRequest = new TermsOfServiceCreateForEnterpriseAndTypeRequest();
            if (this.status != null)
            termsOfServiceCreateForEnterpriseAndTypeRequest.status(TermsOfServiceCreateForEnterpriseAndTypeRequest.StatusEnum.fromValue(this.status));
            if (this.tosType != null)
            termsOfServiceCreateForEnterpriseAndTypeRequest.tosType(TermsOfServiceCreateForEnterpriseAndTypeRequest.TosTypeEnum.fromValue(this.tosType));
            termsOfServiceCreateForEnterpriseAndTypeRequest.text(this.text);
            return termsOfServiceCreateForEnterpriseAndTypeRequest;
        }

        /**
         * Execute createForEnterpriseAndType request
         * @return TermsOfService
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new task object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public TermsOfService execute() throws ApiException {
            TermsOfServiceCreateForEnterpriseAndTypeRequest termsOfServiceCreateForEnterpriseAndTypeRequest = buildBodyParams();
            ApiResponse<TermsOfService> localVarResp = createForEnterpriseAndTypeWithHttpInfo(termsOfServiceCreateForEnterpriseAndTypeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createForEnterpriseAndType request with HTTP info returned
         * @return ApiResponse&lt;TermsOfService&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new task object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TermsOfService> executeWithHttpInfo() throws ApiException {
            TermsOfServiceCreateForEnterpriseAndTypeRequest termsOfServiceCreateForEnterpriseAndTypeRequest = buildBodyParams();
            return createForEnterpriseAndTypeWithHttpInfo(termsOfServiceCreateForEnterpriseAndTypeRequest);
        }

        /**
         * Execute createForEnterpriseAndType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new task object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TermsOfService> _callback) throws ApiException {
            TermsOfServiceCreateForEnterpriseAndTypeRequest termsOfServiceCreateForEnterpriseAndTypeRequest = buildBodyParams();
            return createForEnterpriseAndTypeAsync(termsOfServiceCreateForEnterpriseAndTypeRequest, _callback);
        }
    }

    /**
     * Create terms of service
     * Creates a terms of service for a given enterprise and type of user.
     * @return CreateForEnterpriseAndTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a new task object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateForEnterpriseAndTypeRequestBuilder createForEnterpriseAndType(String status, String text) throws IllegalArgumentException {
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (text == null) throw new IllegalArgumentException("\"text\" is required but got null");
            

        return new CreateForEnterpriseAndTypeRequestBuilder(status, text);
    }
    private okhttp3.Call getSettingsCall(String tosType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terms_of_services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tosType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tos_type", tosType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(String tosType, final ApiCallback _callback) throws ApiException {
        return getSettingsCall(tosType, _callback);

    }


    private ApiResponse<TermsOfServices> getSettingsWithHttpInfo(String tosType) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(tosType, null);
        Type localVarReturnType = new TypeToken<TermsOfServices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSettingsAsync(String tosType, final ApiCallback<TermsOfServices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(tosType, _callback);
        Type localVarReturnType = new TypeToken<TermsOfServices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSettingsRequestBuilder {
        private String tosType;

        private GetSettingsRequestBuilder() {
        }

        /**
         * Set tosType
         * @param tosType Limits the results to the terms of service of the given type. (optional)
         * @return GetSettingsRequestBuilder
         */
        public GetSettingsRequestBuilder tosType(String tosType) {
            this.tosType = tosType;
            return this;
        }
        
        /**
         * Build call for getSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of terms of service text and settings for the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSettingsCall(tosType, _callback);
        }


        /**
         * Execute getSettings request
         * @return TermsOfServices
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of terms of service text and settings for the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public TermsOfServices execute() throws ApiException {
            ApiResponse<TermsOfServices> localVarResp = getSettingsWithHttpInfo(tosType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSettings request with HTTP info returned
         * @return ApiResponse&lt;TermsOfServices&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of terms of service text and settings for the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TermsOfServices> executeWithHttpInfo() throws ApiException {
            return getSettingsWithHttpInfo(tosType);
        }

        /**
         * Execute getSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of terms of service text and settings for the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TermsOfServices> _callback) throws ApiException {
            return getSettingsAsync(tosType, _callback);
        }
    }

    /**
     * List terms of services
     * Returns the current terms of service text and settings for the enterprise.
     * @return GetSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of terms of service text and settings for the enterprise. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsRequestBuilder getSettings() throws IllegalArgumentException {
        return new GetSettingsRequestBuilder();
    }
    private okhttp3.Call getSpecificCall(String termsOfServiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terms_of_services/{terms_of_service_id}"
            .replace("{" + "terms_of_service_id" + "}", localVarApiClient.escapeString(termsOfServiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificValidateBeforeCall(String termsOfServiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'termsOfServiceId' is set
        if (termsOfServiceId == null) {
            throw new ApiException("Missing the required parameter 'termsOfServiceId' when calling getSpecific(Async)");
        }

        return getSpecificCall(termsOfServiceId, _callback);

    }


    private ApiResponse<TermsOfService> getSpecificWithHttpInfo(String termsOfServiceId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificValidateBeforeCall(termsOfServiceId, null);
        Type localVarReturnType = new TypeToken<TermsOfService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificAsync(String termsOfServiceId, final ApiCallback<TermsOfService> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificValidateBeforeCall(termsOfServiceId, _callback);
        Type localVarReturnType = new TypeToken<TermsOfService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificRequestBuilder {
        private final String termsOfServiceId;

        private GetSpecificRequestBuilder(String termsOfServiceId) {
            this.termsOfServiceId = termsOfServiceId;
        }

        /**
         * Build call for getSpecific
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a terms of service object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificCall(termsOfServiceId, _callback);
        }


        /**
         * Execute getSpecific request
         * @return TermsOfService
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a terms of service object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public TermsOfService execute() throws ApiException {
            ApiResponse<TermsOfService> localVarResp = getSpecificWithHttpInfo(termsOfServiceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecific request with HTTP info returned
         * @return ApiResponse&lt;TermsOfService&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a terms of service object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TermsOfService> executeWithHttpInfo() throws ApiException {
            return getSpecificWithHttpInfo(termsOfServiceId);
        }

        /**
         * Execute getSpecific request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a terms of service object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TermsOfService> _callback) throws ApiException {
            return getSpecificAsync(termsOfServiceId, _callback);
        }
    }

    /**
     * Get terms of service
     * Fetches a specific terms of service.
     * @param termsOfServiceId The ID of the terms of service. (required)
     * @return GetSpecificRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a terms of service object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificRequestBuilder getSpecific(String termsOfServiceId) throws IllegalArgumentException {
        if (termsOfServiceId == null) throw new IllegalArgumentException("\"termsOfServiceId\" is required but got null");
            

        return new GetSpecificRequestBuilder(termsOfServiceId);
    }
    private okhttp3.Call updateSpecificTermCall(String termsOfServiceId, TermsOfServiceUpdateSpecificTermRequest termsOfServiceUpdateSpecificTermRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = termsOfServiceUpdateSpecificTermRequest;

        // create path and map variables
        String localVarPath = "/terms_of_services/{terms_of_service_id}"
            .replace("{" + "terms_of_service_id" + "}", localVarApiClient.escapeString(termsOfServiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpecificTermValidateBeforeCall(String termsOfServiceId, TermsOfServiceUpdateSpecificTermRequest termsOfServiceUpdateSpecificTermRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'termsOfServiceId' is set
        if (termsOfServiceId == null) {
            throw new ApiException("Missing the required parameter 'termsOfServiceId' when calling updateSpecificTerm(Async)");
        }

        return updateSpecificTermCall(termsOfServiceId, termsOfServiceUpdateSpecificTermRequest, _callback);

    }


    private ApiResponse<TermsOfService> updateSpecificTermWithHttpInfo(String termsOfServiceId, TermsOfServiceUpdateSpecificTermRequest termsOfServiceUpdateSpecificTermRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSpecificTermValidateBeforeCall(termsOfServiceId, termsOfServiceUpdateSpecificTermRequest, null);
        Type localVarReturnType = new TypeToken<TermsOfService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSpecificTermAsync(String termsOfServiceId, TermsOfServiceUpdateSpecificTermRequest termsOfServiceUpdateSpecificTermRequest, final ApiCallback<TermsOfService> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpecificTermValidateBeforeCall(termsOfServiceId, termsOfServiceUpdateSpecificTermRequest, _callback);
        Type localVarReturnType = new TypeToken<TermsOfService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSpecificTermRequestBuilder {
        private final String status;
        private final String text;
        private final String termsOfServiceId;

        private UpdateSpecificTermRequestBuilder(String status, String text, String termsOfServiceId) {
            this.status = status;
            this.text = text;
            this.termsOfServiceId = termsOfServiceId;
        }

        /**
         * Build call for updateSpecificTerm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated terms of service object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TermsOfServiceUpdateSpecificTermRequest termsOfServiceUpdateSpecificTermRequest = buildBodyParams();
            return updateSpecificTermCall(termsOfServiceId, termsOfServiceUpdateSpecificTermRequest, _callback);
        }

        private TermsOfServiceUpdateSpecificTermRequest buildBodyParams() {
            TermsOfServiceUpdateSpecificTermRequest termsOfServiceUpdateSpecificTermRequest = new TermsOfServiceUpdateSpecificTermRequest();
            if (this.status != null)
            termsOfServiceUpdateSpecificTermRequest.status(TermsOfServiceUpdateSpecificTermRequest.StatusEnum.fromValue(this.status));
            termsOfServiceUpdateSpecificTermRequest.text(this.text);
            return termsOfServiceUpdateSpecificTermRequest;
        }

        /**
         * Execute updateSpecificTerm request
         * @return TermsOfService
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated terms of service object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public TermsOfService execute() throws ApiException {
            TermsOfServiceUpdateSpecificTermRequest termsOfServiceUpdateSpecificTermRequest = buildBodyParams();
            ApiResponse<TermsOfService> localVarResp = updateSpecificTermWithHttpInfo(termsOfServiceId, termsOfServiceUpdateSpecificTermRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSpecificTerm request with HTTP info returned
         * @return ApiResponse&lt;TermsOfService&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated terms of service object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TermsOfService> executeWithHttpInfo() throws ApiException {
            TermsOfServiceUpdateSpecificTermRequest termsOfServiceUpdateSpecificTermRequest = buildBodyParams();
            return updateSpecificTermWithHttpInfo(termsOfServiceId, termsOfServiceUpdateSpecificTermRequest);
        }

        /**
         * Execute updateSpecificTerm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated terms of service object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TermsOfService> _callback) throws ApiException {
            TermsOfServiceUpdateSpecificTermRequest termsOfServiceUpdateSpecificTermRequest = buildBodyParams();
            return updateSpecificTermAsync(termsOfServiceId, termsOfServiceUpdateSpecificTermRequest, _callback);
        }
    }

    /**
     * Update terms of service
     * Updates a specific terms of service.
     * @param termsOfServiceId The ID of the terms of service. (required)
     * @return UpdateSpecificTermRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an updated terms of service object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSpecificTermRequestBuilder updateSpecificTerm(String status, String text, String termsOfServiceId) throws IllegalArgumentException {
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (text == null) throw new IllegalArgumentException("\"text\" is required but got null");
            

        if (termsOfServiceId == null) throw new IllegalArgumentException("\"termsOfServiceId\" is required but got null");
            

        return new UpdateSpecificTermRequestBuilder(status, text, termsOfServiceId);
    }
}
