/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccessToken;
import com.konfigthis.client.model.OAuth2Error;
import com.konfigthis.client.model.PostOAuth2Revoke;
import com.konfigthis.client.model.PostOAuth2Token;
import com.konfigthis.client.model.PostOAuth2TokenRefreshAccessToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthorizationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call authorizeCall(String responseType, String clientId, String redirectUri, String state, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://account.box.com/api/oauth2" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (responseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_type", responseType));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizeValidateBeforeCall(String responseType, String clientId, String redirectUri, String state, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'responseType' is set
        if (responseType == null) {
            throw new ApiException("Missing the required parameter 'responseType' when calling authorize(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling authorize(Async)");
        }

        return authorizeCall(responseType, clientId, redirectUri, state, scope, _callback);

    }


    private ApiResponse<String> authorizeWithHttpInfo(String responseType, String clientId, String redirectUri, String state, String scope) throws ApiException {
        okhttp3.Call localVarCall = authorizeValidateBeforeCall(responseType, clientId, redirectUri, state, scope, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call authorizeAsync(String responseType, String clientId, String redirectUri, String state, String scope, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizeValidateBeforeCall(responseType, clientId, redirectUri, state, scope, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AuthorizeRequestBuilder {
        private final String responseType;
        private final String clientId;
        private String redirectUri;
        private String state;
        private String scope;

        private AuthorizeRequestBuilder(String responseType, String clientId) {
            this.responseType = responseType;
            this.clientId = clientId;
        }

        /**
         * Set redirectUri
         * @param redirectUri The URI to which Box redirects the browser after the user has granted or denied the application permission. This URI match one of the redirect URIs in the configuration of your application. It must be a valid HTTPS URI and it needs to be able to handle the redirection to complete the next step in the OAuth 2.0 flow. Although this parameter is optional, it must be a part of the authorization URL if you configured multiple redirect URIs for the application in the developer console. A missing parameter causes a &#x60;redirect_uri_missing&#x60; error after the user grants application access. (optional)
         * @return AuthorizeRequestBuilder
         */
        public AuthorizeRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set state
         * @param state A custom string of your choice. Box will pass the same string to the redirect URL when authentication is complete. This parameter can be used to identify a user on redirect, as well as protect against hijacked sessions and other exploits. (optional)
         * @return AuthorizeRequestBuilder
         */
        public AuthorizeRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set scope
         * @param scope A space-separated list of application scopes you&#39;d like to authenticate the user for. This defaults to all the scopes configured for the application in its configuration page. (optional)
         * @return AuthorizeRequestBuilder
         */
        public AuthorizeRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Build call for authorize
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Does not return any data, but rather should be used in the browser. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Does not return any data, but rather should be used in the browser. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return authorizeCall(responseType, clientId, redirectUri, state, scope, _callback);
        }


        /**
         * Execute authorize request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Does not return any data, but rather should be used in the browser. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Does not return any data, but rather should be used in the browser. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = authorizeWithHttpInfo(responseType, clientId, redirectUri, state, scope);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute authorize request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Does not return any data, but rather should be used in the browser. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Does not return any data, but rather should be used in the browser. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return authorizeWithHttpInfo(responseType, clientId, redirectUri, state, scope);
        }

        /**
         * Execute authorize request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Does not return any data, but rather should be used in the browser. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Does not return any data, but rather should be used in the browser. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return authorizeAsync(responseType, clientId, redirectUri, state, scope, _callback);
        }
    }

    /**
     * Authorize user
     * Authorize a user by sending them through the [Box](https://box.com) website and request their permission to act on their behalf.  This is the first step when authenticating a user using OAuth 2.0. To request a user&#39;s authorization to use the Box APIs on their behalf you will need to send a user to the URL with this format.
     * @param responseType The type of response we&#39;d like to receive. (required)
     * @param clientId The Client ID of the application that is requesting to authenticate the user. To get the Client ID for your application, log in to your Box developer console and click the **Edit Application** link for the application you&#39;re working with. In the OAuth 2.0 Parameters section of the configuration page, find the item labelled &#x60;client_id&#x60;. The text of that item is your application&#39;s Client ID. (required)
     * @return AuthorizeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Does not return any data, but rather should be used in the browser. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Does not return any data, but rather should be used in the browser. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizeRequestBuilder authorize(String responseType, String clientId) throws IllegalArgumentException {
        if (responseType == null) throw new IllegalArgumentException("\"responseType\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        return new AuthorizeRequestBuilder(responseType, clientId);
    }
    private okhttp3.Call refreshAccessTokenCall(String grantType, String clientId, String clientSecret, String refreshToken, PostOAuth2TokenRefreshAccessToken postOAuth2TokenRefreshAccessToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.box.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postOAuth2TokenRefreshAccessToken;

        // create path and map variables
        String localVarPath = "/oauth2/token#refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (refreshToken != null) {
            localVarFormParams.put("refresh_token", refreshToken);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshAccessTokenValidateBeforeCall(String grantType, String clientId, String clientSecret, String refreshToken, PostOAuth2TokenRefreshAccessToken postOAuth2TokenRefreshAccessToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling refreshAccessToken(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling refreshAccessToken(Async)");
        }

        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling refreshAccessToken(Async)");
        }

        // verify the required parameter 'refreshToken' is set
        if (refreshToken == null) {
            throw new ApiException("Missing the required parameter 'refreshToken' when calling refreshAccessToken(Async)");
        }

        return refreshAccessTokenCall(grantType, clientId, clientSecret, refreshToken, postOAuth2TokenRefreshAccessToken, _callback);

    }


    private ApiResponse<AccessToken> refreshAccessTokenWithHttpInfo(String grantType, String clientId, String clientSecret, String refreshToken, PostOAuth2TokenRefreshAccessToken postOAuth2TokenRefreshAccessToken) throws ApiException {
        okhttp3.Call localVarCall = refreshAccessTokenValidateBeforeCall(grantType, clientId, clientSecret, refreshToken, postOAuth2TokenRefreshAccessToken, null);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call refreshAccessTokenAsync(String grantType, String clientId, String clientSecret, String refreshToken, PostOAuth2TokenRefreshAccessToken postOAuth2TokenRefreshAccessToken, final ApiCallback<AccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshAccessTokenValidateBeforeCall(grantType, clientId, clientSecret, refreshToken, postOAuth2TokenRefreshAccessToken, _callback);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RefreshAccessTokenRequestBuilder {
        private final String grantType;
        private final String clientId;
        private final String clientSecret;
        private final String refreshToken;

        private RefreshAccessTokenRequestBuilder(String grantType, String clientId, String clientSecret, String refreshToken) {
            this.grantType = grantType;
            this.clientId = clientId;
            this.clientSecret = clientSecret;
            this.refreshToken = refreshToken;
        }

        /**
         * Build call for refreshAccessToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new Access Token that can be used to make authenticated API calls by passing along the token in a authorization header as follows &#x60;Authorization: Bearer &lt;Token&gt;&#x60;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostOAuth2TokenRefreshAccessToken postOAuth2TokenRefreshAccessToken = buildBodyParams();
            return refreshAccessTokenCall(grantType, clientId, clientSecret, refreshToken, postOAuth2TokenRefreshAccessToken, _callback);
        }

        private PostOAuth2TokenRefreshAccessToken buildBodyParams() {
            PostOAuth2TokenRefreshAccessToken postOAuth2TokenRefreshAccessToken = new PostOAuth2TokenRefreshAccessToken();
            if (this.grantType != null)
            postOAuth2TokenRefreshAccessToken.grantType(PostOAuth2TokenRefreshAccessToken.GrantTypeEnum.fromValue(this.grantType));
            postOAuth2TokenRefreshAccessToken.clientId(this.clientId);
            postOAuth2TokenRefreshAccessToken.clientSecret(this.clientSecret);
            postOAuth2TokenRefreshAccessToken.refreshToken(this.refreshToken);
            return postOAuth2TokenRefreshAccessToken;
        }

        /**
         * Execute refreshAccessToken request
         * @return AccessToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new Access Token that can be used to make authenticated API calls by passing along the token in a authorization header as follows &#x60;Authorization: Bearer &lt;Token&gt;&#x60;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
         </table>
         */
        public AccessToken execute() throws ApiException {
            PostOAuth2TokenRefreshAccessToken postOAuth2TokenRefreshAccessToken = buildBodyParams();
            ApiResponse<AccessToken> localVarResp = refreshAccessTokenWithHttpInfo(grantType, clientId, clientSecret, refreshToken, postOAuth2TokenRefreshAccessToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute refreshAccessToken request with HTTP info returned
         * @return ApiResponse&lt;AccessToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new Access Token that can be used to make authenticated API calls by passing along the token in a authorization header as follows &#x60;Authorization: Bearer &lt;Token&gt;&#x60;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessToken> executeWithHttpInfo() throws ApiException {
            PostOAuth2TokenRefreshAccessToken postOAuth2TokenRefreshAccessToken = buildBodyParams();
            return refreshAccessTokenWithHttpInfo(grantType, clientId, clientSecret, refreshToken, postOAuth2TokenRefreshAccessToken);
        }

        /**
         * Execute refreshAccessToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new Access Token that can be used to make authenticated API calls by passing along the token in a authorization header as follows &#x60;Authorization: Bearer &lt;Token&gt;&#x60;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessToken> _callback) throws ApiException {
            PostOAuth2TokenRefreshAccessToken postOAuth2TokenRefreshAccessToken = buildBodyParams();
            return refreshAccessTokenAsync(grantType, clientId, clientSecret, refreshToken, postOAuth2TokenRefreshAccessToken, _callback);
        }
    }

    /**
     * Refresh access token
     * Refresh an Access Token using its client ID, secret, and refresh token.
     * @param grantType The type of request being made, in this case a refresh request. (required)
     * @param clientId The client ID of the application requesting to refresh the token. (required)
     * @param clientSecret The client secret of the application requesting to refresh the token. (required)
     * @param refreshToken The refresh token to refresh. (required)
     * @return RefreshAccessTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a new Access Token that can be used to make authenticated API calls by passing along the token in a authorization header as follows &#x60;Authorization: Bearer &lt;Token&gt;&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
     </table>
     */
    public RefreshAccessTokenRequestBuilder refreshAccessToken(String grantType, String clientId, String clientSecret, String refreshToken) throws IllegalArgumentException {
        if (grantType == null) throw new IllegalArgumentException("\"grantType\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        if (clientSecret == null) throw new IllegalArgumentException("\"clientSecret\" is required but got null");
            

        if (refreshToken == null) throw new IllegalArgumentException("\"refreshToken\" is required but got null");
            

        return new RefreshAccessTokenRequestBuilder(grantType, clientId, clientSecret, refreshToken);
    }
    private okhttp3.Call requestAccessTokenCall(String grantType, String clientId, String clientSecret, String code, String refreshToken, String assertion, String subjectToken, String subjectTokenType, String actorToken, String actorTokenType, String scope, String resource, String boxSubjectType, String boxSubjectId, String boxSharedLink, PostOAuth2Token postOAuth2Token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.box.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postOAuth2Token;

        // create path and map variables
        String localVarPath = "/oauth2/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (code != null) {
            localVarFormParams.put("code", code);
        }

        if (refreshToken != null) {
            localVarFormParams.put("refresh_token", refreshToken);
        }

        if (assertion != null) {
            localVarFormParams.put("assertion", assertion);
        }

        if (subjectToken != null) {
            localVarFormParams.put("subject_token", subjectToken);
        }

        if (subjectTokenType != null) {
            localVarFormParams.put("subject_token_type", subjectTokenType);
        }

        if (actorToken != null) {
            localVarFormParams.put("actor_token", actorToken);
        }

        if (actorTokenType != null) {
            localVarFormParams.put("actor_token_type", actorTokenType);
        }

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        if (resource != null) {
            localVarFormParams.put("resource", resource);
        }

        if (boxSubjectType != null) {
            localVarFormParams.put("box_subject_type", boxSubjectType);
        }

        if (boxSubjectId != null) {
            localVarFormParams.put("box_subject_id", boxSubjectId);
        }

        if (boxSharedLink != null) {
            localVarFormParams.put("box_shared_link", boxSharedLink);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestAccessTokenValidateBeforeCall(String grantType, String clientId, String clientSecret, String code, String refreshToken, String assertion, String subjectToken, String subjectTokenType, String actorToken, String actorTokenType, String scope, String resource, String boxSubjectType, String boxSubjectId, String boxSharedLink, PostOAuth2Token postOAuth2Token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling requestAccessToken(Async)");
        }

        return requestAccessTokenCall(grantType, clientId, clientSecret, code, refreshToken, assertion, subjectToken, subjectTokenType, actorToken, actorTokenType, scope, resource, boxSubjectType, boxSubjectId, boxSharedLink, postOAuth2Token, _callback);

    }


    private ApiResponse<AccessToken> requestAccessTokenWithHttpInfo(String grantType, String clientId, String clientSecret, String code, String refreshToken, String assertion, String subjectToken, String subjectTokenType, String actorToken, String actorTokenType, String scope, String resource, String boxSubjectType, String boxSubjectId, String boxSharedLink, PostOAuth2Token postOAuth2Token) throws ApiException {
        okhttp3.Call localVarCall = requestAccessTokenValidateBeforeCall(grantType, clientId, clientSecret, code, refreshToken, assertion, subjectToken, subjectTokenType, actorToken, actorTokenType, scope, resource, boxSubjectType, boxSubjectId, boxSharedLink, postOAuth2Token, null);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestAccessTokenAsync(String grantType, String clientId, String clientSecret, String code, String refreshToken, String assertion, String subjectToken, String subjectTokenType, String actorToken, String actorTokenType, String scope, String resource, String boxSubjectType, String boxSubjectId, String boxSharedLink, PostOAuth2Token postOAuth2Token, final ApiCallback<AccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestAccessTokenValidateBeforeCall(grantType, clientId, clientSecret, code, refreshToken, assertion, subjectToken, subjectTokenType, actorToken, actorTokenType, scope, resource, boxSubjectType, boxSubjectId, boxSharedLink, postOAuth2Token, _callback);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestAccessTokenRequestBuilder {
        private final String grantType;
        private String clientId;
        private String clientSecret;
        private String code;
        private String refreshToken;
        private String assertion;
        private String subjectToken;
        private String subjectTokenType;
        private String actorToken;
        private String actorTokenType;
        private String scope;
        private String resource;
        private String boxSubjectType;
        private String boxSubjectId;
        private String boxSharedLink;

        private RequestAccessTokenRequestBuilder(String grantType) {
            this.grantType = grantType;
        }

        /**
         * Set clientId
         * @param clientId The Client ID of the application requesting an access token.  Used in combination with &#x60;authorization_code&#x60;, &#x60;client_credentials&#x60;, or &#x60;urn:ietf:params:oauth:grant-type:jwt-bearer&#x60; as the &#x60;grant_type&#x60;. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set clientSecret
         * @param clientSecret The client secret of the application requesting an access token.  Used in combination with &#x60;authorization_code&#x60;, &#x60;client_credentials&#x60;, or &#x60;urn:ietf:params:oauth:grant-type:jwt-bearer&#x60; as the &#x60;grant_type&#x60;. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder clientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        
        /**
         * Set code
         * @param code The client-side authorization code passed to your application by Box in the browser redirect after the user has successfully granted your application permission to make API calls on their behalf.  Used in combination with &#x60;authorization_code&#x60; as the &#x60;grant_type&#x60;. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set refreshToken
         * @param refreshToken A refresh token used to get a new access token with.  Used in combination with &#x60;refresh_token&#x60; as the &#x60;grant_type&#x60;. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder refreshToken(String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }
        
        /**
         * Set assertion
         * @param assertion A JWT assertion for which to request a new access token.  Used in combination with &#x60;urn:ietf:params:oauth:grant-type:jwt-bearer&#x60; as the &#x60;grant_type&#x60;. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder assertion(String assertion) {
            this.assertion = assertion;
            return this;
        }
        
        /**
         * Set subjectToken
         * @param subjectToken The token to exchange for a downscoped token. This can be a regular access token, a JWT assertion, or an app token.  Used in combination with &#x60;urn:ietf:params:oauth:grant-type:token-exchange&#x60; as the &#x60;grant_type&#x60;. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder subjectToken(String subjectToken) {
            this.subjectToken = subjectToken;
            return this;
        }
        
        /**
         * Set subjectTokenType
         * @param subjectTokenType The type of &#x60;subject_token&#x60; passed in.  Used in combination with &#x60;urn:ietf:params:oauth:grant-type:token-exchange&#x60; as the &#x60;grant_type&#x60;. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder subjectTokenType(String subjectTokenType) {
            this.subjectTokenType = subjectTokenType;
            return this;
        }
        
        /**
         * Set actorToken
         * @param actorToken The token used to create an annotator token. This is a JWT assertion.  Used in combination with &#x60;urn:ietf:params:oauth:grant-type:token-exchange&#x60; as the &#x60;grant_type&#x60;. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder actorToken(String actorToken) {
            this.actorToken = actorToken;
            return this;
        }
        
        /**
         * Set actorTokenType
         * @param actorTokenType The type of &#x60;actor_token&#x60; passed in.  Used in combination with &#x60;urn:ietf:params:oauth:grant-type:token-exchange&#x60; as the &#x60;grant_type&#x60;. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder actorTokenType(String actorTokenType) {
            this.actorTokenType = actorTokenType;
            return this;
        }
        
        /**
         * Set scope
         * @param scope The space-delimited list of scopes that you want apply to the new access token.  The &#x60;subject_token&#x60; will need to have all of these scopes or the call will error with **401 Unauthorized**. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set resource
         * @param resource Full URL for the file that the token should be generated for. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder resource(String resource) {
            this.resource = resource;
            return this;
        }
        
        /**
         * Set boxSubjectType
         * @param boxSubjectType Used in combination with &#x60;client_credentials&#x60; as the &#x60;grant_type&#x60;. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder boxSubjectType(String boxSubjectType) {
            this.boxSubjectType = boxSubjectType;
            return this;
        }
        
        /**
         * Set boxSubjectId
         * @param boxSubjectId Used in combination with &#x60;client_credentials&#x60; as the &#x60;grant_type&#x60;. Value is determined by &#x60;box_subject_type&#x60;. If &#x60;user&#x60; use user ID and if &#x60;enterprise&#x60; use enterprise ID. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder boxSubjectId(String boxSubjectId) {
            this.boxSubjectId = boxSubjectId;
            return this;
        }
        
        /**
         * Set boxSharedLink
         * @param boxSharedLink Full URL of the shared link on the file or folder that the token should be generated for. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder boxSharedLink(String boxSharedLink) {
            this.boxSharedLink = boxSharedLink;
            return this;
        }
        
        /**
         * Build call for requestAccessToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new Access Token that can be used to make authenticated API calls by passing along the token in a authorization header as follows &#x60;Authorization: Bearer &lt;Token&gt;&#x60;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostOAuth2Token postOAuth2Token = buildBodyParams();
            return requestAccessTokenCall(grantType, clientId, clientSecret, code, refreshToken, assertion, subjectToken, subjectTokenType, actorToken, actorTokenType, scope, resource, boxSubjectType, boxSubjectId, boxSharedLink, postOAuth2Token, _callback);
        }

        private PostOAuth2Token buildBodyParams() {
            PostOAuth2Token postOAuth2Token = new PostOAuth2Token();
            if (this.grantType != null)
            postOAuth2Token.grantType(PostOAuth2Token.GrantTypeEnum.fromValue(this.grantType));
            postOAuth2Token.clientId(this.clientId);
            postOAuth2Token.clientSecret(this.clientSecret);
            postOAuth2Token.code(this.code);
            postOAuth2Token.refreshToken(this.refreshToken);
            postOAuth2Token.assertion(this.assertion);
            postOAuth2Token.subjectToken(this.subjectToken);
            if (this.subjectTokenType != null)
            postOAuth2Token.subjectTokenType(PostOAuth2Token.SubjectTokenTypeEnum.fromValue(this.subjectTokenType));
            postOAuth2Token.actorToken(this.actorToken);
            if (this.actorTokenType != null)
            postOAuth2Token.actorTokenType(PostOAuth2Token.ActorTokenTypeEnum.fromValue(this.actorTokenType));
            postOAuth2Token.scope(this.scope);
            postOAuth2Token.resource(this.resource);
            if (this.boxSubjectType != null)
            postOAuth2Token.boxSubjectType(PostOAuth2Token.BoxSubjectTypeEnum.fromValue(this.boxSubjectType));
            postOAuth2Token.boxSubjectId(this.boxSubjectId);
            postOAuth2Token.boxSharedLink(this.boxSharedLink);
            return postOAuth2Token;
        }

        /**
         * Execute requestAccessToken request
         * @return AccessToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new Access Token that can be used to make authenticated API calls by passing along the token in a authorization header as follows &#x60;Authorization: Bearer &lt;Token&gt;&#x60;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
         </table>
         */
        public AccessToken execute() throws ApiException {
            PostOAuth2Token postOAuth2Token = buildBodyParams();
            ApiResponse<AccessToken> localVarResp = requestAccessTokenWithHttpInfo(grantType, clientId, clientSecret, code, refreshToken, assertion, subjectToken, subjectTokenType, actorToken, actorTokenType, scope, resource, boxSubjectType, boxSubjectId, boxSharedLink, postOAuth2Token);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestAccessToken request with HTTP info returned
         * @return ApiResponse&lt;AccessToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new Access Token that can be used to make authenticated API calls by passing along the token in a authorization header as follows &#x60;Authorization: Bearer &lt;Token&gt;&#x60;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessToken> executeWithHttpInfo() throws ApiException {
            PostOAuth2Token postOAuth2Token = buildBodyParams();
            return requestAccessTokenWithHttpInfo(grantType, clientId, clientSecret, code, refreshToken, assertion, subjectToken, subjectTokenType, actorToken, actorTokenType, scope, resource, boxSubjectType, boxSubjectId, boxSharedLink, postOAuth2Token);
        }

        /**
         * Execute requestAccessToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new Access Token that can be used to make authenticated API calls by passing along the token in a authorization header as follows &#x60;Authorization: Bearer &lt;Token&gt;&#x60;. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessToken> _callback) throws ApiException {
            PostOAuth2Token postOAuth2Token = buildBodyParams();
            return requestAccessTokenAsync(grantType, clientId, clientSecret, code, refreshToken, assertion, subjectToken, subjectTokenType, actorToken, actorTokenType, scope, resource, boxSubjectType, boxSubjectId, boxSharedLink, postOAuth2Token, _callback);
        }
    }

    /**
     * Request access token
     * Request an Access Token using either a client-side obtained OAuth 2.0 authorization code or a server-side JWT assertion.  An Access Token is a string that enables Box to verify that a request belongs to an authorized session. In the normal order of operations you will begin by requesting authentication from the [authorize](https://raw.githubusercontent.com) endpoint and Box will send you an authorization code.  You will then send this code to this endpoint to exchange it for an Access Token. The returned Access Token can then be used to to make Box API calls.
     * @param grantType The type of request being made, either using a client-side obtained authorization code, a refresh token, a JWT assertion, client credentials grant or another access token for the purpose of downscoping a token. (required)
     * @return RequestAccessTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a new Access Token that can be used to make authenticated API calls by passing along the token in a authorization header as follows &#x60;Authorization: Bearer &lt;Token&gt;&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
     </table>
     */
    public RequestAccessTokenRequestBuilder requestAccessToken(String grantType) throws IllegalArgumentException {
        if (grantType == null) throw new IllegalArgumentException("\"grantType\" is required but got null");
            

        return new RequestAccessTokenRequestBuilder(grantType);
    }
    private okhttp3.Call revokeAccessTokenCall(String clientId, String clientSecret, String token, PostOAuth2Revoke postOAuth2Revoke, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.box.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postOAuth2Revoke;

        // create path and map variables
        String localVarPath = "/oauth2/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeAccessTokenValidateBeforeCall(String clientId, String clientSecret, String token, PostOAuth2Revoke postOAuth2Revoke, final ApiCallback _callback) throws ApiException {
        return revokeAccessTokenCall(clientId, clientSecret, token, postOAuth2Revoke, _callback);

    }


    private ApiResponse<Void> revokeAccessTokenWithHttpInfo(String clientId, String clientSecret, String token, PostOAuth2Revoke postOAuth2Revoke) throws ApiException {
        okhttp3.Call localVarCall = revokeAccessTokenValidateBeforeCall(clientId, clientSecret, token, postOAuth2Revoke, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeAccessTokenAsync(String clientId, String clientSecret, String token, PostOAuth2Revoke postOAuth2Revoke, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeAccessTokenValidateBeforeCall(clientId, clientSecret, token, postOAuth2Revoke, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeAccessTokenRequestBuilder {
        private String clientId;
        private String clientSecret;
        private String token;

        private RevokeAccessTokenRequestBuilder() {
        }

        /**
         * Set clientId
         * @param clientId The Client ID of the application requesting to revoke the access token. (optional)
         * @return RevokeAccessTokenRequestBuilder
         */
        public RevokeAccessTokenRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set clientSecret
         * @param clientSecret The client secret of the application requesting to revoke an access token. (optional)
         * @return RevokeAccessTokenRequestBuilder
         */
        public RevokeAccessTokenRequestBuilder clientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        
        /**
         * Set token
         * @param token The access token to revoke. (optional)
         * @return RevokeAccessTokenRequestBuilder
         */
        public RevokeAccessTokenRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Build call for revokeAccessToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an empty response when the token was successfully revoked. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostOAuth2Revoke postOAuth2Revoke = buildBodyParams();
            return revokeAccessTokenCall(clientId, clientSecret, token, postOAuth2Revoke, _callback);
        }

        private PostOAuth2Revoke buildBodyParams() {
            PostOAuth2Revoke postOAuth2Revoke = new PostOAuth2Revoke();
            postOAuth2Revoke.clientId(this.clientId);
            postOAuth2Revoke.clientSecret(this.clientSecret);
            postOAuth2Revoke.token(this.token);
            return postOAuth2Revoke;
        }

        /**
         * Execute revokeAccessToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an empty response when the token was successfully revoked. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PostOAuth2Revoke postOAuth2Revoke = buildBodyParams();
            revokeAccessTokenWithHttpInfo(clientId, clientSecret, token, postOAuth2Revoke);
        }

        /**
         * Execute revokeAccessToken request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an empty response when the token was successfully revoked. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PostOAuth2Revoke postOAuth2Revoke = buildBodyParams();
            return revokeAccessTokenWithHttpInfo(clientId, clientSecret, token, postOAuth2Revoke);
        }

        /**
         * Execute revokeAccessToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an empty response when the token was successfully revoked. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PostOAuth2Revoke postOAuth2Revoke = buildBodyParams();
            return revokeAccessTokenAsync(clientId, clientSecret, token, postOAuth2Revoke, _callback);
        }
    }

    /**
     * Revoke access token
     * Revoke an active Access Token, effectively logging a user out that has been previously authenticated.
     * @return RevokeAccessTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an empty response when the token was successfully revoked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An authentication error. </td><td>  -  </td></tr>
     </table>
     */
    public RevokeAccessTokenRequestBuilder revokeAccessToken() throws IllegalArgumentException {
        return new RevokeAccessTokenRequestBuilder();
    }
}
