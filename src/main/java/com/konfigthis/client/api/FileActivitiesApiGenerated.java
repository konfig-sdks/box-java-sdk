/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Activities;
import com.konfigthis.client.model.ClientError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FileActivitiesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileActivitiesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FileActivitiesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listByFileIdCall(String fileId, List<String> activityTypes, List<String> commentFields, List<String> versionsFields, List<String> annotationFields, List<String> taskFields, List<String> appActivityFields, String replyLimit, String status, Boolean enableReplies, Long limit, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file_activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (activityTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "activity_types", activityTypes));
        }

        if (commentFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "comment_fields", commentFields));
        }

        if (versionsFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "versions_fields", versionsFields));
        }

        if (annotationFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "annotation_fields", annotationFields));
        }

        if (taskFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "task_fields", taskFields));
        }

        if (appActivityFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "app_activity_fields", appActivityFields));
        }

        if (replyLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reply_limit", replyLimit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (enableReplies != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable_replies", enableReplies));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByFileIdValidateBeforeCall(String fileId, List<String> activityTypes, List<String> commentFields, List<String> versionsFields, List<String> annotationFields, List<String> taskFields, List<String> appActivityFields, String replyLimit, String status, Boolean enableReplies, Long limit, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling listByFileId(Async)");
        }

        return listByFileIdCall(fileId, activityTypes, commentFields, versionsFields, annotationFields, taskFields, appActivityFields, replyLimit, status, enableReplies, limit, marker, _callback);

    }


    private ApiResponse<Activities> listByFileIdWithHttpInfo(String fileId, List<String> activityTypes, List<String> commentFields, List<String> versionsFields, List<String> annotationFields, List<String> taskFields, List<String> appActivityFields, String replyLimit, String status, Boolean enableReplies, Long limit, String marker) throws ApiException {
        okhttp3.Call localVarCall = listByFileIdValidateBeforeCall(fileId, activityTypes, commentFields, versionsFields, annotationFields, taskFields, appActivityFields, replyLimit, status, enableReplies, limit, marker, null);
        Type localVarReturnType = new TypeToken<Activities>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByFileIdAsync(String fileId, List<String> activityTypes, List<String> commentFields, List<String> versionsFields, List<String> annotationFields, List<String> taskFields, List<String> appActivityFields, String replyLimit, String status, Boolean enableReplies, Long limit, String marker, final ApiCallback<Activities> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByFileIdValidateBeforeCall(fileId, activityTypes, commentFields, versionsFields, annotationFields, taskFields, appActivityFields, replyLimit, status, enableReplies, limit, marker, _callback);
        Type localVarReturnType = new TypeToken<Activities>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByFileIdRequestBuilder {
        private final String fileId;
        private List<String> activityTypes;
        private List<String> commentFields;
        private List<String> versionsFields;
        private List<String> annotationFields;
        private List<String> taskFields;
        private List<String> appActivityFields;
        private String replyLimit;
        private String status;
        private Boolean enableReplies;
        private Long limit;
        private String marker;

        private ListByFileIdRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Set activityTypes
         * @param activityTypes Comma-separated list of activity types to return. This field is ignored if marker is passed in. Defaults to all activity types. (optional)
         * @return ListByFileIdRequestBuilder
         */
        public ListByFileIdRequestBuilder activityTypes(List<String> activityTypes) {
            this.activityTypes = activityTypes;
            return this;
        }
        
        /**
         * Set commentFields
         * @param commentFields fields that are required for comments (optional)
         * @return ListByFileIdRequestBuilder
         */
        public ListByFileIdRequestBuilder commentFields(List<String> commentFields) {
            this.commentFields = commentFields;
            return this;
        }
        
        /**
         * Set versionsFields
         * @param versionsFields fields that are required for versions (optional)
         * @return ListByFileIdRequestBuilder
         */
        public ListByFileIdRequestBuilder versionsFields(List<String> versionsFields) {
            this.versionsFields = versionsFields;
            return this;
        }
        
        /**
         * Set annotationFields
         * @param annotationFields fields that are required for annotations (optional)
         * @return ListByFileIdRequestBuilder
         */
        public ListByFileIdRequestBuilder annotationFields(List<String> annotationFields) {
            this.annotationFields = annotationFields;
            return this;
        }
        
        /**
         * Set taskFields
         * @param taskFields fields that are required for tasks (optional)
         * @return ListByFileIdRequestBuilder
         */
        public ListByFileIdRequestBuilder taskFields(List<String> taskFields) {
            this.taskFields = taskFields;
            return this;
        }
        
        /**
         * Set appActivityFields
         * @param appActivityFields fields that are required for &#x60;app_activity&#x60; (optional)
         * @return ListByFileIdRequestBuilder
         */
        public ListByFileIdRequestBuilder appActivityFields(List<String> appActivityFields) {
            this.appActivityFields = appActivityFields;
            return this;
        }
        
        /**
         * Set replyLimit
         * @param replyLimit maximum number of replies the response should contain per each top level activity[annotation, comment] (optional)
         * @return ListByFileIdRequestBuilder
         */
        public ListByFileIdRequestBuilder replyLimit(String replyLimit) {
            this.replyLimit = replyLimit;
            return this;
        }
        
        /**
         * Set status
         * @param status Used to filter an annotation or a comment based on the status (optional)
         * @return ListByFileIdRequestBuilder
         */
        public ListByFileIdRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set enableReplies
         * @param enableReplies Whether or not replies should be returned (optional)
         * @return ListByFileIdRequestBuilder
         */
        public ListByFileIdRequestBuilder enableReplies(Boolean enableReplies) {
            this.enableReplies = enableReplies;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListByFileIdRequestBuilder
         */
        public ListByFileIdRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListByFileIdRequestBuilder
         */
        public ListByFileIdRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Build call for listByFileId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Results of activity items for the requested file ID </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByFileIdCall(fileId, activityTypes, commentFields, versionsFields, annotationFields, taskFields, appActivityFields, replyLimit, status, enableReplies, limit, marker, _callback);
        }


        /**
         * Execute listByFileId request
         * @return Activities
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Results of activity items for the requested file ID </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public Activities execute() throws ApiException {
            ApiResponse<Activities> localVarResp = listByFileIdWithHttpInfo(fileId, activityTypes, commentFields, versionsFields, annotationFields, taskFields, appActivityFields, replyLimit, status, enableReplies, limit, marker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByFileId request with HTTP info returned
         * @return ApiResponse&lt;Activities&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Results of activity items for the requested file ID </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Activities> executeWithHttpInfo() throws ApiException {
            return listByFileIdWithHttpInfo(fileId, activityTypes, commentFields, versionsFields, annotationFields, taskFields, appActivityFields, replyLimit, status, enableReplies, limit, marker);
        }

        /**
         * Execute listByFileId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Results of activity items for the requested file ID </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Activities> _callback) throws ApiException {
            return listByFileIdAsync(fileId, activityTypes, commentFields, versionsFields, annotationFields, taskFields, appActivityFields, replyLimit, status, enableReplies, limit, marker, _callback);
        }
    }

    /**
     * List file activities
     * List file activities by file ID.
     * @param fileId File ID for which to retrieve activity (required)
     * @return ListByFileIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results of activity items for the requested file ID </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ListByFileIdRequestBuilder listByFileId(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new ListByFileIdRequestBuilder(fileId);
    }
}
