/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FileFull;
import com.konfigthis.client.model.SharedLinksFilesAddSharedLinkToFileRequest;
import com.konfigthis.client.model.SharedLinksFilesAddSharedLinkToFileRequestSharedLink;
import com.konfigthis.client.model.SharedLinksFilesRemoveSharedLinkRequest;
import com.konfigthis.client.model.SharedLinksFilesUpdateLinkOnFileRequest;
import com.konfigthis.client.model.SharedLinksFilesUpdateLinkOnFileRequestSharedLink;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SharedLinksFilesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SharedLinksFilesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SharedLinksFilesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addSharedLinkToFileCall(String fileId, String fields, SharedLinksFilesAddSharedLinkToFileRequest sharedLinksFilesAddSharedLinkToFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedLinksFilesAddSharedLinkToFileRequest;

        // create path and map variables
        String localVarPath = "/files/{file_id}#add_shared_link"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSharedLinkToFileValidateBeforeCall(String fileId, String fields, SharedLinksFilesAddSharedLinkToFileRequest sharedLinksFilesAddSharedLinkToFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling addSharedLinkToFile(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling addSharedLinkToFile(Async)");
        }

        return addSharedLinkToFileCall(fileId, fields, sharedLinksFilesAddSharedLinkToFileRequest, _callback);

    }


    private ApiResponse<FileFull> addSharedLinkToFileWithHttpInfo(String fileId, String fields, SharedLinksFilesAddSharedLinkToFileRequest sharedLinksFilesAddSharedLinkToFileRequest) throws ApiException {
        okhttp3.Call localVarCall = addSharedLinkToFileValidateBeforeCall(fileId, fields, sharedLinksFilesAddSharedLinkToFileRequest, null);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addSharedLinkToFileAsync(String fileId, String fields, SharedLinksFilesAddSharedLinkToFileRequest sharedLinksFilesAddSharedLinkToFileRequest, final ApiCallback<FileFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSharedLinkToFileValidateBeforeCall(fileId, fields, sharedLinksFilesAddSharedLinkToFileRequest, _callback);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddSharedLinkToFileRequestBuilder {
        private final String fileId;
        private final String fields;
        private SharedLinksFilesAddSharedLinkToFileRequestSharedLink sharedLink;

        private AddSharedLinkToFileRequestBuilder(String fileId, String fields) {
            this.fileId = fileId;
            this.fields = fields;
        }

        /**
         * Set sharedLink
         * @param sharedLink  (optional)
         * @return AddSharedLinkToFileRequestBuilder
         */
        public AddSharedLinkToFileRequestBuilder sharedLink(SharedLinksFilesAddSharedLinkToFileRequestSharedLink sharedLink) {
            this.sharedLink = sharedLink;
            return this;
        }
        
        /**
         * Build call for addSharedLinkToFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a file with a new shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SharedLinksFilesAddSharedLinkToFileRequest sharedLinksFilesAddSharedLinkToFileRequest = buildBodyParams();
            return addSharedLinkToFileCall(fileId, fields, sharedLinksFilesAddSharedLinkToFileRequest, _callback);
        }

        private SharedLinksFilesAddSharedLinkToFileRequest buildBodyParams() {
            SharedLinksFilesAddSharedLinkToFileRequest sharedLinksFilesAddSharedLinkToFileRequest = new SharedLinksFilesAddSharedLinkToFileRequest();
            sharedLinksFilesAddSharedLinkToFileRequest.sharedLink(this.sharedLink);
            return sharedLinksFilesAddSharedLinkToFileRequest;
        }

        /**
         * Execute addSharedLinkToFile request
         * @return FileFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a file with a new shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileFull execute() throws ApiException {
            SharedLinksFilesAddSharedLinkToFileRequest sharedLinksFilesAddSharedLinkToFileRequest = buildBodyParams();
            ApiResponse<FileFull> localVarResp = addSharedLinkToFileWithHttpInfo(fileId, fields, sharedLinksFilesAddSharedLinkToFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addSharedLinkToFile request with HTTP info returned
         * @return ApiResponse&lt;FileFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a file with a new shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileFull> executeWithHttpInfo() throws ApiException {
            SharedLinksFilesAddSharedLinkToFileRequest sharedLinksFilesAddSharedLinkToFileRequest = buildBodyParams();
            return addSharedLinkToFileWithHttpInfo(fileId, fields, sharedLinksFilesAddSharedLinkToFileRequest);
        }

        /**
         * Execute addSharedLinkToFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a file with a new shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileFull> _callback) throws ApiException {
            SharedLinksFilesAddSharedLinkToFileRequest sharedLinksFilesAddSharedLinkToFileRequest = buildBodyParams();
            return addSharedLinkToFileAsync(fileId, fields, sharedLinksFilesAddSharedLinkToFileRequest, _callback);
        }
    }

    /**
     * Add shared link to file
     * Adds a shared link to a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item. (required)
     * @return AddSharedLinkToFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the base representation of a file with a new shared link attached. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public AddSharedLinkToFileRequestBuilder addSharedLinkToFile(String fileId, String fields) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        return new AddSharedLinkToFileRequestBuilder(fileId, fields);
    }
    private okhttp3.Call getBySharedLinkCall(String boxapi, String ifNoneMatch, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shared_items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("if-none-match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (boxapi != null) {
            localVarHeaderParams.put("boxapi", localVarApiClient.parameterToString(boxapi));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBySharedLinkValidateBeforeCall(String boxapi, String ifNoneMatch, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boxapi' is set
        if (boxapi == null) {
            throw new ApiException("Missing the required parameter 'boxapi' when calling getBySharedLink(Async)");
        }

        return getBySharedLinkCall(boxapi, ifNoneMatch, fields, _callback);

    }


    private ApiResponse<FileFull> getBySharedLinkWithHttpInfo(String boxapi, String ifNoneMatch, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getBySharedLinkValidateBeforeCall(boxapi, ifNoneMatch, fields, null);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBySharedLinkAsync(String boxapi, String ifNoneMatch, List<String> fields, final ApiCallback<FileFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBySharedLinkValidateBeforeCall(boxapi, ifNoneMatch, fields, _callback);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBySharedLinkRequestBuilder {
        private final String boxapi;
        private String ifNoneMatch;
        private List<String> fields;

        private GetBySharedLinkRequestBuilder(String boxapi) {
            this.boxapi = boxapi;
        }

        /**
         * Set ifNoneMatch
         * @param ifNoneMatch Ensures an item is only returned if it has changed.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;304 Not Modified&#x60; if the item has not changed since. (optional)
         * @return GetBySharedLinkRequestBuilder
         */
        public GetBySharedLinkRequestBuilder ifNoneMatch(String ifNoneMatch) {
            this.ifNoneMatch = ifNoneMatch;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return GetBySharedLinkRequestBuilder
         */
        public GetBySharedLinkRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getBySharedLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a full file resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBySharedLinkCall(boxapi, ifNoneMatch, fields, _callback);
        }


        /**
         * Execute getBySharedLink request
         * @return FileFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a full file resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileFull execute() throws ApiException {
            ApiResponse<FileFull> localVarResp = getBySharedLinkWithHttpInfo(boxapi, ifNoneMatch, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBySharedLink request with HTTP info returned
         * @return ApiResponse&lt;FileFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a full file resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileFull> executeWithHttpInfo() throws ApiException {
            return getBySharedLinkWithHttpInfo(boxapi, ifNoneMatch, fields);
        }

        /**
         * Execute getBySharedLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a full file resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileFull> _callback) throws ApiException {
            return getBySharedLinkAsync(boxapi, ifNoneMatch, fields, _callback);
        }
    }

    /**
     * Find file for shared link
     * Returns the file represented by a shared link.  A shared file can be represented by a shared link, which can originate within the current enterprise or within another.  This endpoint allows an application to retrieve information about a shared file when only given a shared link.  The &#x60;shared_link_permission_options&#x60; array field can be returned by requesting it in the &#x60;fields&#x60; query parameter.
     * @param boxapi A header containing the shared link and optional password for the shared link.  The format for this header is as follows.  &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60; (required)
     * @return GetBySharedLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a full file resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetBySharedLinkRequestBuilder getBySharedLink(String boxapi) throws IllegalArgumentException {
        if (boxapi == null) throw new IllegalArgumentException("\"boxapi\" is required but got null");
            

        return new GetBySharedLinkRequestBuilder(boxapi);
    }
    private okhttp3.Call getSharedLinkInfoCall(String fileId, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}#get_shared_link"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSharedLinkInfoValidateBeforeCall(String fileId, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getSharedLinkInfo(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling getSharedLinkInfo(Async)");
        }

        return getSharedLinkInfoCall(fileId, fields, _callback);

    }


    private ApiResponse<FileFull> getSharedLinkInfoWithHttpInfo(String fileId, String fields) throws ApiException {
        okhttp3.Call localVarCall = getSharedLinkInfoValidateBeforeCall(fileId, fields, null);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSharedLinkInfoAsync(String fileId, String fields, final ApiCallback<FileFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSharedLinkInfoValidateBeforeCall(fileId, fields, _callback);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSharedLinkInfoRequestBuilder {
        private final String fileId;
        private final String fields;

        private GetSharedLinkInfoRequestBuilder(String fileId, String fields) {
            this.fileId = fileId;
            this.fields = fields;
        }

        /**
         * Build call for getSharedLinkInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a file with the additional shared link information. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSharedLinkInfoCall(fileId, fields, _callback);
        }


        /**
         * Execute getSharedLinkInfo request
         * @return FileFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a file with the additional shared link information. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileFull execute() throws ApiException {
            ApiResponse<FileFull> localVarResp = getSharedLinkInfoWithHttpInfo(fileId, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSharedLinkInfo request with HTTP info returned
         * @return ApiResponse&lt;FileFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a file with the additional shared link information. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileFull> executeWithHttpInfo() throws ApiException {
            return getSharedLinkInfoWithHttpInfo(fileId, fields);
        }

        /**
         * Execute getSharedLinkInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a file with the additional shared link information. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileFull> _callback) throws ApiException {
            return getSharedLinkInfoAsync(fileId, fields, _callback);
        }
    }

    /**
     * Get shared link for file
     * Gets the information for a shared link on a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item. (required)
     * @return GetSharedLinkInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the base representation of a file with the additional shared link information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetSharedLinkInfoRequestBuilder getSharedLinkInfo(String fileId, String fields) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        return new GetSharedLinkInfoRequestBuilder(fileId, fields);
    }
    private okhttp3.Call removeSharedLinkCall(String fileId, String fields, SharedLinksFilesRemoveSharedLinkRequest sharedLinksFilesRemoveSharedLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedLinksFilesRemoveSharedLinkRequest;

        // create path and map variables
        String localVarPath = "/files/{file_id}#remove_shared_link"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSharedLinkValidateBeforeCall(String fileId, String fields, SharedLinksFilesRemoveSharedLinkRequest sharedLinksFilesRemoveSharedLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling removeSharedLink(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling removeSharedLink(Async)");
        }

        return removeSharedLinkCall(fileId, fields, sharedLinksFilesRemoveSharedLinkRequest, _callback);

    }


    private ApiResponse<FileFull> removeSharedLinkWithHttpInfo(String fileId, String fields, SharedLinksFilesRemoveSharedLinkRequest sharedLinksFilesRemoveSharedLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = removeSharedLinkValidateBeforeCall(fileId, fields, sharedLinksFilesRemoveSharedLinkRequest, null);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeSharedLinkAsync(String fileId, String fields, SharedLinksFilesRemoveSharedLinkRequest sharedLinksFilesRemoveSharedLinkRequest, final ApiCallback<FileFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSharedLinkValidateBeforeCall(fileId, fields, sharedLinksFilesRemoveSharedLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveSharedLinkRequestBuilder {
        private final String fileId;
        private final String fields;
        private Object sharedLink;

        private RemoveSharedLinkRequestBuilder(String fileId, String fields) {
            this.fileId = fileId;
            this.fields = fields;
        }

        /**
         * Set sharedLink
         * @param sharedLink By setting this value to &#x60;null&#x60;, the shared link is removed from the file. (optional)
         * @return RemoveSharedLinkRequestBuilder
         */
        public RemoveSharedLinkRequestBuilder sharedLink(Object sharedLink) {
            this.sharedLink = sharedLink;
            return this;
        }
        
        /**
         * Build call for removeSharedLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of a file, with the shared link removed. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SharedLinksFilesRemoveSharedLinkRequest sharedLinksFilesRemoveSharedLinkRequest = buildBodyParams();
            return removeSharedLinkCall(fileId, fields, sharedLinksFilesRemoveSharedLinkRequest, _callback);
        }

        private SharedLinksFilesRemoveSharedLinkRequest buildBodyParams() {
            SharedLinksFilesRemoveSharedLinkRequest sharedLinksFilesRemoveSharedLinkRequest = new SharedLinksFilesRemoveSharedLinkRequest();
            sharedLinksFilesRemoveSharedLinkRequest.sharedLink(this.sharedLink);
            return sharedLinksFilesRemoveSharedLinkRequest;
        }

        /**
         * Execute removeSharedLink request
         * @return FileFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of a file, with the shared link removed. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileFull execute() throws ApiException {
            SharedLinksFilesRemoveSharedLinkRequest sharedLinksFilesRemoveSharedLinkRequest = buildBodyParams();
            ApiResponse<FileFull> localVarResp = removeSharedLinkWithHttpInfo(fileId, fields, sharedLinksFilesRemoveSharedLinkRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeSharedLink request with HTTP info returned
         * @return ApiResponse&lt;FileFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of a file, with the shared link removed. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileFull> executeWithHttpInfo() throws ApiException {
            SharedLinksFilesRemoveSharedLinkRequest sharedLinksFilesRemoveSharedLinkRequest = buildBodyParams();
            return removeSharedLinkWithHttpInfo(fileId, fields, sharedLinksFilesRemoveSharedLinkRequest);
        }

        /**
         * Execute removeSharedLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of a file, with the shared link removed. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileFull> _callback) throws ApiException {
            SharedLinksFilesRemoveSharedLinkRequest sharedLinksFilesRemoveSharedLinkRequest = buildBodyParams();
            return removeSharedLinkAsync(fileId, fields, sharedLinksFilesRemoveSharedLinkRequest, _callback);
        }
    }

    /**
     * Remove shared link from file
     * Removes a shared link from a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item. (required)
     * @return RemoveSharedLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a basic representation of a file, with the shared link removed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSharedLinkRequestBuilder removeSharedLink(String fileId, String fields) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        return new RemoveSharedLinkRequestBuilder(fileId, fields);
    }
    private okhttp3.Call updateLinkOnFileCall(String fileId, String fields, SharedLinksFilesUpdateLinkOnFileRequest sharedLinksFilesUpdateLinkOnFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedLinksFilesUpdateLinkOnFileRequest;

        // create path and map variables
        String localVarPath = "/files/{file_id}#update_shared_link"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLinkOnFileValidateBeforeCall(String fileId, String fields, SharedLinksFilesUpdateLinkOnFileRequest sharedLinksFilesUpdateLinkOnFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling updateLinkOnFile(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling updateLinkOnFile(Async)");
        }

        return updateLinkOnFileCall(fileId, fields, sharedLinksFilesUpdateLinkOnFileRequest, _callback);

    }


    private ApiResponse<FileFull> updateLinkOnFileWithHttpInfo(String fileId, String fields, SharedLinksFilesUpdateLinkOnFileRequest sharedLinksFilesUpdateLinkOnFileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLinkOnFileValidateBeforeCall(fileId, fields, sharedLinksFilesUpdateLinkOnFileRequest, null);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateLinkOnFileAsync(String fileId, String fields, SharedLinksFilesUpdateLinkOnFileRequest sharedLinksFilesUpdateLinkOnFileRequest, final ApiCallback<FileFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLinkOnFileValidateBeforeCall(fileId, fields, sharedLinksFilesUpdateLinkOnFileRequest, _callback);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateLinkOnFileRequestBuilder {
        private final String fileId;
        private final String fields;
        private SharedLinksFilesUpdateLinkOnFileRequestSharedLink sharedLink;

        private UpdateLinkOnFileRequestBuilder(String fileId, String fields) {
            this.fileId = fileId;
            this.fields = fields;
        }

        /**
         * Set sharedLink
         * @param sharedLink  (optional)
         * @return UpdateLinkOnFileRequestBuilder
         */
        public UpdateLinkOnFileRequestBuilder sharedLink(SharedLinksFilesUpdateLinkOnFileRequestSharedLink sharedLink) {
            this.sharedLink = sharedLink;
            return this;
        }
        
        /**
         * Build call for updateLinkOnFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of the file, with the updated shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SharedLinksFilesUpdateLinkOnFileRequest sharedLinksFilesUpdateLinkOnFileRequest = buildBodyParams();
            return updateLinkOnFileCall(fileId, fields, sharedLinksFilesUpdateLinkOnFileRequest, _callback);
        }

        private SharedLinksFilesUpdateLinkOnFileRequest buildBodyParams() {
            SharedLinksFilesUpdateLinkOnFileRequest sharedLinksFilesUpdateLinkOnFileRequest = new SharedLinksFilesUpdateLinkOnFileRequest();
            sharedLinksFilesUpdateLinkOnFileRequest.sharedLink(this.sharedLink);
            return sharedLinksFilesUpdateLinkOnFileRequest;
        }

        /**
         * Execute updateLinkOnFile request
         * @return FileFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of the file, with the updated shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileFull execute() throws ApiException {
            SharedLinksFilesUpdateLinkOnFileRequest sharedLinksFilesUpdateLinkOnFileRequest = buildBodyParams();
            ApiResponse<FileFull> localVarResp = updateLinkOnFileWithHttpInfo(fileId, fields, sharedLinksFilesUpdateLinkOnFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateLinkOnFile request with HTTP info returned
         * @return ApiResponse&lt;FileFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of the file, with the updated shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileFull> executeWithHttpInfo() throws ApiException {
            SharedLinksFilesUpdateLinkOnFileRequest sharedLinksFilesUpdateLinkOnFileRequest = buildBodyParams();
            return updateLinkOnFileWithHttpInfo(fileId, fields, sharedLinksFilesUpdateLinkOnFileRequest);
        }

        /**
         * Execute updateLinkOnFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of the file, with the updated shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileFull> _callback) throws ApiException {
            SharedLinksFilesUpdateLinkOnFileRequest sharedLinksFilesUpdateLinkOnFileRequest = buildBodyParams();
            return updateLinkOnFileAsync(fileId, fields, sharedLinksFilesUpdateLinkOnFileRequest, _callback);
        }
    }

    /**
     * Update shared link on file
     * Updates a shared link on a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item. (required)
     * @return UpdateLinkOnFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a basic representation of the file, with the updated shared link attached. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLinkOnFileRequestBuilder updateLinkOnFile(String fileId, String fields) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        return new UpdateLinkOnFileRequestBuilder(fileId, fields);
    }
}
