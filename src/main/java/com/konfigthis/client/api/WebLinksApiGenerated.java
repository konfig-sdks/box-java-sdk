/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.WebLink;
import com.konfigthis.client.model.WebLinksCreateObjectRequest;
import com.konfigthis.client.model.WebLinksCreateObjectRequestParent;
import com.konfigthis.client.model.WebLinksUpdateObjectRequest;
import com.konfigthis.client.model.WebLinksUpdateObjectRequestParent;
import com.konfigthis.client.model.WebLinksUpdateObjectRequestSharedLink;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebLinksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebLinksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebLinksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createObjectCall(WebLinksCreateObjectRequest webLinksCreateObjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webLinksCreateObjectRequest;

        // create path and map variables
        String localVarPath = "/web_links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createObjectValidateBeforeCall(WebLinksCreateObjectRequest webLinksCreateObjectRequest, final ApiCallback _callback) throws ApiException {
        return createObjectCall(webLinksCreateObjectRequest, _callback);

    }


    private ApiResponse<WebLink> createObjectWithHttpInfo(WebLinksCreateObjectRequest webLinksCreateObjectRequest) throws ApiException {
        okhttp3.Call localVarCall = createObjectValidateBeforeCall(webLinksCreateObjectRequest, null);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createObjectAsync(WebLinksCreateObjectRequest webLinksCreateObjectRequest, final ApiCallback<WebLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = createObjectValidateBeforeCall(webLinksCreateObjectRequest, _callback);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateObjectRequestBuilder {
        private final String url;
        private final WebLinksCreateObjectRequestParent parent;
        private String description;
        private String name;

        private CreateObjectRequestBuilder(String url, WebLinksCreateObjectRequestParent parent) {
            this.url = url;
            this.parent = parent;
        }

        /**
         * Set description
         * @param description Description of the web link. (optional)
         * @return CreateObjectRequestBuilder
         */
        public CreateObjectRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the web link. Defaults to the URL if not set. (optional)
         * @return CreateObjectRequestBuilder
         */
        public CreateObjectRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the newly created web link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebLinksCreateObjectRequest webLinksCreateObjectRequest = buildBodyParams();
            return createObjectCall(webLinksCreateObjectRequest, _callback);
        }

        private WebLinksCreateObjectRequest buildBodyParams() {
            WebLinksCreateObjectRequest webLinksCreateObjectRequest = new WebLinksCreateObjectRequest();
            webLinksCreateObjectRequest.description(this.description);
            webLinksCreateObjectRequest.url(this.url);
            webLinksCreateObjectRequest.parent(this.parent);
            webLinksCreateObjectRequest.name(this.name);
            return webLinksCreateObjectRequest;
        }

        /**
         * Execute createObject request
         * @return WebLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the newly created web link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public WebLink execute() throws ApiException {
            WebLinksCreateObjectRequest webLinksCreateObjectRequest = buildBodyParams();
            ApiResponse<WebLink> localVarResp = createObjectWithHttpInfo(webLinksCreateObjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createObject request with HTTP info returned
         * @return ApiResponse&lt;WebLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the newly created web link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebLink> executeWithHttpInfo() throws ApiException {
            WebLinksCreateObjectRequest webLinksCreateObjectRequest = buildBodyParams();
            return createObjectWithHttpInfo(webLinksCreateObjectRequest);
        }

        /**
         * Execute createObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the newly created web link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebLink> _callback) throws ApiException {
            WebLinksCreateObjectRequest webLinksCreateObjectRequest = buildBodyParams();
            return createObjectAsync(webLinksCreateObjectRequest, _callback);
        }
    }

    /**
     * Create web link
     * Creates a web link object within a folder.
     * @return CreateObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created web link object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateObjectRequestBuilder createObject(String url, WebLinksCreateObjectRequestParent parent) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        if (parent == null) throw new IllegalArgumentException("\"parent\" is required but got null");
        return new CreateObjectRequestBuilder(url, parent);
    }
    private okhttp3.Call getInformationCall(String webLinkId, String boxapi, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/web_links/{web_link_id}"
            .replace("{" + "web_link_id" + "}", localVarApiClient.escapeString(webLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (boxapi != null) {
            localVarHeaderParams.put("boxapi", localVarApiClient.parameterToString(boxapi));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInformationValidateBeforeCall(String webLinkId, String boxapi, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webLinkId' is set
        if (webLinkId == null) {
            throw new ApiException("Missing the required parameter 'webLinkId' when calling getInformation(Async)");
        }

        return getInformationCall(webLinkId, boxapi, _callback);

    }


    private ApiResponse<WebLink> getInformationWithHttpInfo(String webLinkId, String boxapi) throws ApiException {
        okhttp3.Call localVarCall = getInformationValidateBeforeCall(webLinkId, boxapi, null);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInformationAsync(String webLinkId, String boxapi, final ApiCallback<WebLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInformationValidateBeforeCall(webLinkId, boxapi, _callback);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInformationRequestBuilder {
        private final String webLinkId;
        private String boxapi;

        private GetInformationRequestBuilder(String webLinkId) {
            this.webLinkId = webLinkId;
        }

        /**
         * Set boxapi
         * @param boxapi The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format &#x60;shared_link&#x3D;[link]&#x60; or if a password is required then use &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60;.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item. (optional)
         * @return GetInformationRequestBuilder
         */
        public GetInformationRequestBuilder boxapi(String boxapi) {
            this.boxapi = boxapi;
            return this;
        }
        
        /**
         * Build call for getInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the web link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInformationCall(webLinkId, boxapi, _callback);
        }


        /**
         * Execute getInformation request
         * @return WebLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the web link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public WebLink execute() throws ApiException {
            ApiResponse<WebLink> localVarResp = getInformationWithHttpInfo(webLinkId, boxapi);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInformation request with HTTP info returned
         * @return ApiResponse&lt;WebLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the web link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebLink> executeWithHttpInfo() throws ApiException {
            return getInformationWithHttpInfo(webLinkId, boxapi);
        }

        /**
         * Execute getInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the web link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebLink> _callback) throws ApiException {
            return getInformationAsync(webLinkId, boxapi, _callback);
        }
    }

    /**
     * Get web link
     * Retrieve information about a web link.
     * @param webLinkId The ID of the web link. (required)
     * @return GetInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the web link object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetInformationRequestBuilder getInformation(String webLinkId) throws IllegalArgumentException {
        if (webLinkId == null) throw new IllegalArgumentException("\"webLinkId\" is required but got null");
            

        return new GetInformationRequestBuilder(webLinkId);
    }
    private okhttp3.Call removeLinkCall(String webLinkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/web_links/{web_link_id}"
            .replace("{" + "web_link_id" + "}", localVarApiClient.escapeString(webLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLinkValidateBeforeCall(String webLinkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webLinkId' is set
        if (webLinkId == null) {
            throw new ApiException("Missing the required parameter 'webLinkId' when calling removeLink(Async)");
        }

        return removeLinkCall(webLinkId, _callback);

    }


    private ApiResponse<Void> removeLinkWithHttpInfo(String webLinkId) throws ApiException {
        okhttp3.Call localVarCall = removeLinkValidateBeforeCall(webLinkId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeLinkAsync(String webLinkId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLinkValidateBeforeCall(webLinkId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveLinkRequestBuilder {
        private final String webLinkId;

        private RemoveLinkRequestBuilder(String webLinkId) {
            this.webLinkId = webLinkId;
        }

        /**
         * Build call for removeLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> An empty response will be returned when the web link was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeLinkCall(webLinkId, _callback);
        }


        /**
         * Execute removeLink request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> An empty response will be returned when the web link was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeLinkWithHttpInfo(webLinkId);
        }

        /**
         * Execute removeLink request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> An empty response will be returned when the web link was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeLinkWithHttpInfo(webLinkId);
        }

        /**
         * Execute removeLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> An empty response will be returned when the web link was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeLinkAsync(webLinkId, _callback);
        }
    }

    /**
     * Remove web link
     * Deletes a web link.
     * @param webLinkId The ID of the web link. (required)
     * @return RemoveLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response will be returned when the web link was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveLinkRequestBuilder removeLink(String webLinkId) throws IllegalArgumentException {
        if (webLinkId == null) throw new IllegalArgumentException("\"webLinkId\" is required but got null");
            

        return new RemoveLinkRequestBuilder(webLinkId);
    }
    private okhttp3.Call updateObjectCall(String webLinkId, WebLinksUpdateObjectRequest webLinksUpdateObjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webLinksUpdateObjectRequest;

        // create path and map variables
        String localVarPath = "/web_links/{web_link_id}"
            .replace("{" + "web_link_id" + "}", localVarApiClient.escapeString(webLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateObjectValidateBeforeCall(String webLinkId, WebLinksUpdateObjectRequest webLinksUpdateObjectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webLinkId' is set
        if (webLinkId == null) {
            throw new ApiException("Missing the required parameter 'webLinkId' when calling updateObject(Async)");
        }

        return updateObjectCall(webLinkId, webLinksUpdateObjectRequest, _callback);

    }


    private ApiResponse<WebLink> updateObjectWithHttpInfo(String webLinkId, WebLinksUpdateObjectRequest webLinksUpdateObjectRequest) throws ApiException {
        okhttp3.Call localVarCall = updateObjectValidateBeforeCall(webLinkId, webLinksUpdateObjectRequest, null);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateObjectAsync(String webLinkId, WebLinksUpdateObjectRequest webLinksUpdateObjectRequest, final ApiCallback<WebLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateObjectValidateBeforeCall(webLinkId, webLinksUpdateObjectRequest, _callback);
        Type localVarReturnType = new TypeToken<WebLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateObjectRequestBuilder {
        private final String webLinkId;
        private String description;
        private String url;
        private WebLinksUpdateObjectRequestParent parent;
        private String name;
        private WebLinksUpdateObjectRequestSharedLink sharedLink;

        private UpdateObjectRequestBuilder(String webLinkId) {
            this.webLinkId = webLinkId;
        }

        /**
         * Set description
         * @param description A new description of the web link. (optional)
         * @return UpdateObjectRequestBuilder
         */
        public UpdateObjectRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set url
         * @param url The new URL that the web link links to. Must start with &#x60;\\\&quot;http://\\\&quot;&#x60; or &#x60;\\\&quot;https://\\\&quot;&#x60;. (optional)
         * @return UpdateObjectRequestBuilder
         */
        public UpdateObjectRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set parent
         * @param parent  (optional)
         * @return UpdateObjectRequestBuilder
         */
        public UpdateObjectRequestBuilder parent(WebLinksUpdateObjectRequestParent parent) {
            this.parent = parent;
            return this;
        }
        
        /**
         * Set name
         * @param name A new name for the web link. Defaults to the URL if not set. (optional)
         * @return UpdateObjectRequestBuilder
         */
        public UpdateObjectRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set sharedLink
         * @param sharedLink  (optional)
         * @return UpdateObjectRequestBuilder
         */
        public UpdateObjectRequestBuilder sharedLink(WebLinksUpdateObjectRequestSharedLink sharedLink) {
            this.sharedLink = sharedLink;
            return this;
        }
        
        /**
         * Build call for updateObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated web link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebLinksUpdateObjectRequest webLinksUpdateObjectRequest = buildBodyParams();
            return updateObjectCall(webLinkId, webLinksUpdateObjectRequest, _callback);
        }

        private WebLinksUpdateObjectRequest buildBodyParams() {
            WebLinksUpdateObjectRequest webLinksUpdateObjectRequest = new WebLinksUpdateObjectRequest();
            webLinksUpdateObjectRequest.description(this.description);
            webLinksUpdateObjectRequest.url(this.url);
            webLinksUpdateObjectRequest.parent(this.parent);
            webLinksUpdateObjectRequest.name(this.name);
            webLinksUpdateObjectRequest.sharedLink(this.sharedLink);
            return webLinksUpdateObjectRequest;
        }

        /**
         * Execute updateObject request
         * @return WebLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated web link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public WebLink execute() throws ApiException {
            WebLinksUpdateObjectRequest webLinksUpdateObjectRequest = buildBodyParams();
            ApiResponse<WebLink> localVarResp = updateObjectWithHttpInfo(webLinkId, webLinksUpdateObjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateObject request with HTTP info returned
         * @return ApiResponse&lt;WebLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated web link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebLink> executeWithHttpInfo() throws ApiException {
            WebLinksUpdateObjectRequest webLinksUpdateObjectRequest = buildBodyParams();
            return updateObjectWithHttpInfo(webLinkId, webLinksUpdateObjectRequest);
        }

        /**
         * Execute updateObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated web link object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebLink> _callback) throws ApiException {
            WebLinksUpdateObjectRequest webLinksUpdateObjectRequest = buildBodyParams();
            return updateObjectAsync(webLinkId, webLinksUpdateObjectRequest, _callback);
        }
    }

    /**
     * Update web link
     * Updates a web link object.
     * @param webLinkId The ID of the web link. (required)
     * @return UpdateObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated web link object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateObjectRequestBuilder updateObject(String webLinkId) throws IllegalArgumentException {
        if (webLinkId == null) throw new IllegalArgumentException("\"webLinkId\" is required but got null");
            

        return new UpdateObjectRequestBuilder(webLinkId);
    }
}
