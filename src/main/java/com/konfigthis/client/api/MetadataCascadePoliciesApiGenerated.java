/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.MetadataCascadePolicies;
import com.konfigthis.client.model.MetadataCascadePoliciesApplyToChildrenRequest;
import com.konfigthis.client.model.MetadataCascadePoliciesCreatePolicyRequest;
import com.konfigthis.client.model.MetadataCascadePolicy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MetadataCascadePoliciesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetadataCascadePoliciesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MetadataCascadePoliciesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call applyToChildrenCall(String metadataCascadePolicyId, MetadataCascadePoliciesApplyToChildrenRequest metadataCascadePoliciesApplyToChildrenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadataCascadePoliciesApplyToChildrenRequest;

        // create path and map variables
        String localVarPath = "/metadata_cascade_policies/{metadata_cascade_policy_id}/apply"
            .replace("{" + "metadata_cascade_policy_id" + "}", localVarApiClient.escapeString(metadataCascadePolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyToChildrenValidateBeforeCall(String metadataCascadePolicyId, MetadataCascadePoliciesApplyToChildrenRequest metadataCascadePoliciesApplyToChildrenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metadataCascadePolicyId' is set
        if (metadataCascadePolicyId == null) {
            throw new ApiException("Missing the required parameter 'metadataCascadePolicyId' when calling applyToChildren(Async)");
        }

        return applyToChildrenCall(metadataCascadePolicyId, metadataCascadePoliciesApplyToChildrenRequest, _callback);

    }


    private ApiResponse<Void> applyToChildrenWithHttpInfo(String metadataCascadePolicyId, MetadataCascadePoliciesApplyToChildrenRequest metadataCascadePoliciesApplyToChildrenRequest) throws ApiException {
        okhttp3.Call localVarCall = applyToChildrenValidateBeforeCall(metadataCascadePolicyId, metadataCascadePoliciesApplyToChildrenRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call applyToChildrenAsync(String metadataCascadePolicyId, MetadataCascadePoliciesApplyToChildrenRequest metadataCascadePoliciesApplyToChildrenRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyToChildrenValidateBeforeCall(metadataCascadePolicyId, metadataCascadePoliciesApplyToChildrenRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ApplyToChildrenRequestBuilder {
        private final String conflictResolution;
        private final String metadataCascadePolicyId;

        private ApplyToChildrenRequestBuilder(String conflictResolution, String metadataCascadePolicyId) {
            this.conflictResolution = conflictResolution;
            this.metadataCascadePolicyId = metadataCascadePolicyId;
        }

        /**
         * Build call for applyToChildren
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Returns an empty response when the API call was successful. The metadata cascade operation will be performed asynchronously.  The API call will return directly, before the cascade operation is complete. There is currently no API to check for the status of this operation. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MetadataCascadePoliciesApplyToChildrenRequest metadataCascadePoliciesApplyToChildrenRequest = buildBodyParams();
            return applyToChildrenCall(metadataCascadePolicyId, metadataCascadePoliciesApplyToChildrenRequest, _callback);
        }

        private MetadataCascadePoliciesApplyToChildrenRequest buildBodyParams() {
            MetadataCascadePoliciesApplyToChildrenRequest metadataCascadePoliciesApplyToChildrenRequest = new MetadataCascadePoliciesApplyToChildrenRequest();
            if (this.conflictResolution != null)
            metadataCascadePoliciesApplyToChildrenRequest.conflictResolution(MetadataCascadePoliciesApplyToChildrenRequest.ConflictResolutionEnum.fromValue(this.conflictResolution));
            return metadataCascadePoliciesApplyToChildrenRequest;
        }

        /**
         * Execute applyToChildren request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Returns an empty response when the API call was successful. The metadata cascade operation will be performed asynchronously.  The API call will return directly, before the cascade operation is complete. There is currently no API to check for the status of this operation. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MetadataCascadePoliciesApplyToChildrenRequest metadataCascadePoliciesApplyToChildrenRequest = buildBodyParams();
            applyToChildrenWithHttpInfo(metadataCascadePolicyId, metadataCascadePoliciesApplyToChildrenRequest);
        }

        /**
         * Execute applyToChildren request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Returns an empty response when the API call was successful. The metadata cascade operation will be performed asynchronously.  The API call will return directly, before the cascade operation is complete. There is currently no API to check for the status of this operation. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MetadataCascadePoliciesApplyToChildrenRequest metadataCascadePoliciesApplyToChildrenRequest = buildBodyParams();
            return applyToChildrenWithHttpInfo(metadataCascadePolicyId, metadataCascadePoliciesApplyToChildrenRequest);
        }

        /**
         * Execute applyToChildren request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Returns an empty response when the API call was successful. The metadata cascade operation will be performed asynchronously.  The API call will return directly, before the cascade operation is complete. There is currently no API to check for the status of this operation. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MetadataCascadePoliciesApplyToChildrenRequest metadataCascadePoliciesApplyToChildrenRequest = buildBodyParams();
            return applyToChildrenAsync(metadataCascadePolicyId, metadataCascadePoliciesApplyToChildrenRequest, _callback);
        }
    }

    /**
     * Force-apply metadata cascade policy to folder
     * Force the metadata on a folder with a metadata cascade policy to be applied to all of its children. This can be used after creating a new cascade policy to enforce the metadata to be cascaded down to all existing files within that folder.
     * @param metadataCascadePolicyId The ID of the cascade policy to force-apply. (required)
     * @return ApplyToChildrenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Returns an empty response when the API call was successful. The metadata cascade operation will be performed asynchronously.  The API call will return directly, before the cascade operation is complete. There is currently no API to check for the status of this operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ApplyToChildrenRequestBuilder applyToChildren(String conflictResolution, String metadataCascadePolicyId) throws IllegalArgumentException {
        if (conflictResolution == null) throw new IllegalArgumentException("\"conflictResolution\" is required but got null");
            

        if (metadataCascadePolicyId == null) throw new IllegalArgumentException("\"metadataCascadePolicyId\" is required but got null");
            

        return new ApplyToChildrenRequestBuilder(conflictResolution, metadataCascadePolicyId);
    }
    private okhttp3.Call createPolicyCall(MetadataCascadePoliciesCreatePolicyRequest metadataCascadePoliciesCreatePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadataCascadePoliciesCreatePolicyRequest;

        // create path and map variables
        String localVarPath = "/metadata_cascade_policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyValidateBeforeCall(MetadataCascadePoliciesCreatePolicyRequest metadataCascadePoliciesCreatePolicyRequest, final ApiCallback _callback) throws ApiException {
        return createPolicyCall(metadataCascadePoliciesCreatePolicyRequest, _callback);

    }


    private ApiResponse<MetadataCascadePolicy> createPolicyWithHttpInfo(MetadataCascadePoliciesCreatePolicyRequest metadataCascadePoliciesCreatePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(metadataCascadePoliciesCreatePolicyRequest, null);
        Type localVarReturnType = new TypeToken<MetadataCascadePolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPolicyAsync(MetadataCascadePoliciesCreatePolicyRequest metadataCascadePoliciesCreatePolicyRequest, final ApiCallback<MetadataCascadePolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(metadataCascadePoliciesCreatePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<MetadataCascadePolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePolicyRequestBuilder {
        private final String folderId;
        private final String scope;
        private final String templateKey;

        private CreatePolicyRequestBuilder(String folderId, String scope, String templateKey) {
            this.folderId = folderId;
            this.scope = scope;
            this.templateKey = templateKey;
        }

        /**
         * Build call for createPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new of metadata cascade policy </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MetadataCascadePoliciesCreatePolicyRequest metadataCascadePoliciesCreatePolicyRequest = buildBodyParams();
            return createPolicyCall(metadataCascadePoliciesCreatePolicyRequest, _callback);
        }

        private MetadataCascadePoliciesCreatePolicyRequest buildBodyParams() {
            MetadataCascadePoliciesCreatePolicyRequest metadataCascadePoliciesCreatePolicyRequest = new MetadataCascadePoliciesCreatePolicyRequest();
            metadataCascadePoliciesCreatePolicyRequest.folderId(this.folderId);
            if (this.scope != null)
            metadataCascadePoliciesCreatePolicyRequest.scope(MetadataCascadePoliciesCreatePolicyRequest.ScopeEnum.fromValue(this.scope));
            metadataCascadePoliciesCreatePolicyRequest.templateKey(this.templateKey);
            return metadataCascadePoliciesCreatePolicyRequest;
        }

        /**
         * Execute createPolicy request
         * @return MetadataCascadePolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new of metadata cascade policy </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataCascadePolicy execute() throws ApiException {
            MetadataCascadePoliciesCreatePolicyRequest metadataCascadePoliciesCreatePolicyRequest = buildBodyParams();
            ApiResponse<MetadataCascadePolicy> localVarResp = createPolicyWithHttpInfo(metadataCascadePoliciesCreatePolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPolicy request with HTTP info returned
         * @return ApiResponse&lt;MetadataCascadePolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new of metadata cascade policy </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataCascadePolicy> executeWithHttpInfo() throws ApiException {
            MetadataCascadePoliciesCreatePolicyRequest metadataCascadePoliciesCreatePolicyRequest = buildBodyParams();
            return createPolicyWithHttpInfo(metadataCascadePoliciesCreatePolicyRequest);
        }

        /**
         * Execute createPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new of metadata cascade policy </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataCascadePolicy> _callback) throws ApiException {
            MetadataCascadePoliciesCreatePolicyRequest metadataCascadePoliciesCreatePolicyRequest = buildBodyParams();
            return createPolicyAsync(metadataCascadePoliciesCreatePolicyRequest, _callback);
        }
    }

    /**
     * Create metadata cascade policy
     * Creates a new metadata cascade policy that applies a given metadata template to a given folder and automatically cascades it down to any files within that folder.  In order for the policy to be applied a metadata instance must first be applied to the folder the policy is to be applied to.
     * @return CreatePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new of metadata cascade policy </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePolicyRequestBuilder createPolicy(String folderId, String scope, String templateKey) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (templateKey == null) throw new IllegalArgumentException("\"templateKey\" is required but got null");
            

        return new CreatePolicyRequestBuilder(folderId, scope, templateKey);
    }
    private okhttp3.Call getPolicyAssignedToFolderCall(String metadataCascadePolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata_cascade_policies/{metadata_cascade_policy_id}"
            .replace("{" + "metadata_cascade_policy_id" + "}", localVarApiClient.escapeString(metadataCascadePolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyAssignedToFolderValidateBeforeCall(String metadataCascadePolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metadataCascadePolicyId' is set
        if (metadataCascadePolicyId == null) {
            throw new ApiException("Missing the required parameter 'metadataCascadePolicyId' when calling getPolicyAssignedToFolder(Async)");
        }

        return getPolicyAssignedToFolderCall(metadataCascadePolicyId, _callback);

    }


    private ApiResponse<MetadataCascadePolicy> getPolicyAssignedToFolderWithHttpInfo(String metadataCascadePolicyId) throws ApiException {
        okhttp3.Call localVarCall = getPolicyAssignedToFolderValidateBeforeCall(metadataCascadePolicyId, null);
        Type localVarReturnType = new TypeToken<MetadataCascadePolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyAssignedToFolderAsync(String metadataCascadePolicyId, final ApiCallback<MetadataCascadePolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyAssignedToFolderValidateBeforeCall(metadataCascadePolicyId, _callback);
        Type localVarReturnType = new TypeToken<MetadataCascadePolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPolicyAssignedToFolderRequestBuilder {
        private final String metadataCascadePolicyId;

        private GetPolicyAssignedToFolderRequestBuilder(String metadataCascadePolicyId) {
            this.metadataCascadePolicyId = metadataCascadePolicyId;
        }

        /**
         * Build call for getPolicyAssignedToFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a metadata cascade policy </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyAssignedToFolderCall(metadataCascadePolicyId, _callback);
        }


        /**
         * Execute getPolicyAssignedToFolder request
         * @return MetadataCascadePolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a metadata cascade policy </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataCascadePolicy execute() throws ApiException {
            ApiResponse<MetadataCascadePolicy> localVarResp = getPolicyAssignedToFolderWithHttpInfo(metadataCascadePolicyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPolicyAssignedToFolder request with HTTP info returned
         * @return ApiResponse&lt;MetadataCascadePolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a metadata cascade policy </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataCascadePolicy> executeWithHttpInfo() throws ApiException {
            return getPolicyAssignedToFolderWithHttpInfo(metadataCascadePolicyId);
        }

        /**
         * Execute getPolicyAssignedToFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a metadata cascade policy </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataCascadePolicy> _callback) throws ApiException {
            return getPolicyAssignedToFolderAsync(metadataCascadePolicyId, _callback);
        }
    }

    /**
     * Get metadata cascade policy
     * Retrieve a specific metadata cascade policy assigned to a folder.
     * @param metadataCascadePolicyId The ID of the metadata cascade policy. (required)
     * @return GetPolicyAssignedToFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a metadata cascade policy </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetPolicyAssignedToFolderRequestBuilder getPolicyAssignedToFolder(String metadataCascadePolicyId) throws IllegalArgumentException {
        if (metadataCascadePolicyId == null) throw new IllegalArgumentException("\"metadataCascadePolicyId\" is required but got null");
            

        return new GetPolicyAssignedToFolderRequestBuilder(metadataCascadePolicyId);
    }
    private okhttp3.Call listCall(String folderId, String ownerEnterpriseId, String marker, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata_cascade_policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (folderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("folder_id", folderId));
        }

        if (ownerEnterpriseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_enterprise_id", ownerEnterpriseId));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String folderId, String ownerEnterpriseId, String marker, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling list(Async)");
        }

        return listCall(folderId, ownerEnterpriseId, marker, offset, _callback);

    }


    private ApiResponse<MetadataCascadePolicies> listWithHttpInfo(String folderId, String ownerEnterpriseId, String marker, Long offset) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(folderId, ownerEnterpriseId, marker, offset, null);
        Type localVarReturnType = new TypeToken<MetadataCascadePolicies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String folderId, String ownerEnterpriseId, String marker, Long offset, final ApiCallback<MetadataCascadePolicies> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(folderId, ownerEnterpriseId, marker, offset, _callback);
        Type localVarReturnType = new TypeToken<MetadataCascadePolicies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String folderId;
        private String ownerEnterpriseId;
        private String marker;
        private Long offset;

        private ListRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Set ownerEnterpriseId
         * @param ownerEnterpriseId The ID of the enterprise ID for which to find metadata cascade policies. If not specified, it defaults to the current enterprise. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder ownerEnterpriseId(String ownerEnterpriseId) {
            this.ownerEnterpriseId = ownerEnterpriseId;
            return this;
        }
        
        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response. (optional, default to 0)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of metadata cascade policies </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(folderId, ownerEnterpriseId, marker, offset, _callback);
        }


        /**
         * Execute list request
         * @return MetadataCascadePolicies
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of metadata cascade policies </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataCascadePolicies execute() throws ApiException {
            ApiResponse<MetadataCascadePolicies> localVarResp = listWithHttpInfo(folderId, ownerEnterpriseId, marker, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;MetadataCascadePolicies&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of metadata cascade policies </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataCascadePolicies> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(folderId, ownerEnterpriseId, marker, offset);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of metadata cascade policies </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataCascadePolicies> _callback) throws ApiException {
            return listAsync(folderId, ownerEnterpriseId, marker, offset, _callback);
        }
    }

    /**
     * List metadata cascade policies
     * Retrieves a list of all the metadata cascade policies that are applied to a given folder. This can not be used on the root folder with ID &#x60;0&#x60;.
     * @param folderId Specifies which folder to return policies for. This can not be used on the root folder with ID &#x60;0&#x60;. (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of metadata cascade policies </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new ListRequestBuilder(folderId);
    }
    private okhttp3.Call removePolicyCall(String metadataCascadePolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata_cascade_policies/{metadata_cascade_policy_id}"
            .replace("{" + "metadata_cascade_policy_id" + "}", localVarApiClient.escapeString(metadataCascadePolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePolicyValidateBeforeCall(String metadataCascadePolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metadataCascadePolicyId' is set
        if (metadataCascadePolicyId == null) {
            throw new ApiException("Missing the required parameter 'metadataCascadePolicyId' when calling removePolicy(Async)");
        }

        return removePolicyCall(metadataCascadePolicyId, _callback);

    }


    private ApiResponse<Void> removePolicyWithHttpInfo(String metadataCascadePolicyId) throws ApiException {
        okhttp3.Call localVarCall = removePolicyValidateBeforeCall(metadataCascadePolicyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePolicyAsync(String metadataCascadePolicyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePolicyValidateBeforeCall(metadataCascadePolicyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePolicyRequestBuilder {
        private final String metadataCascadePolicyId;

        private RemovePolicyRequestBuilder(String metadataCascadePolicyId) {
            this.metadataCascadePolicyId = metadataCascadePolicyId;
        }

        /**
         * Build call for removePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the policy is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePolicyCall(metadataCascadePolicyId, _callback);
        }


        /**
         * Execute removePolicy request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the policy is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePolicyWithHttpInfo(metadataCascadePolicyId);
        }

        /**
         * Execute removePolicy request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the policy is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePolicyWithHttpInfo(metadataCascadePolicyId);
        }

        /**
         * Execute removePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the policy is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePolicyAsync(metadataCascadePolicyId, _callback);
        }
    }

    /**
     * Remove metadata cascade policy
     * Deletes a metadata cascade policy.
     * @param metadataCascadePolicyId The ID of the metadata cascade policy. (required)
     * @return RemovePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the policy is successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemovePolicyRequestBuilder removePolicy(String metadataCascadePolicyId) throws IllegalArgumentException {
        if (metadataCascadePolicyId == null) throw new IllegalArgumentException("\"metadataCascadePolicyId\" is required but got null");
            

        return new RemovePolicyRequestBuilder(metadataCascadePolicyId);
    }
}
