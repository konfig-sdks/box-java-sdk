/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.IntegrationMapping;
import com.konfigthis.client.model.IntegrationMappingBoxItemSlack;
import com.konfigthis.client.model.IntegrationMappingPartnerItemSlack;
import com.konfigthis.client.model.IntegrationMappingSlackCreateRequest;
import com.konfigthis.client.model.IntegrationMappingSlackOptions;
import com.konfigthis.client.model.IntegrationMappings;
import com.konfigthis.client.model.IntegrationMappingsUpdateSlackMappingRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IntegrationMappingsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntegrationMappingsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationMappingsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSlackMappingCall(IntegrationMappingSlackCreateRequest integrationMappingSlackCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = integrationMappingSlackCreateRequest;

        // create path and map variables
        String localVarPath = "/integration_mappings/slack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSlackMappingValidateBeforeCall(IntegrationMappingSlackCreateRequest integrationMappingSlackCreateRequest, final ApiCallback _callback) throws ApiException {
        return createSlackMappingCall(integrationMappingSlackCreateRequest, _callback);

    }


    private ApiResponse<IntegrationMapping> createSlackMappingWithHttpInfo(IntegrationMappingSlackCreateRequest integrationMappingSlackCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createSlackMappingValidateBeforeCall(integrationMappingSlackCreateRequest, null);
        Type localVarReturnType = new TypeToken<IntegrationMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSlackMappingAsync(IntegrationMappingSlackCreateRequest integrationMappingSlackCreateRequest, final ApiCallback<IntegrationMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSlackMappingValidateBeforeCall(integrationMappingSlackCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<IntegrationMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSlackMappingRequestBuilder {
        private final IntegrationMappingPartnerItemSlack partnerItem;
        private final IntegrationMappingBoxItemSlack boxItem;
        private IntegrationMappingSlackOptions options;

        private CreateSlackMappingRequestBuilder(IntegrationMappingPartnerItemSlack partnerItem, IntegrationMappingBoxItemSlack boxItem) {
            this.partnerItem = partnerItem;
            this.boxItem = boxItem;
        }

        /**
         * Set options
         * @param options  (optional)
         * @return CreateSlackMappingRequestBuilder
         */
        public CreateSlackMappingRequestBuilder options(IntegrationMappingSlackOptions options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for createSlackMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the created integration mapping. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IntegrationMappingSlackCreateRequest integrationMappingSlackCreateRequest = buildBodyParams();
            return createSlackMappingCall(integrationMappingSlackCreateRequest, _callback);
        }

        private IntegrationMappingSlackCreateRequest buildBodyParams() {
            IntegrationMappingSlackCreateRequest integrationMappingSlackCreateRequest = new IntegrationMappingSlackCreateRequest();
            integrationMappingSlackCreateRequest.partnerItem(this.partnerItem);
            integrationMappingSlackCreateRequest.boxItem(this.boxItem);
            integrationMappingSlackCreateRequest.options(this.options);
            return integrationMappingSlackCreateRequest;
        }

        /**
         * Execute createSlackMapping request
         * @return IntegrationMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the created integration mapping. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationMapping execute() throws ApiException {
            IntegrationMappingSlackCreateRequest integrationMappingSlackCreateRequest = buildBodyParams();
            ApiResponse<IntegrationMapping> localVarResp = createSlackMappingWithHttpInfo(integrationMappingSlackCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSlackMapping request with HTTP info returned
         * @return ApiResponse&lt;IntegrationMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the created integration mapping. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationMapping> executeWithHttpInfo() throws ApiException {
            IntegrationMappingSlackCreateRequest integrationMappingSlackCreateRequest = buildBodyParams();
            return createSlackMappingWithHttpInfo(integrationMappingSlackCreateRequest);
        }

        /**
         * Execute createSlackMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the created integration mapping. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationMapping> _callback) throws ApiException {
            IntegrationMappingSlackCreateRequest integrationMappingSlackCreateRequest = buildBodyParams();
            return createSlackMappingAsync(integrationMappingSlackCreateRequest, _callback);
        }
    }

    /**
     * Create Slack integration mapping
     * Creates a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack) by mapping a Slack channel to a Box item.  You need Admin or Co-Admin role to use this endpoint.
     * @return CreateSlackMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the created integration mapping. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSlackMappingRequestBuilder createSlackMapping(IntegrationMappingPartnerItemSlack partnerItem, IntegrationMappingBoxItemSlack boxItem) throws IllegalArgumentException {
        if (partnerItem == null) throw new IllegalArgumentException("\"partnerItem\" is required but got null");
        if (boxItem == null) throw new IllegalArgumentException("\"boxItem\" is required but got null");
        return new CreateSlackMappingRequestBuilder(partnerItem, boxItem);
    }
    private okhttp3.Call deleteSlackMappingCall(String integrationMappingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/integration_mappings/slack/{integration_mapping_id}"
            .replace("{" + "integration_mapping_id" + "}", localVarApiClient.escapeString(integrationMappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSlackMappingValidateBeforeCall(String integrationMappingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationMappingId' is set
        if (integrationMappingId == null) {
            throw new ApiException("Missing the required parameter 'integrationMappingId' when calling deleteSlackMapping(Async)");
        }

        return deleteSlackMappingCall(integrationMappingId, _callback);

    }


    private ApiResponse<Void> deleteSlackMappingWithHttpInfo(String integrationMappingId) throws ApiException {
        okhttp3.Call localVarCall = deleteSlackMappingValidateBeforeCall(integrationMappingId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSlackMappingAsync(String integrationMappingId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSlackMappingValidateBeforeCall(integrationMappingId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSlackMappingRequestBuilder {
        private final String integrationMappingId;

        private DeleteSlackMappingRequestBuilder(String integrationMappingId) {
            this.integrationMappingId = integrationMappingId;
        }

        /**
         * Build call for deleteSlackMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty body in response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSlackMappingCall(integrationMappingId, _callback);
        }


        /**
         * Execute deleteSlackMapping request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty body in response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSlackMappingWithHttpInfo(integrationMappingId);
        }

        /**
         * Execute deleteSlackMapping request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty body in response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSlackMappingWithHttpInfo(integrationMappingId);
        }

        /**
         * Execute deleteSlackMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty body in response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSlackMappingAsync(integrationMappingId, _callback);
        }
    }

    /**
     * Delete Slack integration mapping
     * Deletes a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack).   You need Admin or Co-Admin role to use this endpoint.
     * @param integrationMappingId An ID of an integration mapping (required)
     * @return DeleteSlackMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty body in response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSlackMappingRequestBuilder deleteSlackMapping(String integrationMappingId) throws IllegalArgumentException {
        if (integrationMappingId == null) throw new IllegalArgumentException("\"integrationMappingId\" is required but got null");
            

        return new DeleteSlackMappingRequestBuilder(integrationMappingId);
    }
    private okhttp3.Call listSlackMappingsCall(String marker, Long limit, String partnerItemType, String partnerItemId, String boxItemId, String boxItemType, Boolean isManuallyCreated, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/integration_mappings/slack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (partnerItemType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partner_item_type", partnerItemType));
        }

        if (partnerItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partner_item_id", partnerItemId));
        }

        if (boxItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("box_item_id", boxItemId));
        }

        if (boxItemType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("box_item_type", boxItemType));
        }

        if (isManuallyCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_manually_created", isManuallyCreated));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSlackMappingsValidateBeforeCall(String marker, Long limit, String partnerItemType, String partnerItemId, String boxItemId, String boxItemType, Boolean isManuallyCreated, final ApiCallback _callback) throws ApiException {
        return listSlackMappingsCall(marker, limit, partnerItemType, partnerItemId, boxItemId, boxItemType, isManuallyCreated, _callback);

    }


    private ApiResponse<IntegrationMappings> listSlackMappingsWithHttpInfo(String marker, Long limit, String partnerItemType, String partnerItemId, String boxItemId, String boxItemType, Boolean isManuallyCreated) throws ApiException {
        okhttp3.Call localVarCall = listSlackMappingsValidateBeforeCall(marker, limit, partnerItemType, partnerItemId, boxItemId, boxItemType, isManuallyCreated, null);
        Type localVarReturnType = new TypeToken<IntegrationMappings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSlackMappingsAsync(String marker, Long limit, String partnerItemType, String partnerItemId, String boxItemId, String boxItemType, Boolean isManuallyCreated, final ApiCallback<IntegrationMappings> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSlackMappingsValidateBeforeCall(marker, limit, partnerItemType, partnerItemId, boxItemId, boxItemType, isManuallyCreated, _callback);
        Type localVarReturnType = new TypeToken<IntegrationMappings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSlackMappingsRequestBuilder {
        private String marker;
        private Long limit;
        private String partnerItemType;
        private String partnerItemId;
        private String boxItemId;
        private String boxItemType;
        private Boolean isManuallyCreated;

        private ListSlackMappingsRequestBuilder() {
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListSlackMappingsRequestBuilder
         */
        public ListSlackMappingsRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListSlackMappingsRequestBuilder
         */
        public ListSlackMappingsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set partnerItemType
         * @param partnerItemType Mapped item type, for which the mapping should be returned (optional)
         * @return ListSlackMappingsRequestBuilder
         */
        public ListSlackMappingsRequestBuilder partnerItemType(String partnerItemType) {
            this.partnerItemType = partnerItemType;
            return this;
        }
        
        /**
         * Set partnerItemId
         * @param partnerItemId ID of the mapped item, for which the mapping should be returned (optional)
         * @return ListSlackMappingsRequestBuilder
         */
        public ListSlackMappingsRequestBuilder partnerItemId(String partnerItemId) {
            this.partnerItemId = partnerItemId;
            return this;
        }
        
        /**
         * Set boxItemId
         * @param boxItemId Box item ID, for which the mappings should be returned (optional)
         * @return ListSlackMappingsRequestBuilder
         */
        public ListSlackMappingsRequestBuilder boxItemId(String boxItemId) {
            this.boxItemId = boxItemId;
            return this;
        }
        
        /**
         * Set boxItemType
         * @param boxItemType Box item type, for which the mappings should be returned (optional)
         * @return ListSlackMappingsRequestBuilder
         */
        public ListSlackMappingsRequestBuilder boxItemType(String boxItemType) {
            this.boxItemType = boxItemType;
            return this;
        }
        
        /**
         * Set isManuallyCreated
         * @param isManuallyCreated Whether the mapping has been manually created (optional)
         * @return ListSlackMappingsRequestBuilder
         */
        public ListSlackMappingsRequestBuilder isManuallyCreated(Boolean isManuallyCreated) {
            this.isManuallyCreated = isManuallyCreated;
            return this;
        }
        
        /**
         * Build call for listSlackMappings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of integration mappings </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSlackMappingsCall(marker, limit, partnerItemType, partnerItemId, boxItemId, boxItemType, isManuallyCreated, _callback);
        }


        /**
         * Execute listSlackMappings request
         * @return IntegrationMappings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of integration mappings </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationMappings execute() throws ApiException {
            ApiResponse<IntegrationMappings> localVarResp = listSlackMappingsWithHttpInfo(marker, limit, partnerItemType, partnerItemId, boxItemId, boxItemType, isManuallyCreated);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSlackMappings request with HTTP info returned
         * @return ApiResponse&lt;IntegrationMappings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of integration mappings </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationMappings> executeWithHttpInfo() throws ApiException {
            return listSlackMappingsWithHttpInfo(marker, limit, partnerItemType, partnerItemId, boxItemId, boxItemType, isManuallyCreated);
        }

        /**
         * Execute listSlackMappings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of integration mappings </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationMappings> _callback) throws ApiException {
            return listSlackMappingsAsync(marker, limit, partnerItemType, partnerItemId, boxItemId, boxItemType, isManuallyCreated, _callback);
        }
    }

    /**
     * List Slack integration mappings
     * Lists [Slack integration mappings](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack) in a users&#39; enterprise.  You need Admin or Co-Admin role to use this endpoint.
     * @return ListSlackMappingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of integration mappings </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListSlackMappingsRequestBuilder listSlackMappings() throws IllegalArgumentException {
        return new ListSlackMappingsRequestBuilder();
    }
    private okhttp3.Call updateSlackMappingCall(String integrationMappingId, IntegrationMappingsUpdateSlackMappingRequest integrationMappingsUpdateSlackMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = integrationMappingsUpdateSlackMappingRequest;

        // create path and map variables
        String localVarPath = "/integration_mappings/slack/{integration_mapping_id}"
            .replace("{" + "integration_mapping_id" + "}", localVarApiClient.escapeString(integrationMappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSlackMappingValidateBeforeCall(String integrationMappingId, IntegrationMappingsUpdateSlackMappingRequest integrationMappingsUpdateSlackMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationMappingId' is set
        if (integrationMappingId == null) {
            throw new ApiException("Missing the required parameter 'integrationMappingId' when calling updateSlackMapping(Async)");
        }

        return updateSlackMappingCall(integrationMappingId, integrationMappingsUpdateSlackMappingRequest, _callback);

    }


    private ApiResponse<IntegrationMapping> updateSlackMappingWithHttpInfo(String integrationMappingId, IntegrationMappingsUpdateSlackMappingRequest integrationMappingsUpdateSlackMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSlackMappingValidateBeforeCall(integrationMappingId, integrationMappingsUpdateSlackMappingRequest, null);
        Type localVarReturnType = new TypeToken<IntegrationMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSlackMappingAsync(String integrationMappingId, IntegrationMappingsUpdateSlackMappingRequest integrationMappingsUpdateSlackMappingRequest, final ApiCallback<IntegrationMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSlackMappingValidateBeforeCall(integrationMappingId, integrationMappingsUpdateSlackMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<IntegrationMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSlackMappingRequestBuilder {
        private final String integrationMappingId;
        private IntegrationMappingBoxItemSlack boxItem;
        private IntegrationMappingSlackOptions options;

        private UpdateSlackMappingRequestBuilder(String integrationMappingId) {
            this.integrationMappingId = integrationMappingId;
        }

        /**
         * Set boxItem
         * @param boxItem  (optional)
         * @return UpdateSlackMappingRequestBuilder
         */
        public UpdateSlackMappingRequestBuilder boxItem(IntegrationMappingBoxItemSlack boxItem) {
            this.boxItem = boxItem;
            return this;
        }
        
        /**
         * Set options
         * @param options  (optional)
         * @return UpdateSlackMappingRequestBuilder
         */
        public UpdateSlackMappingRequestBuilder options(IntegrationMappingSlackOptions options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for updateSlackMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated integration mapping object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IntegrationMappingsUpdateSlackMappingRequest integrationMappingsUpdateSlackMappingRequest = buildBodyParams();
            return updateSlackMappingCall(integrationMappingId, integrationMappingsUpdateSlackMappingRequest, _callback);
        }

        private IntegrationMappingsUpdateSlackMappingRequest buildBodyParams() {
            IntegrationMappingsUpdateSlackMappingRequest integrationMappingsUpdateSlackMappingRequest = new IntegrationMappingsUpdateSlackMappingRequest();
            integrationMappingsUpdateSlackMappingRequest.boxItem(this.boxItem);
            integrationMappingsUpdateSlackMappingRequest.options(this.options);
            return integrationMappingsUpdateSlackMappingRequest;
        }

        /**
         * Execute updateSlackMapping request
         * @return IntegrationMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated integration mapping object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationMapping execute() throws ApiException {
            IntegrationMappingsUpdateSlackMappingRequest integrationMappingsUpdateSlackMappingRequest = buildBodyParams();
            ApiResponse<IntegrationMapping> localVarResp = updateSlackMappingWithHttpInfo(integrationMappingId, integrationMappingsUpdateSlackMappingRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSlackMapping request with HTTP info returned
         * @return ApiResponse&lt;IntegrationMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated integration mapping object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationMapping> executeWithHttpInfo() throws ApiException {
            IntegrationMappingsUpdateSlackMappingRequest integrationMappingsUpdateSlackMappingRequest = buildBodyParams();
            return updateSlackMappingWithHttpInfo(integrationMappingId, integrationMappingsUpdateSlackMappingRequest);
        }

        /**
         * Execute updateSlackMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated integration mapping object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationMapping> _callback) throws ApiException {
            IntegrationMappingsUpdateSlackMappingRequest integrationMappingsUpdateSlackMappingRequest = buildBodyParams();
            return updateSlackMappingAsync(integrationMappingId, integrationMappingsUpdateSlackMappingRequest, _callback);
        }
    }

    /**
     * Update Slack integration mapping
     * Updates a [Slack integration mapping](https://support.box.com/hc/en-us/articles/4415585987859-Box-as-the-Content-Layer-for-Slack). Supports updating the Box folder ID and options.  You need Admin or Co-Admin role to use this endpoint.
     * @param integrationMappingId An ID of an integration mapping (required)
     * @return UpdateSlackMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated integration mapping object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSlackMappingRequestBuilder updateSlackMapping(String integrationMappingId) throws IllegalArgumentException {
        if (integrationMappingId == null) throw new IllegalArgumentException("\"integrationMappingId\" is required but got null");
            

        return new UpdateSlackMappingRequestBuilder(integrationMappingId);
    }
}
