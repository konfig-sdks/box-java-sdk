/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AMetadataInstanceUpdateOperation1;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.MetadataFull;
import com.konfigthis.client.model.Metadatas;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MetadataInstancesFoldersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetadataInstancesFoldersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MetadataInstancesFoldersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call applyTemplateCall(String folderId, String scope, String templateKey, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/metadata/{scope}/{template_key}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "template_key" + "}", localVarApiClient.escapeString(templateKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyTemplateValidateBeforeCall(String folderId, String scope, String templateKey, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling applyTemplate(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling applyTemplate(Async)");
        }

        // verify the required parameter 'templateKey' is set
        if (templateKey == null) {
            throw new ApiException("Missing the required parameter 'templateKey' when calling applyTemplate(Async)");
        }

        return applyTemplateCall(folderId, scope, templateKey, requestBody, _callback);

    }


    private ApiResponse<MetadataFull> applyTemplateWithHttpInfo(String folderId, String scope, String templateKey, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = applyTemplateValidateBeforeCall(folderId, scope, templateKey, requestBody, null);
        Type localVarReturnType = new TypeToken<MetadataFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call applyTemplateAsync(String folderId, String scope, String templateKey, Map<String, Object> requestBody, final ApiCallback<MetadataFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyTemplateValidateBeforeCall(folderId, scope, templateKey, requestBody, _callback);
        Type localVarReturnType = new TypeToken<MetadataFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApplyTemplateRequestBuilder {
        private final String folderId;
        private final String scope;
        private final String templateKey;

        private ApplyTemplateRequestBuilder(String folderId, String scope, String templateKey) {
            this.folderId = folderId;
            this.scope = scope;
            this.templateKey = templateKey;
        }

        /**
         * Build call for applyTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the instance of the template that was applied to the folder, including the data that was applied to the template. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return applyTemplateCall(folderId, scope, templateKey, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute applyTemplate request
         * @return MetadataFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the instance of the template that was applied to the folder, including the data that was applied to the template. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataFull execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<MetadataFull> localVarResp = applyTemplateWithHttpInfo(folderId, scope, templateKey, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute applyTemplate request with HTTP info returned
         * @return ApiResponse&lt;MetadataFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the instance of the template that was applied to the folder, including the data that was applied to the template. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataFull> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return applyTemplateWithHttpInfo(folderId, scope, templateKey, requestBody);
        }

        /**
         * Execute applyTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the instance of the template that was applied to the folder, including the data that was applied to the template. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataFull> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return applyTemplateAsync(folderId, scope, templateKey, requestBody, _callback);
        }
    }

    /**
     * Create metadata instance on folder
     * Applies an instance of a metadata template to a folder.  In most cases only values that are present in the metadata template will be accepted, except for the &#x60;global.properties&#x60; template which accepts any key-value pair.  To display the metadata template in the Box web app the enterprise needs to be configured to enable **Cascading Folder Level Metadata** for the user in the admin console.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @param scope The scope of the metadata template (required)
     * @param templateKey The name of the metadata template (required)
     * @return ApplyTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the instance of the template that was applied to the folder, including the data that was applied to the template. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ApplyTemplateRequestBuilder applyTemplate(String folderId, String scope, String templateKey) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (templateKey == null) throw new IllegalArgumentException("\"templateKey\" is required but got null");
            

        return new ApplyTemplateRequestBuilder(folderId, scope, templateKey);
    }
    private okhttp3.Call getFolderMetadataInstanceCall(String folderId, String scope, String templateKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/metadata/{scope}/{template_key}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "template_key" + "}", localVarApiClient.escapeString(templateKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderMetadataInstanceValidateBeforeCall(String folderId, String scope, String templateKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getFolderMetadataInstance(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getFolderMetadataInstance(Async)");
        }

        // verify the required parameter 'templateKey' is set
        if (templateKey == null) {
            throw new ApiException("Missing the required parameter 'templateKey' when calling getFolderMetadataInstance(Async)");
        }

        return getFolderMetadataInstanceCall(folderId, scope, templateKey, _callback);

    }


    private ApiResponse<MetadataFull> getFolderMetadataInstanceWithHttpInfo(String folderId, String scope, String templateKey) throws ApiException {
        okhttp3.Call localVarCall = getFolderMetadataInstanceValidateBeforeCall(folderId, scope, templateKey, null);
        Type localVarReturnType = new TypeToken<MetadataFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFolderMetadataInstanceAsync(String folderId, String scope, String templateKey, final ApiCallback<MetadataFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderMetadataInstanceValidateBeforeCall(folderId, scope, templateKey, _callback);
        Type localVarReturnType = new TypeToken<MetadataFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFolderMetadataInstanceRequestBuilder {
        private final String folderId;
        private final String scope;
        private final String templateKey;

        private GetFolderMetadataInstanceRequestBuilder(String folderId, String scope, String templateKey) {
            this.folderId = folderId;
            this.scope = scope;
            this.templateKey = templateKey;
        }

        /**
         * Build call for getFolderMetadataInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An instance of the metadata template that includes additional \&quot;key:value\&quot; pairs defined by the user or an application. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFolderMetadataInstanceCall(folderId, scope, templateKey, _callback);
        }


        /**
         * Execute getFolderMetadataInstance request
         * @return MetadataFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An instance of the metadata template that includes additional \&quot;key:value\&quot; pairs defined by the user or an application. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataFull execute() throws ApiException {
            ApiResponse<MetadataFull> localVarResp = getFolderMetadataInstanceWithHttpInfo(folderId, scope, templateKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFolderMetadataInstance request with HTTP info returned
         * @return ApiResponse&lt;MetadataFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An instance of the metadata template that includes additional \&quot;key:value\&quot; pairs defined by the user or an application. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataFull> executeWithHttpInfo() throws ApiException {
            return getFolderMetadataInstanceWithHttpInfo(folderId, scope, templateKey);
        }

        /**
         * Execute getFolderMetadataInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An instance of the metadata template that includes additional \&quot;key:value\&quot; pairs defined by the user or an application. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataFull> _callback) throws ApiException {
            return getFolderMetadataInstanceAsync(folderId, scope, templateKey, _callback);
        }
    }

    /**
     * Get metadata instance on folder
     * Retrieves the instance of a metadata template that has been applied to a folder. This can not be used on the root folder with ID &#x60;0&#x60;.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @param scope The scope of the metadata template (required)
     * @param templateKey The name of the metadata template (required)
     * @return GetFolderMetadataInstanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An instance of the metadata template that includes additional \&quot;key:value\&quot; pairs defined by the user or an application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderMetadataInstanceRequestBuilder getFolderMetadataInstance(String folderId, String scope, String templateKey) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (templateKey == null) throw new IllegalArgumentException("\"templateKey\" is required but got null");
            

        return new GetFolderMetadataInstanceRequestBuilder(folderId, scope, templateKey);
    }
    private okhttp3.Call listOnFolderCall(String folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/metadata"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOnFolderValidateBeforeCall(String folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling listOnFolder(Async)");
        }

        return listOnFolderCall(folderId, _callback);

    }


    private ApiResponse<Metadatas> listOnFolderWithHttpInfo(String folderId) throws ApiException {
        okhttp3.Call localVarCall = listOnFolderValidateBeforeCall(folderId, null);
        Type localVarReturnType = new TypeToken<Metadatas>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOnFolderAsync(String folderId, final ApiCallback<Metadatas> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOnFolderValidateBeforeCall(folderId, _callback);
        Type localVarReturnType = new TypeToken<Metadatas>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOnFolderRequestBuilder {
        private final String folderId;

        private ListOnFolderRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Build call for listOnFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all the metadata associated with a folder.  This API does not support pagination and will therefore always return all of the metadata associated to the folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOnFolderCall(folderId, _callback);
        }


        /**
         * Execute listOnFolder request
         * @return Metadatas
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all the metadata associated with a folder.  This API does not support pagination and will therefore always return all of the metadata associated to the folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Metadatas execute() throws ApiException {
            ApiResponse<Metadatas> localVarResp = listOnFolderWithHttpInfo(folderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOnFolder request with HTTP info returned
         * @return ApiResponse&lt;Metadatas&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all the metadata associated with a folder.  This API does not support pagination and will therefore always return all of the metadata associated to the folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Metadatas> executeWithHttpInfo() throws ApiException {
            return listOnFolderWithHttpInfo(folderId);
        }

        /**
         * Execute listOnFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all the metadata associated with a folder.  This API does not support pagination and will therefore always return all of the metadata associated to the folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Metadatas> _callback) throws ApiException {
            return listOnFolderAsync(folderId, _callback);
        }
    }

    /**
     * List metadata instances on folder
     * Retrieves all metadata for a given folder. This can not be used on the root folder with ID &#x60;0&#x60;.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return ListOnFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all the metadata associated with a folder.  This API does not support pagination and will therefore always return all of the metadata associated to the folder. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListOnFolderRequestBuilder listOnFolder(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new ListOnFolderRequestBuilder(folderId);
    }
    private okhttp3.Call removeInstanceCall(String folderId, String scope, String templateKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/metadata/{scope}/{template_key}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "template_key" + "}", localVarApiClient.escapeString(templateKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeInstanceValidateBeforeCall(String folderId, String scope, String templateKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling removeInstance(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling removeInstance(Async)");
        }

        // verify the required parameter 'templateKey' is set
        if (templateKey == null) {
            throw new ApiException("Missing the required parameter 'templateKey' when calling removeInstance(Async)");
        }

        return removeInstanceCall(folderId, scope, templateKey, _callback);

    }


    private ApiResponse<Void> removeInstanceWithHttpInfo(String folderId, String scope, String templateKey) throws ApiException {
        okhttp3.Call localVarCall = removeInstanceValidateBeforeCall(folderId, scope, templateKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeInstanceAsync(String folderId, String scope, String templateKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeInstanceValidateBeforeCall(folderId, scope, templateKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveInstanceRequestBuilder {
        private final String folderId;
        private final String scope;
        private final String templateKey;

        private RemoveInstanceRequestBuilder(String folderId, String scope, String templateKey) {
            this.folderId = folderId;
            this.scope = scope;
            this.templateKey = templateKey;
        }

        /**
         * Build call for removeInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the metadata is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeInstanceCall(folderId, scope, templateKey, _callback);
        }


        /**
         * Execute removeInstance request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the metadata is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeInstanceWithHttpInfo(folderId, scope, templateKey);
        }

        /**
         * Execute removeInstance request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the metadata is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeInstanceWithHttpInfo(folderId, scope, templateKey);
        }

        /**
         * Execute removeInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the metadata is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeInstanceAsync(folderId, scope, templateKey, _callback);
        }
    }

    /**
     * Remove metadata instance from folder
     * Deletes a piece of folder metadata.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @param scope The scope of the metadata template (required)
     * @param templateKey The name of the metadata template (required)
     * @return RemoveInstanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the metadata is successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveInstanceRequestBuilder removeInstance(String folderId, String scope, String templateKey) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (templateKey == null) throw new IllegalArgumentException("\"templateKey\" is required but got null");
            

        return new RemoveInstanceRequestBuilder(folderId, scope, templateKey);
    }
    private okhttp3.Call updateInstanceOnFolderCall(String folderId, String scope, String templateKey, List<AMetadataInstanceUpdateOperation1> ametadataInstanceUpdateOperation1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ametadataInstanceUpdateOperation1;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/metadata/{scope}/{template_key}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "template_key" + "}", localVarApiClient.escapeString(templateKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInstanceOnFolderValidateBeforeCall(String folderId, String scope, String templateKey, List<AMetadataInstanceUpdateOperation1> ametadataInstanceUpdateOperation1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling updateInstanceOnFolder(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateInstanceOnFolder(Async)");
        }

        // verify the required parameter 'templateKey' is set
        if (templateKey == null) {
            throw new ApiException("Missing the required parameter 'templateKey' when calling updateInstanceOnFolder(Async)");
        }

        return updateInstanceOnFolderCall(folderId, scope, templateKey, ametadataInstanceUpdateOperation1, _callback);

    }


    private ApiResponse<MetadataFull> updateInstanceOnFolderWithHttpInfo(String folderId, String scope, String templateKey, List<AMetadataInstanceUpdateOperation1> ametadataInstanceUpdateOperation1) throws ApiException {
        okhttp3.Call localVarCall = updateInstanceOnFolderValidateBeforeCall(folderId, scope, templateKey, ametadataInstanceUpdateOperation1, null);
        Type localVarReturnType = new TypeToken<MetadataFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInstanceOnFolderAsync(String folderId, String scope, String templateKey, List<AMetadataInstanceUpdateOperation1> ametadataInstanceUpdateOperation1, final ApiCallback<MetadataFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInstanceOnFolderValidateBeforeCall(folderId, scope, templateKey, ametadataInstanceUpdateOperation1, _callback);
        Type localVarReturnType = new TypeToken<MetadataFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateInstanceOnFolderRequestBuilder {
        private final String folderId;
        private final String scope;
        private final String templateKey;
        private List<AMetadataInstanceUpdateOperation1> ametadataInstanceUpdateOperation1;

        private UpdateInstanceOnFolderRequestBuilder(String folderId, String scope, String templateKey) {
            this.folderId = folderId;
            this.scope = scope;
            this.templateKey = templateKey;
        }

        /**
         * Set ametadataInstanceUpdateOperation1
         * @param ametadataInstanceUpdateOperation1  (optional)
         * @return UpdateInstanceOnFolderRequestBuilder
         */
        public UpdateInstanceOnFolderRequestBuilder ametadataInstanceUpdateOperation1(List<AMetadataInstanceUpdateOperation1> ametadataInstanceUpdateOperation1) {
            this.ametadataInstanceUpdateOperation1 = ametadataInstanceUpdateOperation1;
            return this;
        }

        /**
         * Build call for updateInstanceOnFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template instance, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<AMetadataInstanceUpdateOperation1> ametadataInstanceUpdateOperation1 = buildBodyParams();
            return updateInstanceOnFolderCall(folderId, scope, templateKey, ametadataInstanceUpdateOperation1, _callback);
        }

        private List<AMetadataInstanceUpdateOperation1> buildBodyParams() {
            return this.ametadataInstanceUpdateOperation1;
        }

        /**
         * Execute updateInstanceOnFolder request
         * @return MetadataFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template instance, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataFull execute() throws ApiException {
            List<AMetadataInstanceUpdateOperation1> ametadataInstanceUpdateOperation1 = buildBodyParams();
            ApiResponse<MetadataFull> localVarResp = updateInstanceOnFolderWithHttpInfo(folderId, scope, templateKey, ametadataInstanceUpdateOperation1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateInstanceOnFolder request with HTTP info returned
         * @return ApiResponse&lt;MetadataFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template instance, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataFull> executeWithHttpInfo() throws ApiException {
            List<AMetadataInstanceUpdateOperation1> ametadataInstanceUpdateOperation1 = buildBodyParams();
            return updateInstanceOnFolderWithHttpInfo(folderId, scope, templateKey, ametadataInstanceUpdateOperation1);
        }

        /**
         * Execute updateInstanceOnFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template instance, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataFull> _callback) throws ApiException {
            List<AMetadataInstanceUpdateOperation1> ametadataInstanceUpdateOperation1 = buildBodyParams();
            return updateInstanceOnFolderAsync(folderId, scope, templateKey, ametadataInstanceUpdateOperation1, _callback);
        }
    }

    /**
     * Update metadata instance on folder
     * Updates a piece of metadata on a folder.  The metadata instance can only be updated if the template has already been applied to the folder before. When editing metadata, only values that match the metadata template schema will be accepted.  The update is applied atomically. If any errors occur during the application of the operations, the metadata instance will not be changed.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @param scope The scope of the metadata template (required)
     * @param templateKey The name of the metadata template (required)
     * @return UpdateInstanceOnFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated metadata template instance, with the custom template data included. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInstanceOnFolderRequestBuilder updateInstanceOnFolder(String folderId, String scope, String templateKey) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (templateKey == null) throw new IllegalArgumentException("\"templateKey\" is required but got null");
            

        return new UpdateInstanceOnFolderRequestBuilder(folderId, scope, templateKey);
    }
}
