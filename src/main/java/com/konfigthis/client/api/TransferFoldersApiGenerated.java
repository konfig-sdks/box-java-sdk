/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FolderFull;
import com.konfigthis.client.model.TransferFoldersToDestinationRequest;
import com.konfigthis.client.model.TransferFoldersToDestinationRequestOwnedBy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TransferFoldersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransferFoldersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TransferFoldersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call toDestinationCall(String userId, List<String> fields, Boolean notify, TransferFoldersToDestinationRequest transferFoldersToDestinationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferFoldersToDestinationRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/folders/0"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (notify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notify", notify));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toDestinationValidateBeforeCall(String userId, List<String> fields, Boolean notify, TransferFoldersToDestinationRequest transferFoldersToDestinationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling toDestination(Async)");
        }

        return toDestinationCall(userId, fields, notify, transferFoldersToDestinationRequest, _callback);

    }


    private ApiResponse<FolderFull> toDestinationWithHttpInfo(String userId, List<String> fields, Boolean notify, TransferFoldersToDestinationRequest transferFoldersToDestinationRequest) throws ApiException {
        okhttp3.Call localVarCall = toDestinationValidateBeforeCall(userId, fields, notify, transferFoldersToDestinationRequest, null);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call toDestinationAsync(String userId, List<String> fields, Boolean notify, TransferFoldersToDestinationRequest transferFoldersToDestinationRequest, final ApiCallback<FolderFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = toDestinationValidateBeforeCall(userId, fields, notify, transferFoldersToDestinationRequest, _callback);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ToDestinationRequestBuilder {
        private final TransferFoldersToDestinationRequestOwnedBy ownedBy;
        private final String userId;
        private List<String> fields;
        private Boolean notify;

        private ToDestinationRequestBuilder(TransferFoldersToDestinationRequestOwnedBy ownedBy, String userId) {
            this.ownedBy = ownedBy;
            this.userId = userId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return ToDestinationRequestBuilder
         */
        public ToDestinationRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set notify
         * @param notify Determines if users should receive email notification for the action performed. (optional)
         * @return ToDestinationRequestBuilder
         */
        public ToDestinationRequestBuilder notify(Boolean notify) {
            this.notify = notify;
            return this;
        }
        
        /**
         * Build call for toDestination
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the information for the newly created destination folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransferFoldersToDestinationRequest transferFoldersToDestinationRequest = buildBodyParams();
            return toDestinationCall(userId, fields, notify, transferFoldersToDestinationRequest, _callback);
        }

        private TransferFoldersToDestinationRequest buildBodyParams() {
            TransferFoldersToDestinationRequest transferFoldersToDestinationRequest = new TransferFoldersToDestinationRequest();
            transferFoldersToDestinationRequest.ownedBy(this.ownedBy);
            return transferFoldersToDestinationRequest;
        }

        /**
         * Execute toDestination request
         * @return FolderFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the information for the newly created destination folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FolderFull execute() throws ApiException {
            TransferFoldersToDestinationRequest transferFoldersToDestinationRequest = buildBodyParams();
            ApiResponse<FolderFull> localVarResp = toDestinationWithHttpInfo(userId, fields, notify, transferFoldersToDestinationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute toDestination request with HTTP info returned
         * @return ApiResponse&lt;FolderFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the information for the newly created destination folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FolderFull> executeWithHttpInfo() throws ApiException {
            TransferFoldersToDestinationRequest transferFoldersToDestinationRequest = buildBodyParams();
            return toDestinationWithHttpInfo(userId, fields, notify, transferFoldersToDestinationRequest);
        }

        /**
         * Execute toDestination request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the information for the newly created destination folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FolderFull> _callback) throws ApiException {
            TransferFoldersToDestinationRequest transferFoldersToDestinationRequest = buildBodyParams();
            return toDestinationAsync(userId, fields, notify, transferFoldersToDestinationRequest, _callback);
        }
    }

    /**
     * Transfer owned folders
     * Move all of the items (files, folders and workflows) owned by a user into another user&#39;s account  Only the root folder (&#x60;0&#x60;) can be transferred.  Folders can only be moved across users by users with administrative permissions.  All existing shared links and folder-level collaborations are transferred during the operation. Please note that while collaborations at the individual file-level are transferred during the operation, the collaborations are deleted when the original user is deleted.  This call will be performed synchronously which might lead to a slow response when the source user has a large number of items in all of its folders.  If the destination path has a metadata cascade policy attached to any of the parent folders, a metadata cascade operation will be kicked off asynchronously.  There is currently no way to check for when this operation is finished.  The destination folder&#39;s name will be in the format &#x60;{User}&#39;s Files and Folders&#x60;, where &#x60;{User}&#x60; is the display name of the user.  To make this API call your application will need to have the \&quot;Read and write all files and folders stored in Box\&quot; scope enabled.  Please make sure the destination user has access to &#x60;Relay&#x60; or &#x60;Relay Lite&#x60;, and has access to the files and folders involved in the workflows being transferred.  Admins will receive an email when the operation is completed.
     * @param userId The ID of the user. (required)
     * @return ToDestinationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the information for the newly created destination folder. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ToDestinationRequestBuilder toDestination(TransferFoldersToDestinationRequestOwnedBy ownedBy, String userId) throws IllegalArgumentException {
        if (ownedBy == null) throw new IllegalArgumentException("\"ownedBy\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ToDestinationRequestBuilder(ownedBy, userId);
    }
}
