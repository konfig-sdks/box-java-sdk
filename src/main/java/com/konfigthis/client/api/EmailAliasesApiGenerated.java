/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.EmailAlias;
import com.konfigthis.client.model.EmailAliases;
import com.konfigthis.client.model.EmailAliasesCreateNewAliasRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmailAliasesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmailAliasesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmailAliasesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewAliasCall(String userId, EmailAliasesCreateNewAliasRequest emailAliasesCreateNewAliasRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailAliasesCreateNewAliasRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/email_aliases"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAliasValidateBeforeCall(String userId, EmailAliasesCreateNewAliasRequest emailAliasesCreateNewAliasRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createNewAlias(Async)");
        }

        return createNewAliasCall(userId, emailAliasesCreateNewAliasRequest, _callback);

    }


    private ApiResponse<EmailAlias> createNewAliasWithHttpInfo(String userId, EmailAliasesCreateNewAliasRequest emailAliasesCreateNewAliasRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewAliasValidateBeforeCall(userId, emailAliasesCreateNewAliasRequest, null);
        Type localVarReturnType = new TypeToken<EmailAlias>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAliasAsync(String userId, EmailAliasesCreateNewAliasRequest emailAliasesCreateNewAliasRequest, final ApiCallback<EmailAlias> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAliasValidateBeforeCall(userId, emailAliasesCreateNewAliasRequest, _callback);
        Type localVarReturnType = new TypeToken<EmailAlias>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAliasRequestBuilder {
        private final String email;
        private final String userId;

        private CreateNewAliasRequestBuilder(String email, String userId) {
            this.email = email;
            this.userId = userId;
        }

        /**
         * Build call for createNewAlias
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the newly created email alias object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmailAliasesCreateNewAliasRequest emailAliasesCreateNewAliasRequest = buildBodyParams();
            return createNewAliasCall(userId, emailAliasesCreateNewAliasRequest, _callback);
        }

        private EmailAliasesCreateNewAliasRequest buildBodyParams() {
            EmailAliasesCreateNewAliasRequest emailAliasesCreateNewAliasRequest = new EmailAliasesCreateNewAliasRequest();
            emailAliasesCreateNewAliasRequest.email(this.email);
            return emailAliasesCreateNewAliasRequest;
        }

        /**
         * Execute createNewAlias request
         * @return EmailAlias
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the newly created email alias object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public EmailAlias execute() throws ApiException {
            EmailAliasesCreateNewAliasRequest emailAliasesCreateNewAliasRequest = buildBodyParams();
            ApiResponse<EmailAlias> localVarResp = createNewAliasWithHttpInfo(userId, emailAliasesCreateNewAliasRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAlias request with HTTP info returned
         * @return ApiResponse&lt;EmailAlias&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the newly created email alias object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailAlias> executeWithHttpInfo() throws ApiException {
            EmailAliasesCreateNewAliasRequest emailAliasesCreateNewAliasRequest = buildBodyParams();
            return createNewAliasWithHttpInfo(userId, emailAliasesCreateNewAliasRequest);
        }

        /**
         * Execute createNewAlias request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the newly created email alias object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailAlias> _callback) throws ApiException {
            EmailAliasesCreateNewAliasRequest emailAliasesCreateNewAliasRequest = buildBodyParams();
            return createNewAliasAsync(userId, emailAliasesCreateNewAliasRequest, _callback);
        }
    }

    /**
     * Create email alias
     * Adds a new email alias to a user account..
     * @param userId The ID of the user. (required)
     * @return CreateNewAliasRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created email alias object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAliasRequestBuilder createNewAlias(String email, String userId) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new CreateNewAliasRequestBuilder(email, userId);
    }
    private okhttp3.Call listUserEmailAliasesCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/email_aliases"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserEmailAliasesValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listUserEmailAliases(Async)");
        }

        return listUserEmailAliasesCall(userId, _callback);

    }


    private ApiResponse<EmailAliases> listUserEmailAliasesWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = listUserEmailAliasesValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<EmailAliases>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserEmailAliasesAsync(String userId, final ApiCallback<EmailAliases> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserEmailAliasesValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<EmailAliases>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserEmailAliasesRequestBuilder {
        private final String userId;

        private ListUserEmailAliasesRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for listUserEmailAliases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of email aliases. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserEmailAliasesCall(userId, _callback);
        }


        /**
         * Execute listUserEmailAliases request
         * @return EmailAliases
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of email aliases. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public EmailAliases execute() throws ApiException {
            ApiResponse<EmailAliases> localVarResp = listUserEmailAliasesWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserEmailAliases request with HTTP info returned
         * @return ApiResponse&lt;EmailAliases&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of email aliases. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailAliases> executeWithHttpInfo() throws ApiException {
            return listUserEmailAliasesWithHttpInfo(userId);
        }

        /**
         * Execute listUserEmailAliases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of email aliases. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailAliases> _callback) throws ApiException {
            return listUserEmailAliasesAsync(userId, _callback);
        }
    }

    /**
     * List user&#39;s email aliases
     * Retrieves all email aliases for a user. The collection does not include the primary login for the user.
     * @param userId The ID of the user. (required)
     * @return ListUserEmailAliasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of email aliases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListUserEmailAliasesRequestBuilder listUserEmailAliases(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListUserEmailAliasesRequestBuilder(userId);
    }
    private okhttp3.Call removeAliasCall(String userId, String emailAliasId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/email_aliases/{email_alias_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "email_alias_id" + "}", localVarApiClient.escapeString(emailAliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAliasValidateBeforeCall(String userId, String emailAliasId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeAlias(Async)");
        }

        // verify the required parameter 'emailAliasId' is set
        if (emailAliasId == null) {
            throw new ApiException("Missing the required parameter 'emailAliasId' when calling removeAlias(Async)");
        }

        return removeAliasCall(userId, emailAliasId, _callback);

    }


    private ApiResponse<Void> removeAliasWithHttpInfo(String userId, String emailAliasId) throws ApiException {
        okhttp3.Call localVarCall = removeAliasValidateBeforeCall(userId, emailAliasId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAliasAsync(String userId, String emailAliasId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAliasValidateBeforeCall(userId, emailAliasId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveAliasRequestBuilder {
        private final String userId;
        private final String emailAliasId;

        private RemoveAliasRequestBuilder(String userId, String emailAliasId) {
            this.userId = userId;
            this.emailAliasId = emailAliasId;
        }

        /**
         * Build call for removeAlias
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes the alias and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeAliasCall(userId, emailAliasId, _callback);
        }


        /**
         * Execute removeAlias request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes the alias and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeAliasWithHttpInfo(userId, emailAliasId);
        }

        /**
         * Execute removeAlias request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes the alias and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeAliasWithHttpInfo(userId, emailAliasId);
        }

        /**
         * Execute removeAlias request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes the alias and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAliasAsync(userId, emailAliasId, _callback);
        }
    }

    /**
     * Remove email alias
     * Removes an email alias from a user.
     * @param userId The ID of the user. (required)
     * @param emailAliasId The ID of the email alias. (required)
     * @return RemoveAliasRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes the alias and returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAliasRequestBuilder removeAlias(String userId, String emailAliasId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (emailAliasId == null) throw new IllegalArgumentException("\"emailAliasId\" is required but got null");
            

        return new RemoveAliasRequestBuilder(userId, emailAliasId);
    }
}
