/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FileVersionRetention;
import com.konfigthis.client.model.FileVersionRetentions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FileVersionRetentionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileVersionRetentionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FileVersionRetentionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getFileVersionRetentionInfoCall(String fileVersionRetentionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file_version_retentions/{file_version_retention_id}"
            .replace("{" + "file_version_retention_id" + "}", localVarApiClient.escapeString(fileVersionRetentionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileVersionRetentionInfoValidateBeforeCall(String fileVersionRetentionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileVersionRetentionId' is set
        if (fileVersionRetentionId == null) {
            throw new ApiException("Missing the required parameter 'fileVersionRetentionId' when calling getFileVersionRetentionInfo(Async)");
        }

        return getFileVersionRetentionInfoCall(fileVersionRetentionId, _callback);

    }


    private ApiResponse<FileVersionRetention> getFileVersionRetentionInfoWithHttpInfo(String fileVersionRetentionId) throws ApiException {
        okhttp3.Call localVarCall = getFileVersionRetentionInfoValidateBeforeCall(fileVersionRetentionId, null);
        Type localVarReturnType = new TypeToken<FileVersionRetention>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFileVersionRetentionInfoAsync(String fileVersionRetentionId, final ApiCallback<FileVersionRetention> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileVersionRetentionInfoValidateBeforeCall(fileVersionRetentionId, _callback);
        Type localVarReturnType = new TypeToken<FileVersionRetention>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFileVersionRetentionInfoRequestBuilder {
        private final String fileVersionRetentionId;

        private GetFileVersionRetentionInfoRequestBuilder(String fileVersionRetentionId) {
            this.fileVersionRetentionId = fileVersionRetentionId;
        }

        /**
         * Build call for getFileVersionRetentionInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file version retention object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFileVersionRetentionInfoCall(fileVersionRetentionId, _callback);
        }


        /**
         * Execute getFileVersionRetentionInfo request
         * @return FileVersionRetention
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file version retention object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileVersionRetention execute() throws ApiException {
            ApiResponse<FileVersionRetention> localVarResp = getFileVersionRetentionInfoWithHttpInfo(fileVersionRetentionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFileVersionRetentionInfo request with HTTP info returned
         * @return ApiResponse&lt;FileVersionRetention&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file version retention object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileVersionRetention> executeWithHttpInfo() throws ApiException {
            return getFileVersionRetentionInfoWithHttpInfo(fileVersionRetentionId);
        }

        /**
         * Execute getFileVersionRetentionInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file version retention object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileVersionRetention> _callback) throws ApiException {
            return getFileVersionRetentionInfoAsync(fileVersionRetentionId, _callback);
        }
    }

    /**
     * Get retention on file
     * Returns information about a file version retention.
     * @param fileVersionRetentionId The ID of the file version retention (required)
     * @return GetFileVersionRetentionInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a file version retention object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetFileVersionRetentionInfoRequestBuilder getFileVersionRetentionInfo(String fileVersionRetentionId) throws IllegalArgumentException {
        if (fileVersionRetentionId == null) throw new IllegalArgumentException("\"fileVersionRetentionId\" is required but got null");
            

        return new GetFileVersionRetentionInfoRequestBuilder(fileVersionRetentionId);
    }
    private okhttp3.Call listRetentionsCall(String fileId, String fileVersionId, String policyId, String dispositionAction, String dispositionBefore, String dispositionAfter, Long limit, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file_version_retentions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        if (fileVersionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_version_id", fileVersionId));
        }

        if (policyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_id", policyId));
        }

        if (dispositionAction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disposition_action", dispositionAction));
        }

        if (dispositionBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disposition_before", dispositionBefore));
        }

        if (dispositionAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disposition_after", dispositionAfter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRetentionsValidateBeforeCall(String fileId, String fileVersionId, String policyId, String dispositionAction, String dispositionBefore, String dispositionAfter, Long limit, String marker, final ApiCallback _callback) throws ApiException {
        return listRetentionsCall(fileId, fileVersionId, policyId, dispositionAction, dispositionBefore, dispositionAfter, limit, marker, _callback);

    }


    private ApiResponse<FileVersionRetentions> listRetentionsWithHttpInfo(String fileId, String fileVersionId, String policyId, String dispositionAction, String dispositionBefore, String dispositionAfter, Long limit, String marker) throws ApiException {
        okhttp3.Call localVarCall = listRetentionsValidateBeforeCall(fileId, fileVersionId, policyId, dispositionAction, dispositionBefore, dispositionAfter, limit, marker, null);
        Type localVarReturnType = new TypeToken<FileVersionRetentions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRetentionsAsync(String fileId, String fileVersionId, String policyId, String dispositionAction, String dispositionBefore, String dispositionAfter, Long limit, String marker, final ApiCallback<FileVersionRetentions> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRetentionsValidateBeforeCall(fileId, fileVersionId, policyId, dispositionAction, dispositionBefore, dispositionAfter, limit, marker, _callback);
        Type localVarReturnType = new TypeToken<FileVersionRetentions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRetentionsRequestBuilder {
        private String fileId;
        private String fileVersionId;
        private String policyId;
        private String dispositionAction;
        private String dispositionBefore;
        private String dispositionAfter;
        private Long limit;
        private String marker;

        private ListRetentionsRequestBuilder() {
        }

        /**
         * Set fileId
         * @param fileId Filters results by files with this ID. (optional)
         * @return ListRetentionsRequestBuilder
         */
        public ListRetentionsRequestBuilder fileId(String fileId) {
            this.fileId = fileId;
            return this;
        }
        
        /**
         * Set fileVersionId
         * @param fileVersionId Filters results by file versions with this ID. (optional)
         * @return ListRetentionsRequestBuilder
         */
        public ListRetentionsRequestBuilder fileVersionId(String fileVersionId) {
            this.fileVersionId = fileVersionId;
            return this;
        }
        
        /**
         * Set policyId
         * @param policyId Filters results by the retention policy with this ID. (optional)
         * @return ListRetentionsRequestBuilder
         */
        public ListRetentionsRequestBuilder policyId(String policyId) {
            this.policyId = policyId;
            return this;
        }
        
        /**
         * Set dispositionAction
         * @param dispositionAction Filters results by the retention policy with this disposition action. (optional)
         * @return ListRetentionsRequestBuilder
         */
        public ListRetentionsRequestBuilder dispositionAction(String dispositionAction) {
            this.dispositionAction = dispositionAction;
            return this;
        }
        
        /**
         * Set dispositionBefore
         * @param dispositionBefore Filters results by files that will have their disposition come into effect before this date. (optional)
         * @return ListRetentionsRequestBuilder
         */
        public ListRetentionsRequestBuilder dispositionBefore(String dispositionBefore) {
            this.dispositionBefore = dispositionBefore;
            return this;
        }
        
        /**
         * Set dispositionAfter
         * @param dispositionAfter Filters results by files that will have their disposition come into effect after this date. (optional)
         * @return ListRetentionsRequestBuilder
         */
        public ListRetentionsRequestBuilder dispositionAfter(String dispositionAfter) {
            this.dispositionAfter = dispositionAfter;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListRetentionsRequestBuilder
         */
        public ListRetentionsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListRetentionsRequestBuilder
         */
        public ListRetentionsRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Build call for listRetentions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of all file version retentions for the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRetentionsCall(fileId, fileVersionId, policyId, dispositionAction, dispositionBefore, dispositionAfter, limit, marker, _callback);
        }


        /**
         * Execute listRetentions request
         * @return FileVersionRetentions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of all file version retentions for the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileVersionRetentions execute() throws ApiException {
            ApiResponse<FileVersionRetentions> localVarResp = listRetentionsWithHttpInfo(fileId, fileVersionId, policyId, dispositionAction, dispositionBefore, dispositionAfter, limit, marker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRetentions request with HTTP info returned
         * @return ApiResponse&lt;FileVersionRetentions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of all file version retentions for the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileVersionRetentions> executeWithHttpInfo() throws ApiException {
            return listRetentionsWithHttpInfo(fileId, fileVersionId, policyId, dispositionAction, dispositionBefore, dispositionAfter, limit, marker);
        }

        /**
         * Execute listRetentions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of all file version retentions for the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileVersionRetentions> _callback) throws ApiException {
            return listRetentionsAsync(fileId, fileVersionId, policyId, dispositionAction, dispositionBefore, dispositionAfter, limit, marker, _callback);
        }
    }

    /**
     * List file version retentions
     * Retrieves all file version retentions for the given enterprise.
     * @return ListRetentionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all file version retentions for the enterprise. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListRetentionsRequestBuilder listRetentions() throws IllegalArgumentException {
        return new ListRetentionsRequestBuilder();
    }
}
