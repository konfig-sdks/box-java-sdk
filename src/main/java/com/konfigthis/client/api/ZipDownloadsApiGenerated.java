/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import java.io.File;
import com.konfigthis.client.model.ZipDownload;
import com.konfigthis.client.model.ZipDownloadRequest;
import com.konfigthis.client.model.ZipDownloadRequestItemsInner;
import com.konfigthis.client.model.ZipDownloadStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ZipDownloadsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZipDownloadsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ZipDownloadsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRequestCall(ZipDownloadRequest zipDownloadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zipDownloadRequest;

        // create path and map variables
        String localVarPath = "/zip_downloads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRequestValidateBeforeCall(ZipDownloadRequest zipDownloadRequest, final ApiCallback _callback) throws ApiException {
        return createRequestCall(zipDownloadRequest, _callback);

    }


    private ApiResponse<ZipDownload> createRequestWithHttpInfo(ZipDownloadRequest zipDownloadRequest) throws ApiException {
        okhttp3.Call localVarCall = createRequestValidateBeforeCall(zipDownloadRequest, null);
        Type localVarReturnType = new TypeToken<ZipDownload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRequestAsync(ZipDownloadRequest zipDownloadRequest, final ApiCallback<ZipDownload> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRequestValidateBeforeCall(zipDownloadRequest, _callback);
        Type localVarReturnType = new TypeToken<ZipDownload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestRequestBuilder {
        private final List<ZipDownloadRequestItemsInner> items;
        private String downloadFileName;

        private CreateRequestRequestBuilder(List<ZipDownloadRequestItemsInner> items) {
            this.items = items;
        }

        /**
         * Set downloadFileName
         * @param downloadFileName The optional name of the &#x60;zip&#x60; archive. This name will be appended by the &#x60;.zip&#x60; file extension, for example &#x60;January Financials.zip&#x60;. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder downloadFileName(String downloadFileName) {
            this.downloadFileName = downloadFileName;
            return this;
        }
        
        /**
         * Build call for createRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> If the &#x60;zip&#x60; archive is ready to be downloaded, the API will return a response that will include a &#x60;download_url&#x60;, a &#x60;status_url&#x60;, as well as any conflicts that might have occurred when creating the request. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ZipDownloadRequest zipDownloadRequest = buildBodyParams();
            return createRequestCall(zipDownloadRequest, _callback);
        }

        private ZipDownloadRequest buildBodyParams() {
            ZipDownloadRequest zipDownloadRequest = new ZipDownloadRequest();
            zipDownloadRequest.items(this.items);
            zipDownloadRequest.downloadFileName(this.downloadFileName);
            return zipDownloadRequest;
        }

        /**
         * Execute createRequest request
         * @return ZipDownload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> If the &#x60;zip&#x60; archive is ready to be downloaded, the API will return a response that will include a &#x60;download_url&#x60;, a &#x60;status_url&#x60;, as well as any conflicts that might have occurred when creating the request. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ZipDownload execute() throws ApiException {
            ZipDownloadRequest zipDownloadRequest = buildBodyParams();
            ApiResponse<ZipDownload> localVarResp = createRequestWithHttpInfo(zipDownloadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRequest request with HTTP info returned
         * @return ApiResponse&lt;ZipDownload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> If the &#x60;zip&#x60; archive is ready to be downloaded, the API will return a response that will include a &#x60;download_url&#x60;, a &#x60;status_url&#x60;, as well as any conflicts that might have occurred when creating the request. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ZipDownload> executeWithHttpInfo() throws ApiException {
            ZipDownloadRequest zipDownloadRequest = buildBodyParams();
            return createRequestWithHttpInfo(zipDownloadRequest);
        }

        /**
         * Execute createRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> If the &#x60;zip&#x60; archive is ready to be downloaded, the API will return a response that will include a &#x60;download_url&#x60;, a &#x60;status_url&#x60;, as well as any conflicts that might have occurred when creating the request. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ZipDownload> _callback) throws ApiException {
            ZipDownloadRequest zipDownloadRequest = buildBodyParams();
            return createRequestAsync(zipDownloadRequest, _callback);
        }
    }

    /**
     * Create zip download
     * Creates a request to download multiple files and folders as a single &#x60;zip&#x60; archive file. This API does not return the archive but instead performs all the checks to ensure that the user has access to all the items, and then returns a &#x60;download_url&#x60; and a &#x60;status_url&#x60; that can be used to download the archive.  The limit for an archive is either the Account&#39;s upload limit or 10,000 files, whichever is met first.  **Note**: Downloading a large file can be affected by various factors such as distance, network latency, bandwidth, and congestion, as well as packet loss ratio and current server load. For these reasons we recommend that a maximum ZIP archive total size does not exceed 25GB.
     * @return CreateRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> If the &#x60;zip&#x60; archive is ready to be downloaded, the API will return a response that will include a &#x60;download_url&#x60;, a &#x60;status_url&#x60;, as well as any conflicts that might have occurred when creating the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestRequestBuilder createRequest(List<ZipDownloadRequestItemsInner> items) throws IllegalArgumentException {
        if (items == null) throw new IllegalArgumentException("\"items\" is required but got null");
        return new CreateRequestRequestBuilder(items);
    }
    private okhttp3.Call getContentByIdCall(String zipDownloadId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://dl.boxcloud.com/2.0" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zip_downloads/{zip_download_id}/content"
            .replace("{" + "zip_download_id" + "}", localVarApiClient.escapeString(zipDownloadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentByIdValidateBeforeCall(String zipDownloadId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zipDownloadId' is set
        if (zipDownloadId == null) {
            throw new ApiException("Missing the required parameter 'zipDownloadId' when calling getContentById(Async)");
        }

        return getContentByIdCall(zipDownloadId, _callback);

    }


    private ApiResponse<File> getContentByIdWithHttpInfo(String zipDownloadId) throws ApiException {
        okhttp3.Call localVarCall = getContentByIdValidateBeforeCall(zipDownloadId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentByIdAsync(String zipDownloadId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentByIdValidateBeforeCall(zipDownloadId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentByIdRequestBuilder {
        private final String zipDownloadId;

        private GetContentByIdRequestBuilder(String zipDownloadId) {
            this.zipDownloadId = zipDownloadId;
        }

        /**
         * Build call for getContentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the content of the items requested for this download, formatted as a stream of files and folders in a &#x60;zip&#x60; archive. </td><td>  * Content-Disposition - The name of the archive to be downloaded <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentByIdCall(zipDownloadId, _callback);
        }


        /**
         * Execute getContentById request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the content of the items requested for this download, formatted as a stream of files and folders in a &#x60;zip&#x60; archive. </td><td>  * Content-Disposition - The name of the archive to be downloaded <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getContentByIdWithHttpInfo(zipDownloadId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContentById request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the content of the items requested for this download, formatted as a stream of files and folders in a &#x60;zip&#x60; archive. </td><td>  * Content-Disposition - The name of the archive to be downloaded <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getContentByIdWithHttpInfo(zipDownloadId);
        }

        /**
         * Execute getContentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the content of the items requested for this download, formatted as a stream of files and folders in a &#x60;zip&#x60; archive. </td><td>  * Content-Disposition - The name of the archive to be downloaded <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getContentByIdAsync(zipDownloadId, _callback);
        }
    }

    /**
     * Download zip archive
     * Returns the contents of a &#x60;zip&#x60; archive in binary format. This URL does not require any form of authentication and could be used in a user&#39;s browser to download the archive to a user&#39;s device.  By default, this URL is only valid for a few seconds from the creation of the request for this archive. Once a download has started it can not be stopped and resumed, instead a new request for a zip archive would need to be created.  The URL of this endpoint should not be considered as fixed. Instead, use the [Create zip download](e://post_zip_downloads) API to request to create a &#x60;zip&#x60; archive, and then follow the &#x60;download_url&#x60; field in the response to this endpoint.
     * @param zipDownloadId The unique identifier that represent this &#x60;zip&#x60; archive. (required)
     * @return GetContentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the content of the items requested for this download, formatted as a stream of files and folders in a &#x60;zip&#x60; archive. </td><td>  * Content-Disposition - The name of the archive to be downloaded <br>  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetContentByIdRequestBuilder getContentById(String zipDownloadId) throws IllegalArgumentException {
        if (zipDownloadId == null) throw new IllegalArgumentException("\"zipDownloadId\" is required but got null");
            

        return new GetContentByIdRequestBuilder(zipDownloadId);
    }
    private okhttp3.Call getStatusCall(String zipDownloadId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zip_downloads/{zip_download_id}/status"
            .replace("{" + "zip_download_id" + "}", localVarApiClient.escapeString(zipDownloadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusValidateBeforeCall(String zipDownloadId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zipDownloadId' is set
        if (zipDownloadId == null) {
            throw new ApiException("Missing the required parameter 'zipDownloadId' when calling getStatus(Async)");
        }

        return getStatusCall(zipDownloadId, _callback);

    }


    private ApiResponse<ZipDownloadStatus> getStatusWithHttpInfo(String zipDownloadId) throws ApiException {
        okhttp3.Call localVarCall = getStatusValidateBeforeCall(zipDownloadId, null);
        Type localVarReturnType = new TypeToken<ZipDownloadStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatusAsync(String zipDownloadId, final ApiCallback<ZipDownloadStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusValidateBeforeCall(zipDownloadId, _callback);
        Type localVarReturnType = new TypeToken<ZipDownloadStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatusRequestBuilder {
        private final String zipDownloadId;

        private GetStatusRequestBuilder(String zipDownloadId) {
            this.zipDownloadId = zipDownloadId;
        }

        /**
         * Build call for getStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the status of the &#x60;zip&#x60; archive that is being downloaded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatusCall(zipDownloadId, _callback);
        }


        /**
         * Execute getStatus request
         * @return ZipDownloadStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the status of the &#x60;zip&#x60; archive that is being downloaded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ZipDownloadStatus execute() throws ApiException {
            ApiResponse<ZipDownloadStatus> localVarResp = getStatusWithHttpInfo(zipDownloadId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatus request with HTTP info returned
         * @return ApiResponse&lt;ZipDownloadStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the status of the &#x60;zip&#x60; archive that is being downloaded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ZipDownloadStatus> executeWithHttpInfo() throws ApiException {
            return getStatusWithHttpInfo(zipDownloadId);
        }

        /**
         * Execute getStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the status of the &#x60;zip&#x60; archive that is being downloaded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ZipDownloadStatus> _callback) throws ApiException {
            return getStatusAsync(zipDownloadId, _callback);
        }
    }

    /**
     * Get zip download status
     * Returns the download status of a &#x60;zip&#x60; archive, allowing an application to inspect the progress of the download as well as the number of items that might have been skipped.  This endpoint can only be accessed once the download has started. Subsequently this endpoint is valid for 12 hours from the start of the download.  The URL of this endpoint should not be considered as fixed. Instead, use the [Create zip download](e://post_zip_downloads) API to request to create a &#x60;zip&#x60; archive, and then follow the &#x60;status_url&#x60; field in the response to this endpoint.
     * @param zipDownloadId The unique identifier that represent this &#x60;zip&#x60; archive. (required)
     * @return GetStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of the &#x60;zip&#x60; archive that is being downloaded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusRequestBuilder getStatus(String zipDownloadId) throws IllegalArgumentException {
        if (zipDownloadId == null) throw new IllegalArgumentException("\"zipDownloadId\" is required but got null");
            

        return new GetStatusRequestBuilder(zipDownloadId);
    }
}
