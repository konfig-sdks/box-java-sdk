/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FileBase;
import com.konfigthis.client.model.FolderMini;
import com.konfigthis.client.model.SignRequest;
import com.konfigthis.client.model.SignRequestCreateRequest;
import com.konfigthis.client.model.SignRequestCreateSigner;
import com.konfigthis.client.model.SignRequestPrefillTag;
import com.konfigthis.client.model.SignRequests;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SignRequestsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SignRequestsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SignRequestsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelRequestCall(String signRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sign_requests/{sign_request_id}/cancel"
            .replace("{" + "sign_request_id" + "}", localVarApiClient.escapeString(signRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelRequestValidateBeforeCall(String signRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signRequestId' is set
        if (signRequestId == null) {
            throw new ApiException("Missing the required parameter 'signRequestId' when calling cancelRequest(Async)");
        }

        return cancelRequestCall(signRequestId, _callback);

    }


    private ApiResponse<SignRequest> cancelRequestWithHttpInfo(String signRequestId) throws ApiException {
        okhttp3.Call localVarCall = cancelRequestValidateBeforeCall(signRequestId, null);
        Type localVarReturnType = new TypeToken<SignRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelRequestAsync(String signRequestId, final ApiCallback<SignRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelRequestValidateBeforeCall(signRequestId, _callback);
        Type localVarReturnType = new TypeToken<SignRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelRequestRequestBuilder {
        private final String signRequestId;

        private CancelRequestRequestBuilder(String signRequestId) {
            this.signRequestId = signRequestId;
        }

        /**
         * Build call for cancelRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Sign Request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelRequestCall(signRequestId, _callback);
        }


        /**
         * Execute cancelRequest request
         * @return SignRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Sign Request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public SignRequest execute() throws ApiException {
            ApiResponse<SignRequest> localVarResp = cancelRequestWithHttpInfo(signRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelRequest request with HTTP info returned
         * @return ApiResponse&lt;SignRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Sign Request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SignRequest> executeWithHttpInfo() throws ApiException {
            return cancelRequestWithHttpInfo(signRequestId);
        }

        /**
         * Execute cancelRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Sign Request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SignRequest> _callback) throws ApiException {
            return cancelRequestAsync(signRequestId, _callback);
        }
    }

    /**
     * Cancel sign request
     * Cancels a sign request.
     * @param signRequestId The ID of the sign request (required)
     * @return CancelRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Sign Request object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CancelRequestRequestBuilder cancelRequest(String signRequestId) throws IllegalArgumentException {
        if (signRequestId == null) throw new IllegalArgumentException("\"signRequestId\" is required but got null");
            

        return new CancelRequestRequestBuilder(signRequestId);
    }
    private okhttp3.Call createRequestCall(SignRequestCreateRequest signRequestCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signRequestCreateRequest;

        // create path and map variables
        String localVarPath = "/sign_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRequestValidateBeforeCall(SignRequestCreateRequest signRequestCreateRequest, final ApiCallback _callback) throws ApiException {
        return createRequestCall(signRequestCreateRequest, _callback);

    }


    private ApiResponse<SignRequest> createRequestWithHttpInfo(SignRequestCreateRequest signRequestCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createRequestValidateBeforeCall(signRequestCreateRequest, null);
        Type localVarReturnType = new TypeToken<SignRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRequestAsync(SignRequestCreateRequest signRequestCreateRequest, final ApiCallback<SignRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRequestValidateBeforeCall(signRequestCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<SignRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestRequestBuilder {
        private final List<SignRequestCreateSigner> signers;
        private Boolean isDocumentPreparationNeeded;
        private String redirectUrl;
        private String declinedRedirectUrl;
        private Boolean areTextSignaturesEnabled;
        private String emailSubject;
        private String emailMessage;
        private Boolean areRemindersEnabled;
        private String name;
        private List<SignRequestPrefillTag> prefillTags;
        private Integer daysValid;
        private String externalId;
        private Boolean isPhoneVerificationRequiredToView;
        private String templateId;
        private List<FileBase> sourceFiles;
        private String signatureColor;
        private FolderMini parentFolder;

        private CreateRequestRequestBuilder(List<SignRequestCreateSigner> signers) {
            this.signers = signers;
        }

        /**
         * Set isDocumentPreparationNeeded
         * @param isDocumentPreparationNeeded Indicates if the sender should receive a &#x60;prepare_url&#x60; in the response to complete document preparation via UI. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder isDocumentPreparationNeeded(Boolean isDocumentPreparationNeeded) {
            this.isDocumentPreparationNeeded = isDocumentPreparationNeeded;
            return this;
        }
        
        /**
         * Set redirectUrl
         * @param redirectUrl When specified, signature request will be redirected to this url when a document is signed. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder redirectUrl(String redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }
        
        /**
         * Set declinedRedirectUrl
         * @param declinedRedirectUrl The uri that a signer will be redirected to after declining to sign a document. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder declinedRedirectUrl(String declinedRedirectUrl) {
            this.declinedRedirectUrl = declinedRedirectUrl;
            return this;
        }
        
        /**
         * Set areTextSignaturesEnabled
         * @param areTextSignaturesEnabled Disables the usage of signatures generated by typing (text). (optional, default to true)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder areTextSignaturesEnabled(Boolean areTextSignaturesEnabled) {
            this.areTextSignaturesEnabled = areTextSignaturesEnabled;
            return this;
        }
        
        /**
         * Set emailSubject
         * @param emailSubject Subject of sign request email. This is cleaned by sign request. If this field is not passed, a default subject will be used. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder emailSubject(String emailSubject) {
            this.emailSubject = emailSubject;
            return this;
        }
        
        /**
         * Set emailMessage
         * @param emailMessage Message to include in sign request email. The field is cleaned through sanitization of specific characters. However, some html tags are allowed. Links included in the message are also converted to hyperlinks in the email. The message may contain the following html tags including &#x60;a&#x60;, &#x60;abbr&#x60;, &#x60;acronym&#x60;, &#x60;b&#x60;, &#x60;blockquote&#x60;, &#x60;code&#x60;, &#x60;em&#x60;, &#x60;i&#x60;, &#x60;ul&#x60;, &#x60;li&#x60;, &#x60;ol&#x60;, and &#x60;strong&#x60;. Be aware that when the text to html ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed. If this field is not passed, a default message will be used. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder emailMessage(String emailMessage) {
            this.emailMessage = emailMessage;
            return this;
        }
        
        /**
         * Set areRemindersEnabled
         * @param areRemindersEnabled Reminds signers to sign a document on day 3, 8, 13 and 18. Reminders are only sent to outstanding signers. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder areRemindersEnabled(Boolean areRemindersEnabled) {
            this.areRemindersEnabled = areRemindersEnabled;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the sign request. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set prefillTags
         * @param prefillTags When a document contains sign related tags in the content, you can prefill them using this &#x60;prefill_tags&#x60; by referencing the &#39;id&#39; of the tag as the &#x60;external_id&#x60; field of the prefill tag. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder prefillTags(List<SignRequestPrefillTag> prefillTags) {
            this.prefillTags = prefillTags;
            return this;
        }
        
        /**
         * Set daysValid
         * @param daysValid Set the number of days after which the created signature request will automatically expire if not completed. By default, we do not apply any expiration date on signature requests, and the signature request does not expire. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder daysValid(Integer daysValid) {
            this.daysValid = daysValid;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId This can be used to reference an ID in an external system that the sign request is related to. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set isPhoneVerificationRequiredToView
         * @param isPhoneVerificationRequiredToView Forces signers to verify a text message prior to viewing the document. You must specify the phone number of signers to have this setting apply to them. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder isPhoneVerificationRequiredToView(Boolean isPhoneVerificationRequiredToView) {
            this.isPhoneVerificationRequiredToView = isPhoneVerificationRequiredToView;
            return this;
        }
        
        /**
         * Set templateId
         * @param templateId When a signature request is created from a template this field will indicate the id of that template. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder templateId(String templateId) {
            this.templateId = templateId;
            return this;
        }
        
        /**
         * Set sourceFiles
         * @param sourceFiles List of files to create a signing document from. This is currently limited to ten files. Only the ID and type fields are required for each file. (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder sourceFiles(List<FileBase> sourceFiles) {
            this.sourceFiles = sourceFiles;
            return this;
        }
        
        /**
         * Set signatureColor
         * @param signatureColor Force a specific color for the signature (blue, black, or red) (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder signatureColor(String signatureColor) {
            this.signatureColor = signatureColor;
            return this;
        }
        
        /**
         * Set parentFolder
         * @param parentFolder  (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder parentFolder(FolderMini parentFolder) {
            this.parentFolder = parentFolder;
            return this;
        }
        
        /**
         * Build call for createRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a Sign Request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SignRequestCreateRequest signRequestCreateRequest = buildBodyParams();
            return createRequestCall(signRequestCreateRequest, _callback);
        }

        private SignRequestCreateRequest buildBodyParams() {
            SignRequestCreateRequest signRequestCreateRequest = new SignRequestCreateRequest();
            return signRequestCreateRequest;
        }

        /**
         * Execute createRequest request
         * @return SignRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a Sign Request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public SignRequest execute() throws ApiException {
            SignRequestCreateRequest signRequestCreateRequest = buildBodyParams();
            ApiResponse<SignRequest> localVarResp = createRequestWithHttpInfo(signRequestCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRequest request with HTTP info returned
         * @return ApiResponse&lt;SignRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a Sign Request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SignRequest> executeWithHttpInfo() throws ApiException {
            SignRequestCreateRequest signRequestCreateRequest = buildBodyParams();
            return createRequestWithHttpInfo(signRequestCreateRequest);
        }

        /**
         * Execute createRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a Sign Request object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SignRequest> _callback) throws ApiException {
            SignRequestCreateRequest signRequestCreateRequest = buildBodyParams();
            return createRequestAsync(signRequestCreateRequest, _callback);
        }
    }

    /**
     * Create sign request
     * Creates a sign request. This involves preparing a document for signing and sending the sign request to signers.
     * @return CreateRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a Sign Request object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestRequestBuilder createRequest(List<SignRequestCreateSigner> signers) throws IllegalArgumentException {
        if (signers == null) throw new IllegalArgumentException("\"signers\" is required but got null");
        return new CreateRequestRequestBuilder(signers);
    }
    private okhttp3.Call getByIdCall(String signRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sign_requests/{sign_request_id}"
            .replace("{" + "sign_request_id" + "}", localVarApiClient.escapeString(signRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String signRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signRequestId' is set
        if (signRequestId == null) {
            throw new ApiException("Missing the required parameter 'signRequestId' when calling getById(Async)");
        }

        return getByIdCall(signRequestId, _callback);

    }


    private ApiResponse<SignRequest> getByIdWithHttpInfo(String signRequestId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(signRequestId, null);
        Type localVarReturnType = new TypeToken<SignRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String signRequestId, final ApiCallback<SignRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(signRequestId, _callback);
        Type localVarReturnType = new TypeToken<SignRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String signRequestId;

        private GetByIdRequestBuilder(String signRequestId) {
            this.signRequestId = signRequestId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a sign request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(signRequestId, _callback);
        }


        /**
         * Execute getById request
         * @return SignRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a sign request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public SignRequest execute() throws ApiException {
            ApiResponse<SignRequest> localVarResp = getByIdWithHttpInfo(signRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;SignRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a sign request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SignRequest> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(signRequestId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a sign request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SignRequest> _callback) throws ApiException {
            return getByIdAsync(signRequestId, _callback);
        }
    }

    /**
     * Get sign request by ID
     * Gets a sign request by ID.
     * @param signRequestId The ID of the sign request (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a sign request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String signRequestId) throws IllegalArgumentException {
        if (signRequestId == null) throw new IllegalArgumentException("\"signRequestId\" is required but got null");
            

        return new GetByIdRequestBuilder(signRequestId);
    }
    private okhttp3.Call listCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sign_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        return listCall(marker, limit, _callback);

    }


    private ApiResponse<SignRequests> listWithHttpInfo(String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(marker, limit, null);
        Type localVarReturnType = new TypeToken<SignRequests>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String marker, Long limit, final ApiCallback<SignRequests> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(marker, limit, _callback);
        Type localVarReturnType = new TypeToken<SignRequests>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String marker;
        private Long limit;

        private ListRequestBuilder() {
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of sign requests </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(marker, limit, _callback);
        }


        /**
         * Execute list request
         * @return SignRequests
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of sign requests </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public SignRequests execute() throws ApiException {
            ApiResponse<SignRequests> localVarResp = listWithHttpInfo(marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;SignRequests&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of sign requests </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SignRequests> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(marker, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of sign requests </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SignRequests> _callback) throws ApiException {
            return listAsync(marker, limit, _callback);
        }
    }

    /**
     * List sign requests
     * Gets sign requests created by a user. If the &#x60;sign_files&#x60; and/or &#x60;parent_folder&#x60; are deleted, the sign request will not return in the list.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of sign requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call resendSignRequestEmailsCall(String signRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sign_requests/{sign_request_id}/resend"
            .replace("{" + "sign_request_id" + "}", localVarApiClient.escapeString(signRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendSignRequestEmailsValidateBeforeCall(String signRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signRequestId' is set
        if (signRequestId == null) {
            throw new ApiException("Missing the required parameter 'signRequestId' when calling resendSignRequestEmails(Async)");
        }

        return resendSignRequestEmailsCall(signRequestId, _callback);

    }


    private ApiResponse<Void> resendSignRequestEmailsWithHttpInfo(String signRequestId) throws ApiException {
        okhttp3.Call localVarCall = resendSignRequestEmailsValidateBeforeCall(signRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resendSignRequestEmailsAsync(String signRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendSignRequestEmailsValidateBeforeCall(signRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResendSignRequestEmailsRequestBuilder {
        private final String signRequestId;

        private ResendSignRequestEmailsRequestBuilder(String signRequestId) {
            this.signRequestId = signRequestId;
        }

        /**
         * Build call for resendSignRequestEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Returns an empty response when the API call was successful. The email notifications will be sent asynchronously. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resendSignRequestEmailsCall(signRequestId, _callback);
        }


        /**
         * Execute resendSignRequestEmails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Returns an empty response when the API call was successful. The email notifications will be sent asynchronously. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            resendSignRequestEmailsWithHttpInfo(signRequestId);
        }

        /**
         * Execute resendSignRequestEmails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Returns an empty response when the API call was successful. The email notifications will be sent asynchronously. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return resendSignRequestEmailsWithHttpInfo(signRequestId);
        }

        /**
         * Execute resendSignRequestEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Returns an empty response when the API call was successful. The email notifications will be sent asynchronously. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return resendSignRequestEmailsAsync(signRequestId, _callback);
        }
    }

    /**
     * Resend sign request
     * Resends a sign request email to all outstanding signers.
     * @param signRequestId The ID of the sign request (required)
     * @return ResendSignRequestEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Returns an empty response when the API call was successful. The email notifications will be sent asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ResendSignRequestEmailsRequestBuilder resendSignRequestEmails(String signRequestId) throws IllegalArgumentException {
        if (signRequestId == null) throw new IllegalArgumentException("\"signRequestId\" is required but got null");
            

        return new ResendSignRequestEmailsRequestBuilder(signRequestId);
    }
}
