/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FileVersionFull;
import com.konfigthis.client.model.FileVersions;
import com.konfigthis.client.model.FileVersionsPromoteFileVersionRequest;
import com.konfigthis.client.model.FileVersionsRestoreVersionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FileVersionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileVersionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FileVersionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getSpecificVersionCall(String fileId, String fileVersionId, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/versions/{file_version_id}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "file_version_id" + "}", localVarApiClient.escapeString(fileVersionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificVersionValidateBeforeCall(String fileId, String fileVersionId, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getSpecificVersion(Async)");
        }

        // verify the required parameter 'fileVersionId' is set
        if (fileVersionId == null) {
            throw new ApiException("Missing the required parameter 'fileVersionId' when calling getSpecificVersion(Async)");
        }

        return getSpecificVersionCall(fileId, fileVersionId, fields, _callback);

    }


    private ApiResponse<FileVersionFull> getSpecificVersionWithHttpInfo(String fileId, String fileVersionId, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getSpecificVersionValidateBeforeCall(fileId, fileVersionId, fields, null);
        Type localVarReturnType = new TypeToken<FileVersionFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificVersionAsync(String fileId, String fileVersionId, List<String> fields, final ApiCallback<FileVersionFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificVersionValidateBeforeCall(fileId, fileVersionId, fields, _callback);
        Type localVarReturnType = new TypeToken<FileVersionFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificVersionRequestBuilder {
        private final String fileId;
        private final String fileVersionId;
        private List<String> fields;

        private GetSpecificVersionRequestBuilder(String fileId, String fileVersionId) {
            this.fileId = fileId;
            this.fileVersionId = fileVersionId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return GetSpecificVersionRequestBuilder
         */
        public GetSpecificVersionRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getSpecificVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a specific version of a file.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificVersionCall(fileId, fileVersionId, fields, _callback);
        }


        /**
         * Execute getSpecificVersion request
         * @return FileVersionFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a specific version of a file.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileVersionFull execute() throws ApiException {
            ApiResponse<FileVersionFull> localVarResp = getSpecificVersionWithHttpInfo(fileId, fileVersionId, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificVersion request with HTTP info returned
         * @return ApiResponse&lt;FileVersionFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a specific version of a file.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileVersionFull> executeWithHttpInfo() throws ApiException {
            return getSpecificVersionWithHttpInfo(fileId, fileVersionId, fields);
        }

        /**
         * Execute getSpecificVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a specific version of a file.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileVersionFull> _callback) throws ApiException {
            return getSpecificVersionAsync(fileId, fileVersionId, fields, _callback);
        }
    }

    /**
     * Get file version
     * Retrieve a specific version of a file.  Versions are only tracked for Box users with premium accounts.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param fileVersionId The ID of the file version (required)
     * @return GetSpecificVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a specific version of a file.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificVersionRequestBuilder getSpecificVersion(String fileId, String fileVersionId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (fileVersionId == null) throw new IllegalArgumentException("\"fileVersionId\" is required but got null");
            

        return new GetSpecificVersionRequestBuilder(fileId, fileVersionId);
    }
    private okhttp3.Call listAllVersionsCall(String fileId, List<String> fields, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/versions"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllVersionsValidateBeforeCall(String fileId, List<String> fields, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling listAllVersions(Async)");
        }

        return listAllVersionsCall(fileId, fields, limit, offset, _callback);

    }


    private ApiResponse<FileVersions> listAllVersionsWithHttpInfo(String fileId, List<String> fields, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = listAllVersionsValidateBeforeCall(fileId, fields, limit, offset, null);
        Type localVarReturnType = new TypeToken<FileVersions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllVersionsAsync(String fileId, List<String> fields, Long limit, Long offset, final ApiCallback<FileVersions> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllVersionsValidateBeforeCall(fileId, fields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<FileVersions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllVersionsRequestBuilder {
        private final String fileId;
        private List<String> fields;
        private Long limit;
        private Long offset;

        private ListAllVersionsRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return ListAllVersionsRequestBuilder
         */
        public ListAllVersionsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListAllVersionsRequestBuilder
         */
        public ListAllVersionsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response. (optional, default to 0)
         * @return ListAllVersionsRequestBuilder
         */
        public ListAllVersionsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listAllVersions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of past versions for this file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllVersionsCall(fileId, fields, limit, offset, _callback);
        }


        /**
         * Execute listAllVersions request
         * @return FileVersions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of past versions for this file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileVersions execute() throws ApiException {
            ApiResponse<FileVersions> localVarResp = listAllVersionsWithHttpInfo(fileId, fields, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllVersions request with HTTP info returned
         * @return ApiResponse&lt;FileVersions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of past versions for this file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileVersions> executeWithHttpInfo() throws ApiException {
            return listAllVersionsWithHttpInfo(fileId, fields, limit, offset);
        }

        /**
         * Execute listAllVersions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of past versions for this file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileVersions> _callback) throws ApiException {
            return listAllVersionsAsync(fileId, fields, limit, offset, _callback);
        }
    }

    /**
     * List all file versions
     * Retrieve a list of the past versions for a file.  Versions are only tracked by Box users with premium accounts. To fetch the ID of the current version of a file, use the &#x60;GET /file/:id&#x60; API.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return ListAllVersionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of past versions for this file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllVersionsRequestBuilder listAllVersions(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new ListAllVersionsRequestBuilder(fileId);
    }
    private okhttp3.Call moveToTrashCall(String fileId, String fileVersionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/versions/{file_version_id}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "file_version_id" + "}", localVarApiClient.escapeString(fileVersionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("if-match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveToTrashValidateBeforeCall(String fileId, String fileVersionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling moveToTrash(Async)");
        }

        // verify the required parameter 'fileVersionId' is set
        if (fileVersionId == null) {
            throw new ApiException("Missing the required parameter 'fileVersionId' when calling moveToTrash(Async)");
        }

        return moveToTrashCall(fileId, fileVersionId, ifMatch, _callback);

    }


    private ApiResponse<Void> moveToTrashWithHttpInfo(String fileId, String fileVersionId, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = moveToTrashValidateBeforeCall(fileId, fileVersionId, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call moveToTrashAsync(String fileId, String fileVersionId, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveToTrashValidateBeforeCall(fileId, fileVersionId, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class MoveToTrashRequestBuilder {
        private final String fileId;
        private final String fileVersionId;
        private String ifMatch;

        private MoveToTrashRequestBuilder(String fileId, String fileVersionId) {
            this.fileId = fileId;
            this.fileVersionId = fileVersionId;
        }

        /**
         * Set ifMatch
         * @param ifMatch Ensures this item hasn&#39;t recently changed before making changes.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since. (optional)
         * @return MoveToTrashRequestBuilder
         */
        public MoveToTrashRequestBuilder ifMatch(String ifMatch) {
            this.ifMatch = ifMatch;
            return this;
        }
        
        /**
         * Build call for moveToTrash
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the file has been successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return moveToTrashCall(fileId, fileVersionId, ifMatch, _callback);
        }


        /**
         * Execute moveToTrash request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the file has been successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            moveToTrashWithHttpInfo(fileId, fileVersionId, ifMatch);
        }

        /**
         * Execute moveToTrash request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the file has been successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return moveToTrashWithHttpInfo(fileId, fileVersionId, ifMatch);
        }

        /**
         * Execute moveToTrash request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the file has been successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return moveToTrashAsync(fileId, fileVersionId, ifMatch, _callback);
        }
    }

    /**
     * Remove file version
     * Move a file version to the trash.  Versions are only tracked for Box users with premium accounts.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param fileVersionId The ID of the file version (required)
     * @return MoveToTrashRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the file has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public MoveToTrashRequestBuilder moveToTrash(String fileId, String fileVersionId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (fileVersionId == null) throw new IllegalArgumentException("\"fileVersionId\" is required but got null");
            

        return new MoveToTrashRequestBuilder(fileId, fileVersionId);
    }
    private okhttp3.Call promoteFileVersionCall(String fileId, List<String> fields, FileVersionsPromoteFileVersionRequest fileVersionsPromoteFileVersionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileVersionsPromoteFileVersionRequest;

        // create path and map variables
        String localVarPath = "/files/{file_id}/versions/current"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promoteFileVersionValidateBeforeCall(String fileId, List<String> fields, FileVersionsPromoteFileVersionRequest fileVersionsPromoteFileVersionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling promoteFileVersion(Async)");
        }

        return promoteFileVersionCall(fileId, fields, fileVersionsPromoteFileVersionRequest, _callback);

    }


    private ApiResponse<FileVersionFull> promoteFileVersionWithHttpInfo(String fileId, List<String> fields, FileVersionsPromoteFileVersionRequest fileVersionsPromoteFileVersionRequest) throws ApiException {
        okhttp3.Call localVarCall = promoteFileVersionValidateBeforeCall(fileId, fields, fileVersionsPromoteFileVersionRequest, null);
        Type localVarReturnType = new TypeToken<FileVersionFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call promoteFileVersionAsync(String fileId, List<String> fields, FileVersionsPromoteFileVersionRequest fileVersionsPromoteFileVersionRequest, final ApiCallback<FileVersionFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = promoteFileVersionValidateBeforeCall(fileId, fields, fileVersionsPromoteFileVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<FileVersionFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PromoteFileVersionRequestBuilder {
        private final String fileId;
        private String id;
        private String type;
        private List<String> fields;

        private PromoteFileVersionRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Set id
         * @param id The file version ID (optional)
         * @return PromoteFileVersionRequestBuilder
         */
        public PromoteFileVersionRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set type
         * @param type The type to promote (optional)
         * @return PromoteFileVersionRequestBuilder
         */
        public PromoteFileVersionRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return PromoteFileVersionRequestBuilder
         */
        public PromoteFileVersionRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for promoteFileVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a newly created file version object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileVersionsPromoteFileVersionRequest fileVersionsPromoteFileVersionRequest = buildBodyParams();
            return promoteFileVersionCall(fileId, fields, fileVersionsPromoteFileVersionRequest, _callback);
        }

        private FileVersionsPromoteFileVersionRequest buildBodyParams() {
            FileVersionsPromoteFileVersionRequest fileVersionsPromoteFileVersionRequest = new FileVersionsPromoteFileVersionRequest();
            fileVersionsPromoteFileVersionRequest.id(this.id);
            if (this.type != null)
            fileVersionsPromoteFileVersionRequest.type(FileVersionsPromoteFileVersionRequest.TypeEnum.fromValue(this.type));
            return fileVersionsPromoteFileVersionRequest;
        }

        /**
         * Execute promoteFileVersion request
         * @return FileVersionFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a newly created file version object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileVersionFull execute() throws ApiException {
            FileVersionsPromoteFileVersionRequest fileVersionsPromoteFileVersionRequest = buildBodyParams();
            ApiResponse<FileVersionFull> localVarResp = promoteFileVersionWithHttpInfo(fileId, fields, fileVersionsPromoteFileVersionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute promoteFileVersion request with HTTP info returned
         * @return ApiResponse&lt;FileVersionFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a newly created file version object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileVersionFull> executeWithHttpInfo() throws ApiException {
            FileVersionsPromoteFileVersionRequest fileVersionsPromoteFileVersionRequest = buildBodyParams();
            return promoteFileVersionWithHttpInfo(fileId, fields, fileVersionsPromoteFileVersionRequest);
        }

        /**
         * Execute promoteFileVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a newly created file version object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileVersionFull> _callback) throws ApiException {
            FileVersionsPromoteFileVersionRequest fileVersionsPromoteFileVersionRequest = buildBodyParams();
            return promoteFileVersionAsync(fileId, fields, fileVersionsPromoteFileVersionRequest, _callback);
        }
    }

    /**
     * Promote file version
     * Promote a specific version of a file.  If previous versions exist, this method can be used to promote one of the older versions to the top of the version history.  This creates a new copy of the old version and puts it at the top of the versions history. The file will have the exact same contents as the older version, with the the same hash digest, &#x60;etag&#x60;, and name as the original.  Other properties such as comments do not get updated to their former values.  Don&#39;t use this endpoint to restore Box Notes, as it works with file formats such as PDF, DOC, PPTX or similar.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return PromoteFileVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a newly created file version object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public PromoteFileVersionRequestBuilder promoteFileVersion(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new PromoteFileVersionRequestBuilder(fileId);
    }
    private okhttp3.Call restoreVersionCall(String fileId, String fileVersionId, FileVersionsRestoreVersionRequest fileVersionsRestoreVersionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileVersionsRestoreVersionRequest;

        // create path and map variables
        String localVarPath = "/files/{file_id}/versions/{file_version_id}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "file_version_id" + "}", localVarApiClient.escapeString(fileVersionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreVersionValidateBeforeCall(String fileId, String fileVersionId, FileVersionsRestoreVersionRequest fileVersionsRestoreVersionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling restoreVersion(Async)");
        }

        // verify the required parameter 'fileVersionId' is set
        if (fileVersionId == null) {
            throw new ApiException("Missing the required parameter 'fileVersionId' when calling restoreVersion(Async)");
        }

        return restoreVersionCall(fileId, fileVersionId, fileVersionsRestoreVersionRequest, _callback);

    }


    private ApiResponse<FileVersionFull> restoreVersionWithHttpInfo(String fileId, String fileVersionId, FileVersionsRestoreVersionRequest fileVersionsRestoreVersionRequest) throws ApiException {
        okhttp3.Call localVarCall = restoreVersionValidateBeforeCall(fileId, fileVersionId, fileVersionsRestoreVersionRequest, null);
        Type localVarReturnType = new TypeToken<FileVersionFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call restoreVersionAsync(String fileId, String fileVersionId, FileVersionsRestoreVersionRequest fileVersionsRestoreVersionRequest, final ApiCallback<FileVersionFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreVersionValidateBeforeCall(fileId, fileVersionId, fileVersionsRestoreVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<FileVersionFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RestoreVersionRequestBuilder {
        private final String fileId;
        private final String fileVersionId;
        private String trashedAt;

        private RestoreVersionRequestBuilder(String fileId, String fileVersionId) {
            this.fileId = fileId;
            this.fileVersionId = fileVersionId;
        }

        /**
         * Set trashedAt
         * @param trashedAt Set this to &#x60;null&#x60; to clear the date and restore the file. (optional)
         * @return RestoreVersionRequestBuilder
         */
        public RestoreVersionRequestBuilder trashedAt(String trashedAt) {
            this.trashedAt = trashedAt;
            return this;
        }
        
        /**
         * Build call for restoreVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a restored file version object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileVersionsRestoreVersionRequest fileVersionsRestoreVersionRequest = buildBodyParams();
            return restoreVersionCall(fileId, fileVersionId, fileVersionsRestoreVersionRequest, _callback);
        }

        private FileVersionsRestoreVersionRequest buildBodyParams() {
            FileVersionsRestoreVersionRequest fileVersionsRestoreVersionRequest = new FileVersionsRestoreVersionRequest();
            fileVersionsRestoreVersionRequest.trashedAt(this.trashedAt);
            return fileVersionsRestoreVersionRequest;
        }

        /**
         * Execute restoreVersion request
         * @return FileVersionFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a restored file version object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileVersionFull execute() throws ApiException {
            FileVersionsRestoreVersionRequest fileVersionsRestoreVersionRequest = buildBodyParams();
            ApiResponse<FileVersionFull> localVarResp = restoreVersionWithHttpInfo(fileId, fileVersionId, fileVersionsRestoreVersionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute restoreVersion request with HTTP info returned
         * @return ApiResponse&lt;FileVersionFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a restored file version object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileVersionFull> executeWithHttpInfo() throws ApiException {
            FileVersionsRestoreVersionRequest fileVersionsRestoreVersionRequest = buildBodyParams();
            return restoreVersionWithHttpInfo(fileId, fileVersionId, fileVersionsRestoreVersionRequest);
        }

        /**
         * Execute restoreVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a restored file version object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileVersionFull> _callback) throws ApiException {
            FileVersionsRestoreVersionRequest fileVersionsRestoreVersionRequest = buildBodyParams();
            return restoreVersionAsync(fileId, fileVersionId, fileVersionsRestoreVersionRequest, _callback);
        }
    }

    /**
     * Restore file version
     * Restores a specific version of a file after it was deleted. Don&#39;t use this endpoint to restore Box Notes, as it works with file formats such as PDF, DOC, PPTX or similar.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param fileVersionId The ID of the file version (required)
     * @return RestoreVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a restored file version object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RestoreVersionRequestBuilder restoreVersion(String fileId, String fileVersionId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (fileVersionId == null) throw new IllegalArgumentException("\"fileVersionId\" is required but got null");
            

        return new RestoreVersionRequestBuilder(fileId, fileVersionId);
    }
}
