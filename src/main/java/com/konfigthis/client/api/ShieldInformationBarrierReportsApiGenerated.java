/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.ShieldInformationBarrierBase;
import com.konfigthis.client.model.ShieldInformationBarrierReference;
import com.konfigthis.client.model.ShieldInformationBarrierReport;
import com.konfigthis.client.model.ShieldInformationBarrierReports;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShieldInformationBarrierReportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShieldInformationBarrierReportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ShieldInformationBarrierReportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createReportCall(ShieldInformationBarrierReference shieldInformationBarrierReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shieldInformationBarrierReference;

        // create path and map variables
        String localVarPath = "/shield_information_barrier_reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReportValidateBeforeCall(ShieldInformationBarrierReference shieldInformationBarrierReference, final ApiCallback _callback) throws ApiException {
        return createReportCall(shieldInformationBarrierReference, _callback);

    }


    private ApiResponse<ShieldInformationBarrierReport> createReportWithHttpInfo(ShieldInformationBarrierReference shieldInformationBarrierReference) throws ApiException {
        okhttp3.Call localVarCall = createReportValidateBeforeCall(shieldInformationBarrierReference, null);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createReportAsync(ShieldInformationBarrierReference shieldInformationBarrierReference, final ApiCallback<ShieldInformationBarrierReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReportValidateBeforeCall(shieldInformationBarrierReference, _callback);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateReportRequestBuilder {
        private ShieldInformationBarrierBase shieldInformationBarrier;

        private CreateReportRequestBuilder() {
        }

        /**
         * Set shieldInformationBarrier
         * @param shieldInformationBarrier  (optional)
         * @return CreateReportRequestBuilder
         */
        public CreateReportRequestBuilder shieldInformationBarrier(ShieldInformationBarrierBase shieldInformationBarrier) {
            this.shieldInformationBarrier = shieldInformationBarrier;
            return this;
        }
        
        /**
         * Build call for createReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the shield information barrier report information object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShieldInformationBarrierReference shieldInformationBarrierReference = buildBodyParams();
            return createReportCall(shieldInformationBarrierReference, _callback);
        }

        private ShieldInformationBarrierReference buildBodyParams() {
            ShieldInformationBarrierReference shieldInformationBarrierReference = new ShieldInformationBarrierReference();
            shieldInformationBarrierReference.shieldInformationBarrier(this.shieldInformationBarrier);
            return shieldInformationBarrierReference;
        }

        /**
         * Execute createReport request
         * @return ShieldInformationBarrierReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the shield information barrier report information object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ShieldInformationBarrierReport execute() throws ApiException {
            ShieldInformationBarrierReference shieldInformationBarrierReference = buildBodyParams();
            ApiResponse<ShieldInformationBarrierReport> localVarResp = createReportWithHttpInfo(shieldInformationBarrierReference);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createReport request with HTTP info returned
         * @return ApiResponse&lt;ShieldInformationBarrierReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the shield information barrier report information object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShieldInformationBarrierReport> executeWithHttpInfo() throws ApiException {
            ShieldInformationBarrierReference shieldInformationBarrierReference = buildBodyParams();
            return createReportWithHttpInfo(shieldInformationBarrierReference);
        }

        /**
         * Execute createReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the shield information barrier report information object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShieldInformationBarrierReport> _callback) throws ApiException {
            ShieldInformationBarrierReference shieldInformationBarrierReference = buildBodyParams();
            return createReportAsync(shieldInformationBarrierReference, _callback);
        }
    }

    /**
     * Create shield information barrier report
     * Creates a shield information barrier report for a given barrier.
     * @return CreateReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the shield information barrier report information object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateReportRequestBuilder createReport() throws IllegalArgumentException {
        return new CreateReportRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String shieldInformationBarrierReportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shield_information_barrier_reports/{shield_information_barrier_report_id}"
            .replace("{" + "shield_information_barrier_report_id" + "}", localVarApiClient.escapeString(shieldInformationBarrierReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String shieldInformationBarrierReportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shieldInformationBarrierReportId' is set
        if (shieldInformationBarrierReportId == null) {
            throw new ApiException("Missing the required parameter 'shieldInformationBarrierReportId' when calling getById(Async)");
        }

        return getByIdCall(shieldInformationBarrierReportId, _callback);

    }


    private ApiResponse<ShieldInformationBarrierReport> getByIdWithHttpInfo(String shieldInformationBarrierReportId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(shieldInformationBarrierReportId, null);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String shieldInformationBarrierReportId, final ApiCallback<ShieldInformationBarrierReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(shieldInformationBarrierReportId, _callback);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String shieldInformationBarrierReportId;

        private GetByIdRequestBuilder(String shieldInformationBarrierReportId) {
            this.shieldInformationBarrierReportId = shieldInformationBarrierReportId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the  shield information barrier report object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(shieldInformationBarrierReportId, _callback);
        }


        /**
         * Execute getById request
         * @return ShieldInformationBarrierReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the  shield information barrier report object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ShieldInformationBarrierReport execute() throws ApiException {
            ApiResponse<ShieldInformationBarrierReport> localVarResp = getByIdWithHttpInfo(shieldInformationBarrierReportId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ShieldInformationBarrierReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the  shield information barrier report object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShieldInformationBarrierReport> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(shieldInformationBarrierReportId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the  shield information barrier report object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShieldInformationBarrierReport> _callback) throws ApiException {
            return getByIdAsync(shieldInformationBarrierReportId, _callback);
        }
    }

    /**
     * Get shield information barrier report by ID
     * Retrieves a shield information barrier report by its ID.
     * @param shieldInformationBarrierReportId The ID of the shield information barrier Report. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the  shield information barrier report object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String shieldInformationBarrierReportId) throws IllegalArgumentException {
        if (shieldInformationBarrierReportId == null) throw new IllegalArgumentException("\"shieldInformationBarrierReportId\" is required but got null");
            

        return new GetByIdRequestBuilder(shieldInformationBarrierReportId);
    }
    private okhttp3.Call listReportsCall(String shieldInformationBarrierId, String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shield_information_barrier_reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shieldInformationBarrierId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shield_information_barrier_id", shieldInformationBarrierId));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listReportsValidateBeforeCall(String shieldInformationBarrierId, String marker, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shieldInformationBarrierId' is set
        if (shieldInformationBarrierId == null) {
            throw new ApiException("Missing the required parameter 'shieldInformationBarrierId' when calling listReports(Async)");
        }

        return listReportsCall(shieldInformationBarrierId, marker, limit, _callback);

    }


    private ApiResponse<ShieldInformationBarrierReports> listReportsWithHttpInfo(String shieldInformationBarrierId, String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listReportsValidateBeforeCall(shieldInformationBarrierId, marker, limit, null);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierReports>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listReportsAsync(String shieldInformationBarrierId, String marker, Long limit, final ApiCallback<ShieldInformationBarrierReports> _callback) throws ApiException {

        okhttp3.Call localVarCall = listReportsValidateBeforeCall(shieldInformationBarrierId, marker, limit, _callback);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierReports>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListReportsRequestBuilder {
        private final String shieldInformationBarrierId;
        private String marker;
        private Long limit;

        private ListReportsRequestBuilder(String shieldInformationBarrierId) {
            this.shieldInformationBarrierId = shieldInformationBarrierId;
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListReportsRequestBuilder
         */
        public ListReportsRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListReportsRequestBuilder
         */
        public ListReportsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paginated list of shield information barrier report objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listReportsCall(shieldInformationBarrierId, marker, limit, _callback);
        }


        /**
         * Execute listReports request
         * @return ShieldInformationBarrierReports
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paginated list of shield information barrier report objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ShieldInformationBarrierReports execute() throws ApiException {
            ApiResponse<ShieldInformationBarrierReports> localVarResp = listReportsWithHttpInfo(shieldInformationBarrierId, marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listReports request with HTTP info returned
         * @return ApiResponse&lt;ShieldInformationBarrierReports&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paginated list of shield information barrier report objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShieldInformationBarrierReports> executeWithHttpInfo() throws ApiException {
            return listReportsWithHttpInfo(shieldInformationBarrierId, marker, limit);
        }

        /**
         * Execute listReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paginated list of shield information barrier report objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShieldInformationBarrierReports> _callback) throws ApiException {
            return listReportsAsync(shieldInformationBarrierId, marker, limit, _callback);
        }
    }

    /**
     * List shield information barrier reports
     * Lists shield information barrier reports.
     * @param shieldInformationBarrierId The ID of the shield information barrier. (required)
     * @return ListReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of shield information barrier report objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListReportsRequestBuilder listReports(String shieldInformationBarrierId) throws IllegalArgumentException {
        if (shieldInformationBarrierId == null) throw new IllegalArgumentException("\"shieldInformationBarrierId\" is required but got null");
            

        return new ListReportsRequestBuilder(shieldInformationBarrierId);
    }
}
