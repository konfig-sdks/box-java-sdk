/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import java.io.File;
import com.konfigthis.client.model.Files;
import com.konfigthis.client.model.UploadPart;
import com.konfigthis.client.model.UploadParts;
import com.konfigthis.client.model.UploadSession;
import com.konfigthis.client.model.UploadedPart;
import com.konfigthis.client.model.UploadsChunkedCommitSessionRequest;
import com.konfigthis.client.model.UploadsChunkedCreateSessionForUploadRequest;
import com.konfigthis.client.model.UploadsChunkedCreateSessionForUploadRequest1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UploadsChunkedApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UploadsChunkedApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UploadsChunkedApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call commitSessionCall(String uploadSessionId, String digest, String ifMatch, String ifNoneMatch, UploadsChunkedCommitSessionRequest uploadsChunkedCommitSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.box.com/api/2.0" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsChunkedCommitSessionRequest;

        // create path and map variables
        String localVarPath = "/files/upload_sessions/{upload_session_id}/commit"
            .replace("{" + "upload_session_id" + "}", localVarApiClient.escapeString(uploadSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (digest != null) {
            localVarHeaderParams.put("digest", localVarApiClient.parameterToString(digest));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("if-match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("if-none-match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commitSessionValidateBeforeCall(String uploadSessionId, String digest, String ifMatch, String ifNoneMatch, UploadsChunkedCommitSessionRequest uploadsChunkedCommitSessionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadSessionId' is set
        if (uploadSessionId == null) {
            throw new ApiException("Missing the required parameter 'uploadSessionId' when calling commitSession(Async)");
        }

        // verify the required parameter 'digest' is set
        if (digest == null) {
            throw new ApiException("Missing the required parameter 'digest' when calling commitSession(Async)");
        }

        return commitSessionCall(uploadSessionId, digest, ifMatch, ifNoneMatch, uploadsChunkedCommitSessionRequest, _callback);

    }


    private ApiResponse<Files> commitSessionWithHttpInfo(String uploadSessionId, String digest, String ifMatch, String ifNoneMatch, UploadsChunkedCommitSessionRequest uploadsChunkedCommitSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = commitSessionValidateBeforeCall(uploadSessionId, digest, ifMatch, ifNoneMatch, uploadsChunkedCommitSessionRequest, null);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call commitSessionAsync(String uploadSessionId, String digest, String ifMatch, String ifNoneMatch, UploadsChunkedCommitSessionRequest uploadsChunkedCommitSessionRequest, final ApiCallback<Files> _callback) throws ApiException {

        okhttp3.Call localVarCall = commitSessionValidateBeforeCall(uploadSessionId, digest, ifMatch, ifNoneMatch, uploadsChunkedCommitSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<Files>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CommitSessionRequestBuilder {
        private final List<UploadPart> parts;
        private final String uploadSessionId;
        private final String digest;
        private String ifMatch;
        private String ifNoneMatch;

        private CommitSessionRequestBuilder(List<UploadPart> parts, String uploadSessionId, String digest) {
            this.parts = parts;
            this.uploadSessionId = uploadSessionId;
            this.digest = digest;
        }

        /**
         * Set ifMatch
         * @param ifMatch Ensures this item hasn&#39;t recently changed before making changes.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since. (optional)
         * @return CommitSessionRequestBuilder
         */
        public CommitSessionRequestBuilder ifMatch(String ifMatch) {
            this.ifMatch = ifMatch;
            return this;
        }
        
        /**
         * Set ifNoneMatch
         * @param ifNoneMatch Ensures an item is only returned if it has changed.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;304 Not Modified&#x60; if the item has not changed since. (optional)
         * @return CommitSessionRequestBuilder
         */
        public CommitSessionRequestBuilder ifNoneMatch(String ifNoneMatch) {
            this.ifNoneMatch = ifNoneMatch;
            return this;
        }
        
        /**
         * Build call for commitSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the file object in a list. </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Returns when all chunks have been uploaded but not yet processed.  Inspect the upload session to get more information about the progress of processing the chunks, then retry committing the file when all chunks have processed. </td><td>  * Retry-After - Indicates the number of seconds the client should wait before attempting their commit request again. <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsChunkedCommitSessionRequest uploadsChunkedCommitSessionRequest = buildBodyParams();
            return commitSessionCall(uploadSessionId, digest, ifMatch, ifNoneMatch, uploadsChunkedCommitSessionRequest, _callback);
        }

        private UploadsChunkedCommitSessionRequest buildBodyParams() {
            UploadsChunkedCommitSessionRequest uploadsChunkedCommitSessionRequest = new UploadsChunkedCommitSessionRequest();
            uploadsChunkedCommitSessionRequest.parts(this.parts);
            return uploadsChunkedCommitSessionRequest;
        }

        /**
         * Execute commitSession request
         * @return Files
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the file object in a list. </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Returns when all chunks have been uploaded but not yet processed.  Inspect the upload session to get more information about the progress of processing the chunks, then retry committing the file when all chunks have processed. </td><td>  * Retry-After - Indicates the number of seconds the client should wait before attempting their commit request again. <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Files execute() throws ApiException {
            UploadsChunkedCommitSessionRequest uploadsChunkedCommitSessionRequest = buildBodyParams();
            ApiResponse<Files> localVarResp = commitSessionWithHttpInfo(uploadSessionId, digest, ifMatch, ifNoneMatch, uploadsChunkedCommitSessionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute commitSession request with HTTP info returned
         * @return ApiResponse&lt;Files&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the file object in a list. </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Returns when all chunks have been uploaded but not yet processed.  Inspect the upload session to get more information about the progress of processing the chunks, then retry committing the file when all chunks have processed. </td><td>  * Retry-After - Indicates the number of seconds the client should wait before attempting their commit request again. <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Files> executeWithHttpInfo() throws ApiException {
            UploadsChunkedCommitSessionRequest uploadsChunkedCommitSessionRequest = buildBodyParams();
            return commitSessionWithHttpInfo(uploadSessionId, digest, ifMatch, ifNoneMatch, uploadsChunkedCommitSessionRequest);
        }

        /**
         * Execute commitSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the file object in a list. </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Returns when all chunks have been uploaded but not yet processed.  Inspect the upload session to get more information about the progress of processing the chunks, then retry committing the file when all chunks have processed. </td><td>  * Retry-After - Indicates the number of seconds the client should wait before attempting their commit request again. <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Files> _callback) throws ApiException {
            UploadsChunkedCommitSessionRequest uploadsChunkedCommitSessionRequest = buildBodyParams();
            return commitSessionAsync(uploadSessionId, digest, ifMatch, ifNoneMatch, uploadsChunkedCommitSessionRequest, _callback);
        }
    }

    /**
     * Commit upload session
     * Close an upload session and create a file from the uploaded chunks.
     * @param uploadSessionId The ID of the upload session. (required)
     * @param digest The [RFC3230][1] message digest of the whole file.  Only SHA1 is supported. The SHA1 digest must be Base64 encoded. The format of this header is as &#x60;sha&#x3D;BASE64_ENCODED_DIGEST&#x60;.  [1]: https://tools.ietf.org/html/rfc3230 (required)
     * @return CommitSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the file object in a list. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Returns when all chunks have been uploaded but not yet processed.  Inspect the upload session to get more information about the progress of processing the chunks, then retry committing the file when all chunks have processed. </td><td>  * Retry-After - Indicates the number of seconds the client should wait before attempting their commit request again. <br>  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CommitSessionRequestBuilder commitSession(List<UploadPart> parts, String uploadSessionId, String digest) throws IllegalArgumentException {
        if (parts == null) throw new IllegalArgumentException("\"parts\" is required but got null");
        if (uploadSessionId == null) throw new IllegalArgumentException("\"uploadSessionId\" is required but got null");
            

        if (digest == null) throw new IllegalArgumentException("\"digest\" is required but got null");
            

        return new CommitSessionRequestBuilder(parts, uploadSessionId, digest);
    }
    private okhttp3.Call createSessionForUploadCall(UploadsChunkedCreateSessionForUploadRequest uploadsChunkedCreateSessionForUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.box.com/api/2.0" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsChunkedCreateSessionForUploadRequest;

        // create path and map variables
        String localVarPath = "/files/upload_sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSessionForUploadValidateBeforeCall(UploadsChunkedCreateSessionForUploadRequest uploadsChunkedCreateSessionForUploadRequest, final ApiCallback _callback) throws ApiException {
        return createSessionForUploadCall(uploadsChunkedCreateSessionForUploadRequest, _callback);

    }


    private ApiResponse<UploadSession> createSessionForUploadWithHttpInfo(UploadsChunkedCreateSessionForUploadRequest uploadsChunkedCreateSessionForUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = createSessionForUploadValidateBeforeCall(uploadsChunkedCreateSessionForUploadRequest, null);
        Type localVarReturnType = new TypeToken<UploadSession>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSessionForUploadAsync(UploadsChunkedCreateSessionForUploadRequest uploadsChunkedCreateSessionForUploadRequest, final ApiCallback<UploadSession> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSessionForUploadValidateBeforeCall(uploadsChunkedCreateSessionForUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadSession>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSessionForUploadRequestBuilder {
        private final String folderId;
        private final Long fileSize;
        private final String fileName;

        private CreateSessionForUploadRequestBuilder(String folderId, Long fileSize, String fileName) {
            this.folderId = folderId;
            this.fileSize = fileSize;
            this.fileName = fileName;
        }

        /**
         * Build call for createSessionForUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new upload session. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsChunkedCreateSessionForUploadRequest uploadsChunkedCreateSessionForUploadRequest = buildBodyParams();
            return createSessionForUploadCall(uploadsChunkedCreateSessionForUploadRequest, _callback);
        }

        private UploadsChunkedCreateSessionForUploadRequest buildBodyParams() {
            UploadsChunkedCreateSessionForUploadRequest uploadsChunkedCreateSessionForUploadRequest = new UploadsChunkedCreateSessionForUploadRequest();
            uploadsChunkedCreateSessionForUploadRequest.folderId(this.folderId);
            uploadsChunkedCreateSessionForUploadRequest.fileSize(this.fileSize);
            uploadsChunkedCreateSessionForUploadRequest.fileName(this.fileName);
            return uploadsChunkedCreateSessionForUploadRequest;
        }

        /**
         * Execute createSessionForUpload request
         * @return UploadSession
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new upload session. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public UploadSession execute() throws ApiException {
            UploadsChunkedCreateSessionForUploadRequest uploadsChunkedCreateSessionForUploadRequest = buildBodyParams();
            ApiResponse<UploadSession> localVarResp = createSessionForUploadWithHttpInfo(uploadsChunkedCreateSessionForUploadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSessionForUpload request with HTTP info returned
         * @return ApiResponse&lt;UploadSession&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new upload session. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadSession> executeWithHttpInfo() throws ApiException {
            UploadsChunkedCreateSessionForUploadRequest uploadsChunkedCreateSessionForUploadRequest = buildBodyParams();
            return createSessionForUploadWithHttpInfo(uploadsChunkedCreateSessionForUploadRequest);
        }

        /**
         * Execute createSessionForUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new upload session. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadSession> _callback) throws ApiException {
            UploadsChunkedCreateSessionForUploadRequest uploadsChunkedCreateSessionForUploadRequest = buildBodyParams();
            return createSessionForUploadAsync(uploadsChunkedCreateSessionForUploadRequest, _callback);
        }
    }

    /**
     * Create upload session
     * Creates an upload session for a new file.
     * @return CreateSessionForUploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new upload session. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSessionForUploadRequestBuilder createSessionForUpload(String folderId, Long fileSize, String fileName) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        if (fileSize == null) throw new IllegalArgumentException("\"fileSize\" is required but got null");
        if (fileName == null) throw new IllegalArgumentException("\"fileName\" is required but got null");
            

        return new CreateSessionForUploadRequestBuilder(folderId, fileSize, fileName);
    }
    private okhttp3.Call createSessionForUpload_0Call(String fileId, UploadsChunkedCreateSessionForUploadRequest1 uploadsChunkedCreateSessionForUploadRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.box.com/api/2.0" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsChunkedCreateSessionForUploadRequest1;

        // create path and map variables
        String localVarPath = "/files/{file_id}/upload_sessions"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSessionForUpload_0ValidateBeforeCall(String fileId, UploadsChunkedCreateSessionForUploadRequest1 uploadsChunkedCreateSessionForUploadRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling createSessionForUpload_0(Async)");
        }

        return createSessionForUpload_0Call(fileId, uploadsChunkedCreateSessionForUploadRequest1, _callback);

    }


    private ApiResponse<UploadSession> createSessionForUpload_0WithHttpInfo(String fileId, UploadsChunkedCreateSessionForUploadRequest1 uploadsChunkedCreateSessionForUploadRequest1) throws ApiException {
        okhttp3.Call localVarCall = createSessionForUpload_0ValidateBeforeCall(fileId, uploadsChunkedCreateSessionForUploadRequest1, null);
        Type localVarReturnType = new TypeToken<UploadSession>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSessionForUpload_0Async(String fileId, UploadsChunkedCreateSessionForUploadRequest1 uploadsChunkedCreateSessionForUploadRequest1, final ApiCallback<UploadSession> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSessionForUpload_0ValidateBeforeCall(fileId, uploadsChunkedCreateSessionForUploadRequest1, _callback);
        Type localVarReturnType = new TypeToken<UploadSession>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSessionForUpload0RequestBuilder {
        private final Long fileSize;
        private final String fileId;
        private String fileName;

        private CreateSessionForUpload0RequestBuilder(Long fileSize, String fileId) {
            this.fileSize = fileSize;
            this.fileId = fileId;
        }

        /**
         * Set fileName
         * @param fileName The optional new name of new file (optional)
         * @return CreateSessionForUpload0RequestBuilder
         */
        public CreateSessionForUpload0RequestBuilder fileName(String fileName) {
            this.fileName = fileName;
            return this;
        }
        
        /**
         * Build call for createSessionForUpload_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new upload session. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsChunkedCreateSessionForUploadRequest1 uploadsChunkedCreateSessionForUploadRequest1 = buildBodyParams();
            return createSessionForUpload_0Call(fileId, uploadsChunkedCreateSessionForUploadRequest1, _callback);
        }

        private UploadsChunkedCreateSessionForUploadRequest1 buildBodyParams() {
            UploadsChunkedCreateSessionForUploadRequest1 uploadsChunkedCreateSessionForUploadRequest1 = new UploadsChunkedCreateSessionForUploadRequest1();
            uploadsChunkedCreateSessionForUploadRequest1.fileSize(this.fileSize);
            uploadsChunkedCreateSessionForUploadRequest1.fileName(this.fileName);
            return uploadsChunkedCreateSessionForUploadRequest1;
        }

        /**
         * Execute createSessionForUpload_0 request
         * @return UploadSession
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new upload session. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public UploadSession execute() throws ApiException {
            UploadsChunkedCreateSessionForUploadRequest1 uploadsChunkedCreateSessionForUploadRequest1 = buildBodyParams();
            ApiResponse<UploadSession> localVarResp = createSessionForUpload_0WithHttpInfo(fileId, uploadsChunkedCreateSessionForUploadRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSessionForUpload_0 request with HTTP info returned
         * @return ApiResponse&lt;UploadSession&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new upload session. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadSession> executeWithHttpInfo() throws ApiException {
            UploadsChunkedCreateSessionForUploadRequest1 uploadsChunkedCreateSessionForUploadRequest1 = buildBodyParams();
            return createSessionForUpload_0WithHttpInfo(fileId, uploadsChunkedCreateSessionForUploadRequest1);
        }

        /**
         * Execute createSessionForUpload_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new upload session. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadSession> _callback) throws ApiException {
            UploadsChunkedCreateSessionForUploadRequest1 uploadsChunkedCreateSessionForUploadRequest1 = buildBodyParams();
            return createSessionForUpload_0Async(fileId, uploadsChunkedCreateSessionForUploadRequest1, _callback);
        }
    }

    /**
     * Create upload session for existing file
     * Creates an upload session for an existing file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return CreateSessionForUpload0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new upload session. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSessionForUpload0RequestBuilder createSessionForUpload_0(Long fileSize, String fileId) throws IllegalArgumentException {
        if (fileSize == null) throw new IllegalArgumentException("\"fileSize\" is required but got null");
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new CreateSessionForUpload0RequestBuilder(fileSize, fileId);
    }
    private okhttp3.Call filePartUpdateCall(String uploadSessionId, String digest, String contentRange, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.box.com/api/2.0" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/files/upload_sessions/{upload_session_id}"
            .replace("{" + "upload_session_id" + "}", localVarApiClient.escapeString(uploadSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (digest != null) {
            localVarHeaderParams.put("digest", localVarApiClient.parameterToString(digest));
        }

        if (contentRange != null) {
            localVarHeaderParams.put("content-range", localVarApiClient.parameterToString(contentRange));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filePartUpdateValidateBeforeCall(String uploadSessionId, String digest, String contentRange, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadSessionId' is set
        if (uploadSessionId == null) {
            throw new ApiException("Missing the required parameter 'uploadSessionId' when calling filePartUpdate(Async)");
        }

        // verify the required parameter 'digest' is set
        if (digest == null) {
            throw new ApiException("Missing the required parameter 'digest' when calling filePartUpdate(Async)");
        }

        // verify the required parameter 'contentRange' is set
        if (contentRange == null) {
            throw new ApiException("Missing the required parameter 'contentRange' when calling filePartUpdate(Async)");
        }

        return filePartUpdateCall(uploadSessionId, digest, contentRange, body, _callback);

    }


    private ApiResponse<UploadedPart> filePartUpdateWithHttpInfo(String uploadSessionId, String digest, String contentRange, File body) throws ApiException {
        okhttp3.Call localVarCall = filePartUpdateValidateBeforeCall(uploadSessionId, digest, contentRange, body, null);
        Type localVarReturnType = new TypeToken<UploadedPart>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call filePartUpdateAsync(String uploadSessionId, String digest, String contentRange, File body, final ApiCallback<UploadedPart> _callback) throws ApiException {

        okhttp3.Call localVarCall = filePartUpdateValidateBeforeCall(uploadSessionId, digest, contentRange, body, _callback);
        Type localVarReturnType = new TypeToken<UploadedPart>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FilePartUpdateRequestBuilder {
        private final String uploadSessionId;
        private final String digest;
        private final String contentRange;
        private File body;

        private FilePartUpdateRequestBuilder(String uploadSessionId, String digest, String contentRange) {
            this.uploadSessionId = uploadSessionId;
            this.digest = digest;
            this.contentRange = contentRange;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return FilePartUpdateRequestBuilder
         */
        public FilePartUpdateRequestBuilder body(File body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for filePartUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Chunk has been uploaded successfully. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            File body = buildBodyParams();
            return filePartUpdateCall(uploadSessionId, digest, contentRange, body, _callback);
        }

        private File buildBodyParams() {
            return this.body;
        }

        /**
         * Execute filePartUpdate request
         * @return UploadedPart
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Chunk has been uploaded successfully. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public UploadedPart execute() throws ApiException {
            File body = buildBodyParams();
            ApiResponse<UploadedPart> localVarResp = filePartUpdateWithHttpInfo(uploadSessionId, digest, contentRange, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute filePartUpdate request with HTTP info returned
         * @return ApiResponse&lt;UploadedPart&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Chunk has been uploaded successfully. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadedPart> executeWithHttpInfo() throws ApiException {
            File body = buildBodyParams();
            return filePartUpdateWithHttpInfo(uploadSessionId, digest, contentRange, body);
        }

        /**
         * Execute filePartUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Chunk has been uploaded successfully. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadedPart> _callback) throws ApiException {
            File body = buildBodyParams();
            return filePartUpdateAsync(uploadSessionId, digest, contentRange, body, _callback);
        }
    }

    /**
     * Upload part of file
     * Updates a chunk of an upload session for a file.
     * @param uploadSessionId The ID of the upload session. (required)
     * @param digest The [RFC3230][1] message digest of the chunk uploaded.  Only SHA1 is supported. The SHA1 digest must be base64 encoded. The format of this header is as &#x60;sha&#x3D;BASE64_ENCODED_DIGEST&#x60;.  To get the value for the &#x60;SHA&#x60; digest, use the openSSL command to encode the file part: &#x60;openssl sha1 -binary &lt;FILE_PART_NAME&gt; | base64&#x60;  [1]: https://tools.ietf.org/html/rfc3230 (required)
     * @param contentRange The byte range of the chunk.  Must not overlap with the range of a part already uploaded this session. Each part’s size must be exactly equal in size to the part size specified in the upload session that you created. One exception is the last part of the file, as this can be smaller.  When providing the value for &#x60;content-range&#x60;, remember that:  * The lower bound of each part&#39;s byte range   must be a multiple of the part size. * The higher bound must be a multiple of the part size - 1. (required)
     * @return FilePartUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Chunk has been uploaded successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public FilePartUpdateRequestBuilder filePartUpdate(String uploadSessionId, String digest, String contentRange) throws IllegalArgumentException {
        if (uploadSessionId == null) throw new IllegalArgumentException("\"uploadSessionId\" is required but got null");
            

        if (digest == null) throw new IllegalArgumentException("\"digest\" is required but got null");
            

        if (contentRange == null) throw new IllegalArgumentException("\"contentRange\" is required but got null");
            

        return new FilePartUpdateRequestBuilder(uploadSessionId, digest, contentRange);
    }
    private okhttp3.Call infoCall(String uploadSessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.box.com/api/2.0" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/upload_sessions/{upload_session_id}"
            .replace("{" + "upload_session_id" + "}", localVarApiClient.escapeString(uploadSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoValidateBeforeCall(String uploadSessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadSessionId' is set
        if (uploadSessionId == null) {
            throw new ApiException("Missing the required parameter 'uploadSessionId' when calling info(Async)");
        }

        return infoCall(uploadSessionId, _callback);

    }


    private ApiResponse<UploadSession> infoWithHttpInfo(String uploadSessionId) throws ApiException {
        okhttp3.Call localVarCall = infoValidateBeforeCall(uploadSessionId, null);
        Type localVarReturnType = new TypeToken<UploadSession>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call infoAsync(String uploadSessionId, final ApiCallback<UploadSession> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoValidateBeforeCall(uploadSessionId, _callback);
        Type localVarReturnType = new TypeToken<UploadSession>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InfoRequestBuilder {
        private final String uploadSessionId;

        private InfoRequestBuilder(String uploadSessionId) {
            this.uploadSessionId = uploadSessionId;
        }

        /**
         * Build call for info
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an upload session object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return infoCall(uploadSessionId, _callback);
        }


        /**
         * Execute info request
         * @return UploadSession
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an upload session object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public UploadSession execute() throws ApiException {
            ApiResponse<UploadSession> localVarResp = infoWithHttpInfo(uploadSessionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute info request with HTTP info returned
         * @return ApiResponse&lt;UploadSession&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an upload session object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadSession> executeWithHttpInfo() throws ApiException {
            return infoWithHttpInfo(uploadSessionId);
        }

        /**
         * Execute info request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an upload session object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadSession> _callback) throws ApiException {
            return infoAsync(uploadSessionId, _callback);
        }
    }

    /**
     * Get upload session
     * Return information about an upload session.
     * @param uploadSessionId The ID of the upload session. (required)
     * @return InfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload session object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public InfoRequestBuilder info(String uploadSessionId) throws IllegalArgumentException {
        if (uploadSessionId == null) throw new IllegalArgumentException("\"uploadSessionId\" is required but got null");
            

        return new InfoRequestBuilder(uploadSessionId);
    }
    private okhttp3.Call listPartsCall(String uploadSessionId, Long offset, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.box.com/api/2.0" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/upload_sessions/{upload_session_id}/parts"
            .replace("{" + "upload_session_id" + "}", localVarApiClient.escapeString(uploadSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPartsValidateBeforeCall(String uploadSessionId, Long offset, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadSessionId' is set
        if (uploadSessionId == null) {
            throw new ApiException("Missing the required parameter 'uploadSessionId' when calling listParts(Async)");
        }

        return listPartsCall(uploadSessionId, offset, limit, _callback);

    }


    private ApiResponse<UploadParts> listPartsWithHttpInfo(String uploadSessionId, Long offset, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listPartsValidateBeforeCall(uploadSessionId, offset, limit, null);
        Type localVarReturnType = new TypeToken<UploadParts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPartsAsync(String uploadSessionId, Long offset, Long limit, final ApiCallback<UploadParts> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPartsValidateBeforeCall(uploadSessionId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<UploadParts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPartsRequestBuilder {
        private final String uploadSessionId;
        private Long offset;
        private Long limit;

        private ListPartsRequestBuilder(String uploadSessionId) {
            this.uploadSessionId = uploadSessionId;
        }

        /**
         * Set offset
         * @param offset The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response. (optional, default to 0)
         * @return ListPartsRequestBuilder
         */
        public ListPartsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListPartsRequestBuilder
         */
        public ListPartsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listParts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of parts that have been uploaded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPartsCall(uploadSessionId, offset, limit, _callback);
        }


        /**
         * Execute listParts request
         * @return UploadParts
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of parts that have been uploaded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public UploadParts execute() throws ApiException {
            ApiResponse<UploadParts> localVarResp = listPartsWithHttpInfo(uploadSessionId, offset, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listParts request with HTTP info returned
         * @return ApiResponse&lt;UploadParts&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of parts that have been uploaded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadParts> executeWithHttpInfo() throws ApiException {
            return listPartsWithHttpInfo(uploadSessionId, offset, limit);
        }

        /**
         * Execute listParts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of parts that have been uploaded. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadParts> _callback) throws ApiException {
            return listPartsAsync(uploadSessionId, offset, limit, _callback);
        }
    }

    /**
     * List parts
     * Return a list of the chunks uploaded to the upload session so far.
     * @param uploadSessionId The ID of the upload session. (required)
     * @return ListPartsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of parts that have been uploaded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListPartsRequestBuilder listParts(String uploadSessionId) throws IllegalArgumentException {
        if (uploadSessionId == null) throw new IllegalArgumentException("\"uploadSessionId\" is required but got null");
            

        return new ListPartsRequestBuilder(uploadSessionId);
    }
    private okhttp3.Call removeUploadSessionCall(String uploadSessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://upload.box.com/api/2.0" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/upload_sessions/{upload_session_id}"
            .replace("{" + "upload_session_id" + "}", localVarApiClient.escapeString(uploadSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUploadSessionValidateBeforeCall(String uploadSessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadSessionId' is set
        if (uploadSessionId == null) {
            throw new ApiException("Missing the required parameter 'uploadSessionId' when calling removeUploadSession(Async)");
        }

        return removeUploadSessionCall(uploadSessionId, _callback);

    }


    private ApiResponse<Void> removeUploadSessionWithHttpInfo(String uploadSessionId) throws ApiException {
        okhttp3.Call localVarCall = removeUploadSessionValidateBeforeCall(uploadSessionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeUploadSessionAsync(String uploadSessionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUploadSessionValidateBeforeCall(uploadSessionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveUploadSessionRequestBuilder {
        private final String uploadSessionId;

        private RemoveUploadSessionRequestBuilder(String uploadSessionId) {
            this.uploadSessionId = uploadSessionId;
        }

        /**
         * Build call for removeUploadSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the session was successfully aborted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeUploadSessionCall(uploadSessionId, _callback);
        }


        /**
         * Execute removeUploadSession request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the session was successfully aborted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeUploadSessionWithHttpInfo(uploadSessionId);
        }

        /**
         * Execute removeUploadSession request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the session was successfully aborted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeUploadSessionWithHttpInfo(uploadSessionId);
        }

        /**
         * Execute removeUploadSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the session was successfully aborted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeUploadSessionAsync(uploadSessionId, _callback);
        }
    }

    /**
     * Remove upload session
     * Abort an upload session and discard all data uploaded.  This cannot be reversed.
     * @param uploadSessionId The ID of the upload session. (required)
     * @return RemoveUploadSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A blank response is returned if the session was successfully aborted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUploadSessionRequestBuilder removeUploadSession(String uploadSessionId) throws IllegalArgumentException {
        if (uploadSessionId == null) throw new IllegalArgumentException("\"uploadSessionId\" is required but got null");
            

        return new RemoveUploadSessionRequestBuilder(uploadSessionId);
    }
}
