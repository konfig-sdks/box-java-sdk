/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.LegalHoldPolicies;
import com.konfigthis.client.model.LegalHoldPoliciesCreateNewPolicyRequest;
import com.konfigthis.client.model.LegalHoldPoliciesUpdatePolicyRequest;
import com.konfigthis.client.model.LegalHoldPolicy;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LegalHoldPoliciesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LegalHoldPoliciesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LegalHoldPoliciesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewPolicyCall(LegalHoldPoliciesCreateNewPolicyRequest legalHoldPoliciesCreateNewPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = legalHoldPoliciesCreateNewPolicyRequest;

        // create path and map variables
        String localVarPath = "/legal_hold_policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPolicyValidateBeforeCall(LegalHoldPoliciesCreateNewPolicyRequest legalHoldPoliciesCreateNewPolicyRequest, final ApiCallback _callback) throws ApiException {
        return createNewPolicyCall(legalHoldPoliciesCreateNewPolicyRequest, _callback);

    }


    private ApiResponse<LegalHoldPolicy> createNewPolicyWithHttpInfo(LegalHoldPoliciesCreateNewPolicyRequest legalHoldPoliciesCreateNewPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewPolicyValidateBeforeCall(legalHoldPoliciesCreateNewPolicyRequest, null);
        Type localVarReturnType = new TypeToken<LegalHoldPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPolicyAsync(LegalHoldPoliciesCreateNewPolicyRequest legalHoldPoliciesCreateNewPolicyRequest, final ApiCallback<LegalHoldPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPolicyValidateBeforeCall(legalHoldPoliciesCreateNewPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<LegalHoldPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPolicyRequestBuilder {
        private final String policyName;
        private String description;
        private OffsetDateTime filterStartedAt;
        private OffsetDateTime filterEndedAt;
        private Boolean isOngoing;

        private CreateNewPolicyRequestBuilder(String policyName) {
            this.policyName = policyName;
        }

        /**
         * Set description
         * @param description A description for the policy. (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set filterStartedAt
         * @param filterStartedAt The filter start date.  When this policy is applied using a &#x60;custodian&#x60; legal hold assignments, it will only apply to file versions created or uploaded inside of the date range. Other assignment types, such as folders and files, will ignore the date filter.  Required if &#x60;is_ongoing&#x60; is set to &#x60;false&#x60;. (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder filterStartedAt(OffsetDateTime filterStartedAt) {
            this.filterStartedAt = filterStartedAt;
            return this;
        }
        
        /**
         * Set filterEndedAt
         * @param filterEndedAt The filter end date.  When this policy is applied using a &#x60;custodian&#x60; legal hold assignments, it will only apply to file versions created or uploaded inside of the date range. Other assignment types, such as folders and files, will ignore the date filter.  Required if &#x60;is_ongoing&#x60; is set to &#x60;false&#x60;. (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder filterEndedAt(OffsetDateTime filterEndedAt) {
            this.filterEndedAt = filterEndedAt;
            return this;
        }
        
        /**
         * Set isOngoing
         * @param isOngoing Whether new assignments under this policy should continue applying to files even after initialization.  When this policy is applied using a legal hold assignment, it will continue applying the policy to any new file versions even after it has been applied.  For example, if a legal hold assignment is placed on a user today, and that user uploads a file tomorrow, that file will get held. This will continue until the policy is retired.  Required if no filter dates are set. (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder isOngoing(Boolean isOngoing) {
            this.isOngoing = isOngoing;
            return this;
        }
        
        /**
         * Build call for createNewPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LegalHoldPoliciesCreateNewPolicyRequest legalHoldPoliciesCreateNewPolicyRequest = buildBodyParams();
            return createNewPolicyCall(legalHoldPoliciesCreateNewPolicyRequest, _callback);
        }

        private LegalHoldPoliciesCreateNewPolicyRequest buildBodyParams() {
            LegalHoldPoliciesCreateNewPolicyRequest legalHoldPoliciesCreateNewPolicyRequest = new LegalHoldPoliciesCreateNewPolicyRequest();
            legalHoldPoliciesCreateNewPolicyRequest.description(this.description);
            legalHoldPoliciesCreateNewPolicyRequest.policyName(this.policyName);
            legalHoldPoliciesCreateNewPolicyRequest.filterStartedAt(this.filterStartedAt);
            legalHoldPoliciesCreateNewPolicyRequest.filterEndedAt(this.filterEndedAt);
            legalHoldPoliciesCreateNewPolicyRequest.isOngoing(this.isOngoing);
            return legalHoldPoliciesCreateNewPolicyRequest;
        }

        /**
         * Execute createNewPolicy request
         * @return LegalHoldPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public LegalHoldPolicy execute() throws ApiException {
            LegalHoldPoliciesCreateNewPolicyRequest legalHoldPoliciesCreateNewPolicyRequest = buildBodyParams();
            ApiResponse<LegalHoldPolicy> localVarResp = createNewPolicyWithHttpInfo(legalHoldPoliciesCreateNewPolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPolicy request with HTTP info returned
         * @return ApiResponse&lt;LegalHoldPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LegalHoldPolicy> executeWithHttpInfo() throws ApiException {
            LegalHoldPoliciesCreateNewPolicyRequest legalHoldPoliciesCreateNewPolicyRequest = buildBodyParams();
            return createNewPolicyWithHttpInfo(legalHoldPoliciesCreateNewPolicyRequest);
        }

        /**
         * Execute createNewPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LegalHoldPolicy> _callback) throws ApiException {
            LegalHoldPoliciesCreateNewPolicyRequest legalHoldPoliciesCreateNewPolicyRequest = buildBodyParams();
            return createNewPolicyAsync(legalHoldPoliciesCreateNewPolicyRequest, _callback);
        }
    }

    /**
     * Create legal hold policy
     * Create a new legal hold policy.
     * @return CreateNewPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new legal hold policy object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPolicyRequestBuilder createNewPolicy(String policyName) throws IllegalArgumentException {
        if (policyName == null) throw new IllegalArgumentException("\"policyName\" is required but got null");
            

        return new CreateNewPolicyRequestBuilder(policyName);
    }
    private okhttp3.Call getPolicyCall(String legalHoldPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legal_hold_policies/{legal_hold_policy_id}"
            .replace("{" + "legal_hold_policy_id" + "}", localVarApiClient.escapeString(legalHoldPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyValidateBeforeCall(String legalHoldPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalHoldPolicyId' is set
        if (legalHoldPolicyId == null) {
            throw new ApiException("Missing the required parameter 'legalHoldPolicyId' when calling getPolicy(Async)");
        }

        return getPolicyCall(legalHoldPolicyId, _callback);

    }


    private ApiResponse<LegalHoldPolicy> getPolicyWithHttpInfo(String legalHoldPolicyId) throws ApiException {
        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(legalHoldPolicyId, null);
        Type localVarReturnType = new TypeToken<LegalHoldPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyAsync(String legalHoldPolicyId, final ApiCallback<LegalHoldPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(legalHoldPolicyId, _callback);
        Type localVarReturnType = new TypeToken<LegalHoldPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPolicyRequestBuilder {
        private final String legalHoldPolicyId;

        private GetPolicyRequestBuilder(String legalHoldPolicyId) {
            this.legalHoldPolicyId = legalHoldPolicyId;
        }

        /**
         * Build call for getPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyCall(legalHoldPolicyId, _callback);
        }


        /**
         * Execute getPolicy request
         * @return LegalHoldPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public LegalHoldPolicy execute() throws ApiException {
            ApiResponse<LegalHoldPolicy> localVarResp = getPolicyWithHttpInfo(legalHoldPolicyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPolicy request with HTTP info returned
         * @return ApiResponse&lt;LegalHoldPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LegalHoldPolicy> executeWithHttpInfo() throws ApiException {
            return getPolicyWithHttpInfo(legalHoldPolicyId);
        }

        /**
         * Execute getPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LegalHoldPolicy> _callback) throws ApiException {
            return getPolicyAsync(legalHoldPolicyId, _callback);
        }
    }

    /**
     * Get legal hold policy
     * Retrieve a legal hold policy.
     * @param legalHoldPolicyId The ID of the legal hold policy (required)
     * @return GetPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a legal hold policy object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetPolicyRequestBuilder getPolicy(String legalHoldPolicyId) throws IllegalArgumentException {
        if (legalHoldPolicyId == null) throw new IllegalArgumentException("\"legalHoldPolicyId\" is required but got null");
            

        return new GetPolicyRequestBuilder(legalHoldPolicyId);
    }
    private okhttp3.Call listAllCall(String policyName, List<String> fields, String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legal_hold_policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_name", policyName));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String policyName, List<String> fields, String marker, Long limit, final ApiCallback _callback) throws ApiException {
        return listAllCall(policyName, fields, marker, limit, _callback);

    }


    private ApiResponse<LegalHoldPolicies> listAllWithHttpInfo(String policyName, List<String> fields, String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(policyName, fields, marker, limit, null);
        Type localVarReturnType = new TypeToken<LegalHoldPolicies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(String policyName, List<String> fields, String marker, Long limit, final ApiCallback<LegalHoldPolicies> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(policyName, fields, marker, limit, _callback);
        Type localVarReturnType = new TypeToken<LegalHoldPolicies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private String policyName;
        private List<String> fields;
        private String marker;
        private Long limit;

        private ListAllRequestBuilder() {
        }

        /**
         * Set policyName
         * @param policyName Limits results to policies for which the names start with this search term. This is a case-insensitive prefix. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder policyName(String policyName) {
            this.policyName = policyName;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of legal hold policies. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(policyName, fields, marker, limit, _callback);
        }


        /**
         * Execute listAll request
         * @return LegalHoldPolicies
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of legal hold policies. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public LegalHoldPolicies execute() throws ApiException {
            ApiResponse<LegalHoldPolicies> localVarResp = listAllWithHttpInfo(policyName, fields, marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;LegalHoldPolicies&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of legal hold policies. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LegalHoldPolicies> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(policyName, fields, marker, limit);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of legal hold policies. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LegalHoldPolicies> _callback) throws ApiException {
            return listAllAsync(policyName, fields, marker, limit, _callback);
        }
    }

    /**
     * List all legal hold policies
     * Retrieves a list of legal hold policies that belong to an enterprise.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of legal hold policies. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call removePolicyCall(String legalHoldPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legal_hold_policies/{legal_hold_policy_id}"
            .replace("{" + "legal_hold_policy_id" + "}", localVarApiClient.escapeString(legalHoldPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePolicyValidateBeforeCall(String legalHoldPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalHoldPolicyId' is set
        if (legalHoldPolicyId == null) {
            throw new ApiException("Missing the required parameter 'legalHoldPolicyId' when calling removePolicy(Async)");
        }

        return removePolicyCall(legalHoldPolicyId, _callback);

    }


    private ApiResponse<Void> removePolicyWithHttpInfo(String legalHoldPolicyId) throws ApiException {
        okhttp3.Call localVarCall = removePolicyValidateBeforeCall(legalHoldPolicyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePolicyAsync(String legalHoldPolicyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePolicyValidateBeforeCall(legalHoldPolicyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePolicyRequestBuilder {
        private final String legalHoldPolicyId;

        private RemovePolicyRequestBuilder(String legalHoldPolicyId) {
            this.legalHoldPolicyId = legalHoldPolicyId;
        }

        /**
         * Build call for removePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A blank response is returned if the policy was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePolicyCall(legalHoldPolicyId, _callback);
        }


        /**
         * Execute removePolicy request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A blank response is returned if the policy was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePolicyWithHttpInfo(legalHoldPolicyId);
        }

        /**
         * Execute removePolicy request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A blank response is returned if the policy was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePolicyWithHttpInfo(legalHoldPolicyId);
        }

        /**
         * Execute removePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A blank response is returned if the policy was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePolicyAsync(legalHoldPolicyId, _callback);
        }
    }

    /**
     * Remove legal hold policy
     * Delete an existing legal hold policy.  This is an asynchronous process. The policy will not be fully deleted yet when the response returns.
     * @param legalHoldPolicyId The ID of the legal hold policy (required)
     * @return RemovePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A blank response is returned if the policy was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemovePolicyRequestBuilder removePolicy(String legalHoldPolicyId) throws IllegalArgumentException {
        if (legalHoldPolicyId == null) throw new IllegalArgumentException("\"legalHoldPolicyId\" is required but got null");
            

        return new RemovePolicyRequestBuilder(legalHoldPolicyId);
    }
    private okhttp3.Call updatePolicyCall(String legalHoldPolicyId, LegalHoldPoliciesUpdatePolicyRequest legalHoldPoliciesUpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = legalHoldPoliciesUpdatePolicyRequest;

        // create path and map variables
        String localVarPath = "/legal_hold_policies/{legal_hold_policy_id}"
            .replace("{" + "legal_hold_policy_id" + "}", localVarApiClient.escapeString(legalHoldPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePolicyValidateBeforeCall(String legalHoldPolicyId, LegalHoldPoliciesUpdatePolicyRequest legalHoldPoliciesUpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalHoldPolicyId' is set
        if (legalHoldPolicyId == null) {
            throw new ApiException("Missing the required parameter 'legalHoldPolicyId' when calling updatePolicy(Async)");
        }

        return updatePolicyCall(legalHoldPolicyId, legalHoldPoliciesUpdatePolicyRequest, _callback);

    }


    private ApiResponse<LegalHoldPolicy> updatePolicyWithHttpInfo(String legalHoldPolicyId, LegalHoldPoliciesUpdatePolicyRequest legalHoldPoliciesUpdatePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(legalHoldPolicyId, legalHoldPoliciesUpdatePolicyRequest, null);
        Type localVarReturnType = new TypeToken<LegalHoldPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePolicyAsync(String legalHoldPolicyId, LegalHoldPoliciesUpdatePolicyRequest legalHoldPoliciesUpdatePolicyRequest, final ApiCallback<LegalHoldPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(legalHoldPolicyId, legalHoldPoliciesUpdatePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<LegalHoldPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePolicyRequestBuilder {
        private final String legalHoldPolicyId;
        private String description;
        private String policyName;
        private String releaseNotes;

        private UpdatePolicyRequestBuilder(String legalHoldPolicyId) {
            this.legalHoldPolicyId = legalHoldPolicyId;
        }

        /**
         * Set description
         * @param description A description for the policy. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set policyName
         * @param policyName The name of the policy. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder policyName(String policyName) {
            this.policyName = policyName;
            return this;
        }
        
        /**
         * Set releaseNotes
         * @param releaseNotes Notes around why the policy was released. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder releaseNotes(String releaseNotes) {
            this.releaseNotes = releaseNotes;
            return this;
        }
        
        /**
         * Build call for updatePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LegalHoldPoliciesUpdatePolicyRequest legalHoldPoliciesUpdatePolicyRequest = buildBodyParams();
            return updatePolicyCall(legalHoldPolicyId, legalHoldPoliciesUpdatePolicyRequest, _callback);
        }

        private LegalHoldPoliciesUpdatePolicyRequest buildBodyParams() {
            LegalHoldPoliciesUpdatePolicyRequest legalHoldPoliciesUpdatePolicyRequest = new LegalHoldPoliciesUpdatePolicyRequest();
            legalHoldPoliciesUpdatePolicyRequest.description(this.description);
            legalHoldPoliciesUpdatePolicyRequest.policyName(this.policyName);
            legalHoldPoliciesUpdatePolicyRequest.releaseNotes(this.releaseNotes);
            return legalHoldPoliciesUpdatePolicyRequest;
        }

        /**
         * Execute updatePolicy request
         * @return LegalHoldPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public LegalHoldPolicy execute() throws ApiException {
            LegalHoldPoliciesUpdatePolicyRequest legalHoldPoliciesUpdatePolicyRequest = buildBodyParams();
            ApiResponse<LegalHoldPolicy> localVarResp = updatePolicyWithHttpInfo(legalHoldPolicyId, legalHoldPoliciesUpdatePolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePolicy request with HTTP info returned
         * @return ApiResponse&lt;LegalHoldPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LegalHoldPolicy> executeWithHttpInfo() throws ApiException {
            LegalHoldPoliciesUpdatePolicyRequest legalHoldPoliciesUpdatePolicyRequest = buildBodyParams();
            return updatePolicyWithHttpInfo(legalHoldPolicyId, legalHoldPoliciesUpdatePolicyRequest);
        }

        /**
         * Execute updatePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LegalHoldPolicy> _callback) throws ApiException {
            LegalHoldPoliciesUpdatePolicyRequest legalHoldPoliciesUpdatePolicyRequest = buildBodyParams();
            return updatePolicyAsync(legalHoldPolicyId, legalHoldPoliciesUpdatePolicyRequest, _callback);
        }
    }

    /**
     * Update legal hold policy
     * Update legal hold policy.
     * @param legalHoldPolicyId The ID of the legal hold policy (required)
     * @return UpdatePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a new legal hold policy object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePolicyRequestBuilder updatePolicy(String legalHoldPolicyId) throws IllegalArgumentException {
        if (legalHoldPolicyId == null) throw new IllegalArgumentException("\"legalHoldPolicyId\" is required but got null");
            

        return new UpdatePolicyRequestBuilder(legalHoldPolicyId);
    }
}
