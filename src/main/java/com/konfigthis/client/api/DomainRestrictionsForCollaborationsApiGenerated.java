/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.CollaborationAllowlistEntries;
import com.konfigthis.client.model.CollaborationAllowlistEntry;
import com.konfigthis.client.model.DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DomainRestrictionsForCollaborationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainRestrictionsForCollaborationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DomainRestrictionsForCollaborationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addAllowedDomainEntryCall(DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest;

        // create path and map variables
        String localVarPath = "/collaboration_whitelist_entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAllowedDomainEntryValidateBeforeCall(DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest, final ApiCallback _callback) throws ApiException {
        return addAllowedDomainEntryCall(domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest, _callback);

    }


    private ApiResponse<CollaborationAllowlistEntry> addAllowedDomainEntryWithHttpInfo(DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = addAllowedDomainEntryValidateBeforeCall(domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest, null);
        Type localVarReturnType = new TypeToken<CollaborationAllowlistEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAllowedDomainEntryAsync(DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest, final ApiCallback<CollaborationAllowlistEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAllowedDomainEntryValidateBeforeCall(domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<CollaborationAllowlistEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddAllowedDomainEntryRequestBuilder {
        private final String domain;
        private final String direction;

        private AddAllowedDomainEntryRequestBuilder(String domain, String direction) {
            this.domain = domain;
            this.direction = direction;
        }

        /**
         * Build call for addAllowedDomainEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new entry on the list of allowed domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest = buildBodyParams();
            return addAllowedDomainEntryCall(domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest, _callback);
        }

        private DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest buildBodyParams() {
            DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest = new DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest();
            domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest.domain(this.domain);
            if (this.direction != null)
            domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest.direction(DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest.DirectionEnum.fromValue(this.direction));
            return domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest;
        }

        /**
         * Execute addAllowedDomainEntry request
         * @return CollaborationAllowlistEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new entry on the list of allowed domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public CollaborationAllowlistEntry execute() throws ApiException {
            DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest = buildBodyParams();
            ApiResponse<CollaborationAllowlistEntry> localVarResp = addAllowedDomainEntryWithHttpInfo(domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addAllowedDomainEntry request with HTTP info returned
         * @return ApiResponse&lt;CollaborationAllowlistEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new entry on the list of allowed domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollaborationAllowlistEntry> executeWithHttpInfo() throws ApiException {
            DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest = buildBodyParams();
            return addAllowedDomainEntryWithHttpInfo(domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest);
        }

        /**
         * Execute addAllowedDomainEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new entry on the list of allowed domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollaborationAllowlistEntry> _callback) throws ApiException {
            DomainRestrictionsForCollaborationsAddAllowedDomainEntryRequest domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest = buildBodyParams();
            return addAllowedDomainEntryAsync(domainRestrictionsForCollaborationsAddAllowedDomainEntryRequest, _callback);
        }
    }

    /**
     * Add domain to list of allowed collaboration domains
     * Creates a new entry in the list of allowed domains to allow collaboration for.
     * @return AddAllowedDomainEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a new entry on the list of allowed domains. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public AddAllowedDomainEntryRequestBuilder addAllowedDomainEntry(String domain, String direction) throws IllegalArgumentException {
        if (domain == null) throw new IllegalArgumentException("\"domain\" is required but got null");
            

        if (direction == null) throw new IllegalArgumentException("\"direction\" is required but got null");
            

        return new AddAllowedDomainEntryRequestBuilder(domain, direction);
    }
    private okhttp3.Call allowedCollaborationDomainCall(String collaborationWhitelistEntryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collaboration_whitelist_entries/{collaboration_whitelist_entry_id}"
            .replace("{" + "collaboration_whitelist_entry_id" + "}", localVarApiClient.escapeString(collaborationWhitelistEntryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allowedCollaborationDomainValidateBeforeCall(String collaborationWhitelistEntryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collaborationWhitelistEntryId' is set
        if (collaborationWhitelistEntryId == null) {
            throw new ApiException("Missing the required parameter 'collaborationWhitelistEntryId' when calling allowedCollaborationDomain(Async)");
        }

        return allowedCollaborationDomainCall(collaborationWhitelistEntryId, _callback);

    }


    private ApiResponse<CollaborationAllowlistEntry> allowedCollaborationDomainWithHttpInfo(String collaborationWhitelistEntryId) throws ApiException {
        okhttp3.Call localVarCall = allowedCollaborationDomainValidateBeforeCall(collaborationWhitelistEntryId, null);
        Type localVarReturnType = new TypeToken<CollaborationAllowlistEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call allowedCollaborationDomainAsync(String collaborationWhitelistEntryId, final ApiCallback<CollaborationAllowlistEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = allowedCollaborationDomainValidateBeforeCall(collaborationWhitelistEntryId, _callback);
        Type localVarReturnType = new TypeToken<CollaborationAllowlistEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AllowedCollaborationDomainRequestBuilder {
        private final String collaborationWhitelistEntryId;

        private AllowedCollaborationDomainRequestBuilder(String collaborationWhitelistEntryId) {
            this.collaborationWhitelistEntryId = collaborationWhitelistEntryId;
        }

        /**
         * Build call for allowedCollaborationDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an entry on the list of allowed domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return allowedCollaborationDomainCall(collaborationWhitelistEntryId, _callback);
        }


        /**
         * Execute allowedCollaborationDomain request
         * @return CollaborationAllowlistEntry
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an entry on the list of allowed domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public CollaborationAllowlistEntry execute() throws ApiException {
            ApiResponse<CollaborationAllowlistEntry> localVarResp = allowedCollaborationDomainWithHttpInfo(collaborationWhitelistEntryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute allowedCollaborationDomain request with HTTP info returned
         * @return ApiResponse&lt;CollaborationAllowlistEntry&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an entry on the list of allowed domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollaborationAllowlistEntry> executeWithHttpInfo() throws ApiException {
            return allowedCollaborationDomainWithHttpInfo(collaborationWhitelistEntryId);
        }

        /**
         * Execute allowedCollaborationDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an entry on the list of allowed domains. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollaborationAllowlistEntry> _callback) throws ApiException {
            return allowedCollaborationDomainAsync(collaborationWhitelistEntryId, _callback);
        }
    }

    /**
     * Get allowed collaboration domain
     * Returns a domain that has been deemed safe to create collaborations for within the current enterprise.
     * @param collaborationWhitelistEntryId The ID of the entry in the list. (required)
     * @return AllowedCollaborationDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an entry on the list of allowed domains. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public AllowedCollaborationDomainRequestBuilder allowedCollaborationDomain(String collaborationWhitelistEntryId) throws IllegalArgumentException {
        if (collaborationWhitelistEntryId == null) throw new IllegalArgumentException("\"collaborationWhitelistEntryId\" is required but got null");
            

        return new AllowedCollaborationDomainRequestBuilder(collaborationWhitelistEntryId);
    }
    private okhttp3.Call listAllowedCollaborationDomainsCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collaboration_whitelist_entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllowedCollaborationDomainsValidateBeforeCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        return listAllowedCollaborationDomainsCall(marker, limit, _callback);

    }


    private ApiResponse<CollaborationAllowlistEntries> listAllowedCollaborationDomainsWithHttpInfo(String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listAllowedCollaborationDomainsValidateBeforeCall(marker, limit, null);
        Type localVarReturnType = new TypeToken<CollaborationAllowlistEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllowedCollaborationDomainsAsync(String marker, Long limit, final ApiCallback<CollaborationAllowlistEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllowedCollaborationDomainsValidateBeforeCall(marker, limit, _callback);
        Type localVarReturnType = new TypeToken<CollaborationAllowlistEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllowedCollaborationDomainsRequestBuilder {
        private String marker;
        private Long limit;

        private ListAllowedCollaborationDomainsRequestBuilder() {
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListAllowedCollaborationDomainsRequestBuilder
         */
        public ListAllowedCollaborationDomainsRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListAllowedCollaborationDomainsRequestBuilder
         */
        public ListAllowedCollaborationDomainsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listAllowedCollaborationDomains
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of domains that are allowed for collaboration. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllowedCollaborationDomainsCall(marker, limit, _callback);
        }


        /**
         * Execute listAllowedCollaborationDomains request
         * @return CollaborationAllowlistEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of domains that are allowed for collaboration. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public CollaborationAllowlistEntries execute() throws ApiException {
            ApiResponse<CollaborationAllowlistEntries> localVarResp = listAllowedCollaborationDomainsWithHttpInfo(marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllowedCollaborationDomains request with HTTP info returned
         * @return ApiResponse&lt;CollaborationAllowlistEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of domains that are allowed for collaboration. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollaborationAllowlistEntries> executeWithHttpInfo() throws ApiException {
            return listAllowedCollaborationDomainsWithHttpInfo(marker, limit);
        }

        /**
         * Execute listAllowedCollaborationDomains request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of domains that are allowed for collaboration. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollaborationAllowlistEntries> _callback) throws ApiException {
            return listAllowedCollaborationDomainsAsync(marker, limit, _callback);
        }
    }

    /**
     * List allowed collaboration domains
     * Returns the list domains that have been deemed safe to create collaborations for within the current enterprise.
     * @return ListAllowedCollaborationDomainsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of domains that are allowed for collaboration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllowedCollaborationDomainsRequestBuilder listAllowedCollaborationDomains() throws IllegalArgumentException {
        return new ListAllowedCollaborationDomainsRequestBuilder();
    }
    private okhttp3.Call removeAllowedDomainEntryCall(String collaborationWhitelistEntryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collaboration_whitelist_entries/{collaboration_whitelist_entry_id}"
            .replace("{" + "collaboration_whitelist_entry_id" + "}", localVarApiClient.escapeString(collaborationWhitelistEntryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAllowedDomainEntryValidateBeforeCall(String collaborationWhitelistEntryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collaborationWhitelistEntryId' is set
        if (collaborationWhitelistEntryId == null) {
            throw new ApiException("Missing the required parameter 'collaborationWhitelistEntryId' when calling removeAllowedDomainEntry(Async)");
        }

        return removeAllowedDomainEntryCall(collaborationWhitelistEntryId, _callback);

    }


    private ApiResponse<Void> removeAllowedDomainEntryWithHttpInfo(String collaborationWhitelistEntryId) throws ApiException {
        okhttp3.Call localVarCall = removeAllowedDomainEntryValidateBeforeCall(collaborationWhitelistEntryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAllowedDomainEntryAsync(String collaborationWhitelistEntryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAllowedDomainEntryValidateBeforeCall(collaborationWhitelistEntryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveAllowedDomainEntryRequestBuilder {
        private final String collaborationWhitelistEntryId;

        private RemoveAllowedDomainEntryRequestBuilder(String collaborationWhitelistEntryId) {
            this.collaborationWhitelistEntryId = collaborationWhitelistEntryId;
        }

        /**
         * Build call for removeAllowedDomainEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the entry was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeAllowedDomainEntryCall(collaborationWhitelistEntryId, _callback);
        }


        /**
         * Execute removeAllowedDomainEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the entry was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeAllowedDomainEntryWithHttpInfo(collaborationWhitelistEntryId);
        }

        /**
         * Execute removeAllowedDomainEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the entry was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeAllowedDomainEntryWithHttpInfo(collaborationWhitelistEntryId);
        }

        /**
         * Execute removeAllowedDomainEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the entry was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAllowedDomainEntryAsync(collaborationWhitelistEntryId, _callback);
        }
    }

    /**
     * Remove domain from list of allowed collaboration domains
     * Removes a domain from the list of domains that have been deemed safe to create collaborations for within the current enterprise.
     * @param collaborationWhitelistEntryId The ID of the entry in the list. (required)
     * @return RemoveAllowedDomainEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A blank response is returned if the entry was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAllowedDomainEntryRequestBuilder removeAllowedDomainEntry(String collaborationWhitelistEntryId) throws IllegalArgumentException {
        if (collaborationWhitelistEntryId == null) throw new IllegalArgumentException("\"collaborationWhitelistEntryId\" is required but got null");
            

        return new RemoveAllowedDomainEntryRequestBuilder(collaborationWhitelistEntryId);
    }
}
