/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.ShieldInformationBarrierBase;
import com.konfigthis.client.model.ShieldInformationBarrierSegment;
import com.konfigthis.client.model.ShieldInformationBarrierSegments;
import com.konfigthis.client.model.ShieldInformationBarrierSegmentsCreateSegmentRequest;
import com.konfigthis.client.model.ShieldInformationBarrierSegmentsUpdateByIdRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShieldInformationBarrierSegmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShieldInformationBarrierSegmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ShieldInformationBarrierSegmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSegmentCall(ShieldInformationBarrierSegmentsCreateSegmentRequest shieldInformationBarrierSegmentsCreateSegmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shieldInformationBarrierSegmentsCreateSegmentRequest;

        // create path and map variables
        String localVarPath = "/shield_information_barrier_segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSegmentValidateBeforeCall(ShieldInformationBarrierSegmentsCreateSegmentRequest shieldInformationBarrierSegmentsCreateSegmentRequest, final ApiCallback _callback) throws ApiException {
        return createSegmentCall(shieldInformationBarrierSegmentsCreateSegmentRequest, _callback);

    }


    private ApiResponse<ShieldInformationBarrierSegment> createSegmentWithHttpInfo(ShieldInformationBarrierSegmentsCreateSegmentRequest shieldInformationBarrierSegmentsCreateSegmentRequest) throws ApiException {
        okhttp3.Call localVarCall = createSegmentValidateBeforeCall(shieldInformationBarrierSegmentsCreateSegmentRequest, null);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierSegment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSegmentAsync(ShieldInformationBarrierSegmentsCreateSegmentRequest shieldInformationBarrierSegmentsCreateSegmentRequest, final ApiCallback<ShieldInformationBarrierSegment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSegmentValidateBeforeCall(shieldInformationBarrierSegmentsCreateSegmentRequest, _callback);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierSegment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSegmentRequestBuilder {
        private final ShieldInformationBarrierBase shieldInformationBarrier;
        private final String name;
        private String description;

        private CreateSegmentRequestBuilder(ShieldInformationBarrierBase shieldInformationBarrier, String name) {
            this.shieldInformationBarrier = shieldInformationBarrier;
            this.name = name;
        }

        /**
         * Set description
         * @param description Description of the shield information barrier segment (optional)
         * @return CreateSegmentRequestBuilder
         */
        public CreateSegmentRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for createSegment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new shield information barrier segment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShieldInformationBarrierSegmentsCreateSegmentRequest shieldInformationBarrierSegmentsCreateSegmentRequest = buildBodyParams();
            return createSegmentCall(shieldInformationBarrierSegmentsCreateSegmentRequest, _callback);
        }

        private ShieldInformationBarrierSegmentsCreateSegmentRequest buildBodyParams() {
            ShieldInformationBarrierSegmentsCreateSegmentRequest shieldInformationBarrierSegmentsCreateSegmentRequest = new ShieldInformationBarrierSegmentsCreateSegmentRequest();
            shieldInformationBarrierSegmentsCreateSegmentRequest.description(this.description);
            shieldInformationBarrierSegmentsCreateSegmentRequest.shieldInformationBarrier(this.shieldInformationBarrier);
            shieldInformationBarrierSegmentsCreateSegmentRequest.name(this.name);
            return shieldInformationBarrierSegmentsCreateSegmentRequest;
        }

        /**
         * Execute createSegment request
         * @return ShieldInformationBarrierSegment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new shield information barrier segment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ShieldInformationBarrierSegment execute() throws ApiException {
            ShieldInformationBarrierSegmentsCreateSegmentRequest shieldInformationBarrierSegmentsCreateSegmentRequest = buildBodyParams();
            ApiResponse<ShieldInformationBarrierSegment> localVarResp = createSegmentWithHttpInfo(shieldInformationBarrierSegmentsCreateSegmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSegment request with HTTP info returned
         * @return ApiResponse&lt;ShieldInformationBarrierSegment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new shield information barrier segment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShieldInformationBarrierSegment> executeWithHttpInfo() throws ApiException {
            ShieldInformationBarrierSegmentsCreateSegmentRequest shieldInformationBarrierSegmentsCreateSegmentRequest = buildBodyParams();
            return createSegmentWithHttpInfo(shieldInformationBarrierSegmentsCreateSegmentRequest);
        }

        /**
         * Execute createSegment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new shield information barrier segment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShieldInformationBarrierSegment> _callback) throws ApiException {
            ShieldInformationBarrierSegmentsCreateSegmentRequest shieldInformationBarrierSegmentsCreateSegmentRequest = buildBodyParams();
            return createSegmentAsync(shieldInformationBarrierSegmentsCreateSegmentRequest, _callback);
        }
    }

    /**
     * Create shield information barrier segment
     * Creates a shield information barrier segment.
     * @return CreateSegmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new shield information barrier segment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSegmentRequestBuilder createSegment(ShieldInformationBarrierBase shieldInformationBarrier, String name) throws IllegalArgumentException {
        if (shieldInformationBarrier == null) throw new IllegalArgumentException("\"shieldInformationBarrier\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateSegmentRequestBuilder(shieldInformationBarrier, name);
    }
    private okhttp3.Call deleteSegmentByIdCall(String shieldInformationBarrierSegmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shield_information_barrier_segments/{shield_information_barrier_segment_id}"
            .replace("{" + "shield_information_barrier_segment_id" + "}", localVarApiClient.escapeString(shieldInformationBarrierSegmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSegmentByIdValidateBeforeCall(String shieldInformationBarrierSegmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shieldInformationBarrierSegmentId' is set
        if (shieldInformationBarrierSegmentId == null) {
            throw new ApiException("Missing the required parameter 'shieldInformationBarrierSegmentId' when calling deleteSegmentById(Async)");
        }

        return deleteSegmentByIdCall(shieldInformationBarrierSegmentId, _callback);

    }


    private ApiResponse<Void> deleteSegmentByIdWithHttpInfo(String shieldInformationBarrierSegmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteSegmentByIdValidateBeforeCall(shieldInformationBarrierSegmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSegmentByIdAsync(String shieldInformationBarrierSegmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSegmentByIdValidateBeforeCall(shieldInformationBarrierSegmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSegmentByIdRequestBuilder {
        private final String shieldInformationBarrierSegmentId;

        private DeleteSegmentByIdRequestBuilder(String shieldInformationBarrierSegmentId) {
            this.shieldInformationBarrierSegmentId = shieldInformationBarrierSegmentId;
        }

        /**
         * Build call for deleteSegmentById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty body in response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSegmentByIdCall(shieldInformationBarrierSegmentId, _callback);
        }


        /**
         * Execute deleteSegmentById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty body in response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSegmentByIdWithHttpInfo(shieldInformationBarrierSegmentId);
        }

        /**
         * Execute deleteSegmentById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty body in response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSegmentByIdWithHttpInfo(shieldInformationBarrierSegmentId);
        }

        /**
         * Execute deleteSegmentById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Empty body in response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSegmentByIdAsync(shieldInformationBarrierSegmentId, _callback);
        }
    }

    /**
     * Delete shield information barrier segment
     * Deletes the shield information barrier segment based on provided ID.
     * @param shieldInformationBarrierSegmentId The ID of the shield information barrier segment. (required)
     * @return DeleteSegmentByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty body in response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSegmentByIdRequestBuilder deleteSegmentById(String shieldInformationBarrierSegmentId) throws IllegalArgumentException {
        if (shieldInformationBarrierSegmentId == null) throw new IllegalArgumentException("\"shieldInformationBarrierSegmentId\" is required but got null");
            

        return new DeleteSegmentByIdRequestBuilder(shieldInformationBarrierSegmentId);
    }
    private okhttp3.Call getByIdCall(String shieldInformationBarrierSegmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shield_information_barrier_segments/{shield_information_barrier_segment_id}"
            .replace("{" + "shield_information_barrier_segment_id" + "}", localVarApiClient.escapeString(shieldInformationBarrierSegmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String shieldInformationBarrierSegmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shieldInformationBarrierSegmentId' is set
        if (shieldInformationBarrierSegmentId == null) {
            throw new ApiException("Missing the required parameter 'shieldInformationBarrierSegmentId' when calling getById(Async)");
        }

        return getByIdCall(shieldInformationBarrierSegmentId, _callback);

    }


    private ApiResponse<ShieldInformationBarrierSegment> getByIdWithHttpInfo(String shieldInformationBarrierSegmentId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(shieldInformationBarrierSegmentId, null);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierSegment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String shieldInformationBarrierSegmentId, final ApiCallback<ShieldInformationBarrierSegment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(shieldInformationBarrierSegmentId, _callback);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierSegment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String shieldInformationBarrierSegmentId;

        private GetByIdRequestBuilder(String shieldInformationBarrierSegmentId) {
            this.shieldInformationBarrierSegmentId = shieldInformationBarrierSegmentId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the shield information barrier segment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(shieldInformationBarrierSegmentId, _callback);
        }


        /**
         * Execute getById request
         * @return ShieldInformationBarrierSegment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the shield information barrier segment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ShieldInformationBarrierSegment execute() throws ApiException {
            ApiResponse<ShieldInformationBarrierSegment> localVarResp = getByIdWithHttpInfo(shieldInformationBarrierSegmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ShieldInformationBarrierSegment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the shield information barrier segment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShieldInformationBarrierSegment> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(shieldInformationBarrierSegmentId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the shield information barrier segment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShieldInformationBarrierSegment> _callback) throws ApiException {
            return getByIdAsync(shieldInformationBarrierSegmentId, _callback);
        }
    }

    /**
     * Get shield information barrier segment with specified ID
     * Retrieves shield information barrier segment based on provided ID..
     * @param shieldInformationBarrierSegmentId The ID of the shield information barrier segment. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the shield information barrier segment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String shieldInformationBarrierSegmentId) throws IllegalArgumentException {
        if (shieldInformationBarrierSegmentId == null) throw new IllegalArgumentException("\"shieldInformationBarrierSegmentId\" is required but got null");
            

        return new GetByIdRequestBuilder(shieldInformationBarrierSegmentId);
    }
    private okhttp3.Call listInformationObjectsCall(String shieldInformationBarrierId, String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shield_information_barrier_segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shieldInformationBarrierId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shield_information_barrier_id", shieldInformationBarrierId));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInformationObjectsValidateBeforeCall(String shieldInformationBarrierId, String marker, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shieldInformationBarrierId' is set
        if (shieldInformationBarrierId == null) {
            throw new ApiException("Missing the required parameter 'shieldInformationBarrierId' when calling listInformationObjects(Async)");
        }

        return listInformationObjectsCall(shieldInformationBarrierId, marker, limit, _callback);

    }


    private ApiResponse<ShieldInformationBarrierSegments> listInformationObjectsWithHttpInfo(String shieldInformationBarrierId, String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listInformationObjectsValidateBeforeCall(shieldInformationBarrierId, marker, limit, null);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierSegments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInformationObjectsAsync(String shieldInformationBarrierId, String marker, Long limit, final ApiCallback<ShieldInformationBarrierSegments> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInformationObjectsValidateBeforeCall(shieldInformationBarrierId, marker, limit, _callback);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierSegments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInformationObjectsRequestBuilder {
        private final String shieldInformationBarrierId;
        private String marker;
        private Long limit;

        private ListInformationObjectsRequestBuilder(String shieldInformationBarrierId) {
            this.shieldInformationBarrierId = shieldInformationBarrierId;
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListInformationObjectsRequestBuilder
         */
        public ListInformationObjectsRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListInformationObjectsRequestBuilder
         */
        public ListInformationObjectsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listInformationObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paginated list of shield information barrier segment objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInformationObjectsCall(shieldInformationBarrierId, marker, limit, _callback);
        }


        /**
         * Execute listInformationObjects request
         * @return ShieldInformationBarrierSegments
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paginated list of shield information barrier segment objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ShieldInformationBarrierSegments execute() throws ApiException {
            ApiResponse<ShieldInformationBarrierSegments> localVarResp = listInformationObjectsWithHttpInfo(shieldInformationBarrierId, marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInformationObjects request with HTTP info returned
         * @return ApiResponse&lt;ShieldInformationBarrierSegments&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paginated list of shield information barrier segment objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShieldInformationBarrierSegments> executeWithHttpInfo() throws ApiException {
            return listInformationObjectsWithHttpInfo(shieldInformationBarrierId, marker, limit);
        }

        /**
         * Execute listInformationObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paginated list of shield information barrier segment objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShieldInformationBarrierSegments> _callback) throws ApiException {
            return listInformationObjectsAsync(shieldInformationBarrierId, marker, limit, _callback);
        }
    }

    /**
     * List shield information barrier segments
     * Retrieves a list of shield information barrier segment objects for the specified Information Barrier ID.
     * @param shieldInformationBarrierId The ID of the shield information barrier. (required)
     * @return ListInformationObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of shield information barrier segment objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListInformationObjectsRequestBuilder listInformationObjects(String shieldInformationBarrierId) throws IllegalArgumentException {
        if (shieldInformationBarrierId == null) throw new IllegalArgumentException("\"shieldInformationBarrierId\" is required but got null");
            

        return new ListInformationObjectsRequestBuilder(shieldInformationBarrierId);
    }
    private okhttp3.Call updateByIdCall(String shieldInformationBarrierSegmentId, ShieldInformationBarrierSegmentsUpdateByIdRequest shieldInformationBarrierSegmentsUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shieldInformationBarrierSegmentsUpdateByIdRequest;

        // create path and map variables
        String localVarPath = "/shield_information_barrier_segments/{shield_information_barrier_segment_id}"
            .replace("{" + "shield_information_barrier_segment_id" + "}", localVarApiClient.escapeString(shieldInformationBarrierSegmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String shieldInformationBarrierSegmentId, ShieldInformationBarrierSegmentsUpdateByIdRequest shieldInformationBarrierSegmentsUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shieldInformationBarrierSegmentId' is set
        if (shieldInformationBarrierSegmentId == null) {
            throw new ApiException("Missing the required parameter 'shieldInformationBarrierSegmentId' when calling updateById(Async)");
        }

        return updateByIdCall(shieldInformationBarrierSegmentId, shieldInformationBarrierSegmentsUpdateByIdRequest, _callback);

    }


    private ApiResponse<ShieldInformationBarrierSegment> updateByIdWithHttpInfo(String shieldInformationBarrierSegmentId, ShieldInformationBarrierSegmentsUpdateByIdRequest shieldInformationBarrierSegmentsUpdateByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(shieldInformationBarrierSegmentId, shieldInformationBarrierSegmentsUpdateByIdRequest, null);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierSegment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(String shieldInformationBarrierSegmentId, ShieldInformationBarrierSegmentsUpdateByIdRequest shieldInformationBarrierSegmentsUpdateByIdRequest, final ApiCallback<ShieldInformationBarrierSegment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(shieldInformationBarrierSegmentId, shieldInformationBarrierSegmentsUpdateByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrierSegment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String shieldInformationBarrierSegmentId;
        private String description;
        private String name;

        private UpdateByIdRequestBuilder(String shieldInformationBarrierSegmentId) {
            this.shieldInformationBarrierSegmentId = shieldInformationBarrierSegmentId;
        }

        /**
         * Set description
         * @param description The updated description for the shield information barrier segment. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The updated name for the shield information barrier segment. (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated shield information barrier segment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShieldInformationBarrierSegmentsUpdateByIdRequest shieldInformationBarrierSegmentsUpdateByIdRequest = buildBodyParams();
            return updateByIdCall(shieldInformationBarrierSegmentId, shieldInformationBarrierSegmentsUpdateByIdRequest, _callback);
        }

        private ShieldInformationBarrierSegmentsUpdateByIdRequest buildBodyParams() {
            ShieldInformationBarrierSegmentsUpdateByIdRequest shieldInformationBarrierSegmentsUpdateByIdRequest = new ShieldInformationBarrierSegmentsUpdateByIdRequest();
            shieldInformationBarrierSegmentsUpdateByIdRequest.description(this.description);
            shieldInformationBarrierSegmentsUpdateByIdRequest.name(this.name);
            return shieldInformationBarrierSegmentsUpdateByIdRequest;
        }

        /**
         * Execute updateById request
         * @return ShieldInformationBarrierSegment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated shield information barrier segment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ShieldInformationBarrierSegment execute() throws ApiException {
            ShieldInformationBarrierSegmentsUpdateByIdRequest shieldInformationBarrierSegmentsUpdateByIdRequest = buildBodyParams();
            ApiResponse<ShieldInformationBarrierSegment> localVarResp = updateByIdWithHttpInfo(shieldInformationBarrierSegmentId, shieldInformationBarrierSegmentsUpdateByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;ShieldInformationBarrierSegment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated shield information barrier segment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShieldInformationBarrierSegment> executeWithHttpInfo() throws ApiException {
            ShieldInformationBarrierSegmentsUpdateByIdRequest shieldInformationBarrierSegmentsUpdateByIdRequest = buildBodyParams();
            return updateByIdWithHttpInfo(shieldInformationBarrierSegmentId, shieldInformationBarrierSegmentsUpdateByIdRequest);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated shield information barrier segment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShieldInformationBarrierSegment> _callback) throws ApiException {
            ShieldInformationBarrierSegmentsUpdateByIdRequest shieldInformationBarrierSegmentsUpdateByIdRequest = buildBodyParams();
            return updateByIdAsync(shieldInformationBarrierSegmentId, shieldInformationBarrierSegmentsUpdateByIdRequest, _callback);
        }
    }

    /**
     * Update shield information barrier segment with specified ID
     * Updates the shield information barrier segment based on provided ID..
     * @param shieldInformationBarrierSegmentId The ID of the shield information barrier segment. (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated shield information barrier segment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String shieldInformationBarrierSegmentId) throws IllegalArgumentException {
        if (shieldInformationBarrierSegmentId == null) throw new IllegalArgumentException("\"shieldInformationBarrierSegmentId\" is required but got null");
            

        return new UpdateByIdRequestBuilder(shieldInformationBarrierSegmentId);
    }
}
