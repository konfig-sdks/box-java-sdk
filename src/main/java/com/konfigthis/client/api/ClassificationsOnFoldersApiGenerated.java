/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Classification;
import com.konfigthis.client.model.ClassificationsOnFoldersAddClassificationToFolderRequest;
import com.konfigthis.client.model.ClassificationsOnFoldersUpdateClassificationRequestInner;
import com.konfigthis.client.model.ClientError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ClassificationsOnFoldersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClassificationsOnFoldersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ClassificationsOnFoldersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addClassificationToFolderCall(String folderId, ClassificationsOnFoldersAddClassificationToFolderRequest classificationsOnFoldersAddClassificationToFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = classificationsOnFoldersAddClassificationToFolderRequest;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/metadata/enterprise/securityClassification-6VMVochwUWo"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addClassificationToFolderValidateBeforeCall(String folderId, ClassificationsOnFoldersAddClassificationToFolderRequest classificationsOnFoldersAddClassificationToFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling addClassificationToFolder(Async)");
        }

        return addClassificationToFolderCall(folderId, classificationsOnFoldersAddClassificationToFolderRequest, _callback);

    }


    private ApiResponse<Classification> addClassificationToFolderWithHttpInfo(String folderId, ClassificationsOnFoldersAddClassificationToFolderRequest classificationsOnFoldersAddClassificationToFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = addClassificationToFolderValidateBeforeCall(folderId, classificationsOnFoldersAddClassificationToFolderRequest, null);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addClassificationToFolderAsync(String folderId, ClassificationsOnFoldersAddClassificationToFolderRequest classificationsOnFoldersAddClassificationToFolderRequest, final ApiCallback<Classification> _callback) throws ApiException {

        okhttp3.Call localVarCall = addClassificationToFolderValidateBeforeCall(folderId, classificationsOnFoldersAddClassificationToFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddClassificationToFolderRequestBuilder {
        private final String folderId;
        private String boxSecurityClassificationKey;

        private AddClassificationToFolderRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Set boxSecurityClassificationKey
         * @param boxSecurityClassificationKey The name of the classification to apply to this folder.  To list the available classifications in an enterprise, use the classification API to retrieve the [classification template](e://get_metadata_templates_enterprise_securityClassification-6VMVochwUWo_schema) which lists all available classification keys. (optional)
         * @return AddClassificationToFolderRequestBuilder
         */
        public AddClassificationToFolderRequestBuilder boxSecurityClassificationKey(String boxSecurityClassificationKey) {
            this.boxSecurityClassificationKey = boxSecurityClassificationKey;
            return this;
        }
        
        /**
         * Build call for addClassificationToFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the classification template instance that was applied to the folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ClassificationsOnFoldersAddClassificationToFolderRequest classificationsOnFoldersAddClassificationToFolderRequest = buildBodyParams();
            return addClassificationToFolderCall(folderId, classificationsOnFoldersAddClassificationToFolderRequest, _callback);
        }

        private ClassificationsOnFoldersAddClassificationToFolderRequest buildBodyParams() {
            ClassificationsOnFoldersAddClassificationToFolderRequest classificationsOnFoldersAddClassificationToFolderRequest = new ClassificationsOnFoldersAddClassificationToFolderRequest();
            classificationsOnFoldersAddClassificationToFolderRequest.boxSecurityClassificationKey(this.boxSecurityClassificationKey);
            return classificationsOnFoldersAddClassificationToFolderRequest;
        }

        /**
         * Execute addClassificationToFolder request
         * @return Classification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the classification template instance that was applied to the folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Classification execute() throws ApiException {
            ClassificationsOnFoldersAddClassificationToFolderRequest classificationsOnFoldersAddClassificationToFolderRequest = buildBodyParams();
            ApiResponse<Classification> localVarResp = addClassificationToFolderWithHttpInfo(folderId, classificationsOnFoldersAddClassificationToFolderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addClassificationToFolder request with HTTP info returned
         * @return ApiResponse&lt;Classification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the classification template instance that was applied to the folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Classification> executeWithHttpInfo() throws ApiException {
            ClassificationsOnFoldersAddClassificationToFolderRequest classificationsOnFoldersAddClassificationToFolderRequest = buildBodyParams();
            return addClassificationToFolderWithHttpInfo(folderId, classificationsOnFoldersAddClassificationToFolderRequest);
        }

        /**
         * Execute addClassificationToFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the classification template instance that was applied to the folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Classification> _callback) throws ApiException {
            ClassificationsOnFoldersAddClassificationToFolderRequest classificationsOnFoldersAddClassificationToFolderRequest = buildBodyParams();
            return addClassificationToFolderAsync(folderId, classificationsOnFoldersAddClassificationToFolderRequest, _callback);
        }
    }

    /**
     * Add classification to folder
     * Adds a classification to a folder by specifying the label of the classification to add.  This API can also be called by including the enterprise ID in the URL explicitly, for example &#x60;/folders/:id//enterprise_12345/securityClassification-6VMVochwUWo&#x60;.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return AddClassificationToFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the classification template instance that was applied to the folder. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public AddClassificationToFolderRequestBuilder addClassificationToFolder(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new AddClassificationToFolderRequestBuilder(folderId);
    }
    private okhttp3.Call getClassificationMetadataCall(String folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/metadata/enterprise/securityClassification-6VMVochwUWo"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassificationMetadataValidateBeforeCall(String folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getClassificationMetadata(Async)");
        }

        return getClassificationMetadataCall(folderId, _callback);

    }


    private ApiResponse<Classification> getClassificationMetadataWithHttpInfo(String folderId) throws ApiException {
        okhttp3.Call localVarCall = getClassificationMetadataValidateBeforeCall(folderId, null);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClassificationMetadataAsync(String folderId, final ApiCallback<Classification> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassificationMetadataValidateBeforeCall(folderId, _callback);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClassificationMetadataRequestBuilder {
        private final String folderId;

        private GetClassificationMetadataRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Build call for getClassificationMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns an instance of the &#x60;securityClassification&#x60; metadata template, which contains a &#x60;Box__Security__Classification__Key&#x60; field that lists all the classifications available to this enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClassificationMetadataCall(folderId, _callback);
        }


        /**
         * Execute getClassificationMetadata request
         * @return Classification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns an instance of the &#x60;securityClassification&#x60; metadata template, which contains a &#x60;Box__Security__Classification__Key&#x60; field that lists all the classifications available to this enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Classification execute() throws ApiException {
            ApiResponse<Classification> localVarResp = getClassificationMetadataWithHttpInfo(folderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClassificationMetadata request with HTTP info returned
         * @return ApiResponse&lt;Classification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns an instance of the &#x60;securityClassification&#x60; metadata template, which contains a &#x60;Box__Security__Classification__Key&#x60; field that lists all the classifications available to this enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Classification> executeWithHttpInfo() throws ApiException {
            return getClassificationMetadataWithHttpInfo(folderId);
        }

        /**
         * Execute getClassificationMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns an instance of the &#x60;securityClassification&#x60; metadata template, which contains a &#x60;Box__Security__Classification__Key&#x60; field that lists all the classifications available to this enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Classification> _callback) throws ApiException {
            return getClassificationMetadataAsync(folderId, _callback);
        }
    }

    /**
     * Get classification on folder
     * Retrieves the classification metadata instance that has been applied to a folder.  This API can also be called by including the enterprise ID in the URL explicitly, for example &#x60;/folders/:id//enterprise_12345/securityClassification-6VMVochwUWo&#x60;.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return GetClassificationMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns an instance of the &#x60;securityClassification&#x60; metadata template, which contains a &#x60;Box__Security__Classification__Key&#x60; field that lists all the classifications available to this enterprise. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetClassificationMetadataRequestBuilder getClassificationMetadata(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new GetClassificationMetadataRequestBuilder(folderId);
    }
    private okhttp3.Call removeFromFolderCall(String folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/metadata/enterprise/securityClassification-6VMVochwUWo"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromFolderValidateBeforeCall(String folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling removeFromFolder(Async)");
        }

        return removeFromFolderCall(folderId, _callback);

    }


    private ApiResponse<Void> removeFromFolderWithHttpInfo(String folderId) throws ApiException {
        okhttp3.Call localVarCall = removeFromFolderValidateBeforeCall(folderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromFolderAsync(String folderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromFolderValidateBeforeCall(folderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromFolderRequestBuilder {
        private final String folderId;

        private RemoveFromFolderRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Build call for removeFromFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the classification is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromFolderCall(folderId, _callback);
        }


        /**
         * Execute removeFromFolder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the classification is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromFolderWithHttpInfo(folderId);
        }

        /**
         * Execute removeFromFolder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the classification is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromFolderWithHttpInfo(folderId);
        }

        /**
         * Execute removeFromFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the classification is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromFolderAsync(folderId, _callback);
        }
    }

    /**
     * Remove classification from folder
     * Removes any classifications from a folder.  This API can also be called by including the enterprise ID in the URL explicitly, for example &#x60;/folders/:id//enterprise_12345/securityClassification-6VMVochwUWo&#x60;.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return RemoveFromFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the classification is successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromFolderRequestBuilder removeFromFolder(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new RemoveFromFolderRequestBuilder(folderId);
    }
    private okhttp3.Call updateClassificationCall(String folderId, List<ClassificationsOnFoldersUpdateClassificationRequestInner> classificationsOnFoldersUpdateClassificationRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = classificationsOnFoldersUpdateClassificationRequestInner;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/metadata/enterprise/securityClassification-6VMVochwUWo"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClassificationValidateBeforeCall(String folderId, List<ClassificationsOnFoldersUpdateClassificationRequestInner> classificationsOnFoldersUpdateClassificationRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling updateClassification(Async)");
        }

        return updateClassificationCall(folderId, classificationsOnFoldersUpdateClassificationRequestInner, _callback);

    }


    private ApiResponse<Classification> updateClassificationWithHttpInfo(String folderId, List<ClassificationsOnFoldersUpdateClassificationRequestInner> classificationsOnFoldersUpdateClassificationRequestInner) throws ApiException {
        okhttp3.Call localVarCall = updateClassificationValidateBeforeCall(folderId, classificationsOnFoldersUpdateClassificationRequestInner, null);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateClassificationAsync(String folderId, List<ClassificationsOnFoldersUpdateClassificationRequestInner> classificationsOnFoldersUpdateClassificationRequestInner, final ApiCallback<Classification> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClassificationValidateBeforeCall(folderId, classificationsOnFoldersUpdateClassificationRequestInner, _callback);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateClassificationRequestBuilder {
        private final String folderId;
        private List<ClassificationsOnFoldersUpdateClassificationRequestInner> classificationsOnFoldersUpdateClassificationRequestInner;

        private UpdateClassificationRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Set classificationsOnFoldersUpdateClassificationRequestInner
         * @param classificationsOnFoldersUpdateClassificationRequestInner  (optional)
         * @return UpdateClassificationRequestBuilder
         */
        public UpdateClassificationRequestBuilder classificationsOnFoldersUpdateClassificationRequestInner(List<ClassificationsOnFoldersUpdateClassificationRequestInner> classificationsOnFoldersUpdateClassificationRequestInner) {
            this.classificationsOnFoldersUpdateClassificationRequestInner = classificationsOnFoldersUpdateClassificationRequestInner;
            return this;
        }

        /**
         * Build call for updateClassification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated classification metadata template instance. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<ClassificationsOnFoldersUpdateClassificationRequestInner> classificationsOnFoldersUpdateClassificationRequestInner = buildBodyParams();
            return updateClassificationCall(folderId, classificationsOnFoldersUpdateClassificationRequestInner, _callback);
        }

        private List<ClassificationsOnFoldersUpdateClassificationRequestInner> buildBodyParams() {
            return this.classificationsOnFoldersUpdateClassificationRequestInner;
        }

        /**
         * Execute updateClassification request
         * @return Classification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated classification metadata template instance. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Classification execute() throws ApiException {
            List<ClassificationsOnFoldersUpdateClassificationRequestInner> classificationsOnFoldersUpdateClassificationRequestInner = buildBodyParams();
            ApiResponse<Classification> localVarResp = updateClassificationWithHttpInfo(folderId, classificationsOnFoldersUpdateClassificationRequestInner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateClassification request with HTTP info returned
         * @return ApiResponse&lt;Classification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated classification metadata template instance. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Classification> executeWithHttpInfo() throws ApiException {
            List<ClassificationsOnFoldersUpdateClassificationRequestInner> classificationsOnFoldersUpdateClassificationRequestInner = buildBodyParams();
            return updateClassificationWithHttpInfo(folderId, classificationsOnFoldersUpdateClassificationRequestInner);
        }

        /**
         * Execute updateClassification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated classification metadata template instance. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Classification> _callback) throws ApiException {
            List<ClassificationsOnFoldersUpdateClassificationRequestInner> classificationsOnFoldersUpdateClassificationRequestInner = buildBodyParams();
            return updateClassificationAsync(folderId, classificationsOnFoldersUpdateClassificationRequestInner, _callback);
        }
    }

    /**
     * Update classification on folder
     * Updates a classification on a folder.  The classification can only be updated if a classification has already been applied to the folder before. When editing classifications, only values are defined for the enterprise will be accepted.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return UpdateClassificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated classification metadata template instance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateClassificationRequestBuilder updateClassification(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new UpdateClassificationRequestBuilder(folderId);
    }
}
