/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.EnterpriseBase;
import com.konfigthis.client.model.ShieldInformationBarrier;
import com.konfigthis.client.model.ShieldInformationBarriers;
import com.konfigthis.client.model.ShieldInformationBarriersAddChangedStatusRequest;
import com.konfigthis.client.model.ShieldInformationBarriersCreateBarrierRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShieldInformationBarriersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShieldInformationBarriersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ShieldInformationBarriersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addChangedStatusCall(ShieldInformationBarriersAddChangedStatusRequest shieldInformationBarriersAddChangedStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shieldInformationBarriersAddChangedStatusRequest;

        // create path and map variables
        String localVarPath = "/shield_information_barriers/change_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChangedStatusValidateBeforeCall(ShieldInformationBarriersAddChangedStatusRequest shieldInformationBarriersAddChangedStatusRequest, final ApiCallback _callback) throws ApiException {
        return addChangedStatusCall(shieldInformationBarriersAddChangedStatusRequest, _callback);

    }


    private ApiResponse<ShieldInformationBarrier> addChangedStatusWithHttpInfo(ShieldInformationBarriersAddChangedStatusRequest shieldInformationBarriersAddChangedStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = addChangedStatusValidateBeforeCall(shieldInformationBarriersAddChangedStatusRequest, null);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addChangedStatusAsync(ShieldInformationBarriersAddChangedStatusRequest shieldInformationBarriersAddChangedStatusRequest, final ApiCallback<ShieldInformationBarrier> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChangedStatusValidateBeforeCall(shieldInformationBarriersAddChangedStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddChangedStatusRequestBuilder {
        private final String id;
        private final String status;

        private AddChangedStatusRequestBuilder(String id, String status) {
            this.id = id;
            this.status = status;
        }

        /**
         * Build call for addChangedStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated shield information barrier object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShieldInformationBarriersAddChangedStatusRequest shieldInformationBarriersAddChangedStatusRequest = buildBodyParams();
            return addChangedStatusCall(shieldInformationBarriersAddChangedStatusRequest, _callback);
        }

        private ShieldInformationBarriersAddChangedStatusRequest buildBodyParams() {
            ShieldInformationBarriersAddChangedStatusRequest shieldInformationBarriersAddChangedStatusRequest = new ShieldInformationBarriersAddChangedStatusRequest();
            shieldInformationBarriersAddChangedStatusRequest.id(this.id);
            if (this.status != null)
            shieldInformationBarriersAddChangedStatusRequest.status(ShieldInformationBarriersAddChangedStatusRequest.StatusEnum.fromValue(this.status));
            return shieldInformationBarriersAddChangedStatusRequest;
        }

        /**
         * Execute addChangedStatus request
         * @return ShieldInformationBarrier
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated shield information barrier object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ShieldInformationBarrier execute() throws ApiException {
            ShieldInformationBarriersAddChangedStatusRequest shieldInformationBarriersAddChangedStatusRequest = buildBodyParams();
            ApiResponse<ShieldInformationBarrier> localVarResp = addChangedStatusWithHttpInfo(shieldInformationBarriersAddChangedStatusRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addChangedStatus request with HTTP info returned
         * @return ApiResponse&lt;ShieldInformationBarrier&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated shield information barrier object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShieldInformationBarrier> executeWithHttpInfo() throws ApiException {
            ShieldInformationBarriersAddChangedStatusRequest shieldInformationBarriersAddChangedStatusRequest = buildBodyParams();
            return addChangedStatusWithHttpInfo(shieldInformationBarriersAddChangedStatusRequest);
        }

        /**
         * Execute addChangedStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated shield information barrier object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShieldInformationBarrier> _callback) throws ApiException {
            ShieldInformationBarriersAddChangedStatusRequest shieldInformationBarriersAddChangedStatusRequest = buildBodyParams();
            return addChangedStatusAsync(shieldInformationBarriersAddChangedStatusRequest, _callback);
        }
    }

    /**
     * Add changed status of shield information barrier with specified ID
     * Change status of shield information barrier with the specified ID.
     * @return AddChangedStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated shield information barrier object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public AddChangedStatusRequestBuilder addChangedStatus(String id, String status) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new AddChangedStatusRequestBuilder(id, status);
    }
    private okhttp3.Call createBarrierCall(ShieldInformationBarriersCreateBarrierRequest shieldInformationBarriersCreateBarrierRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shieldInformationBarriersCreateBarrierRequest;

        // create path and map variables
        String localVarPath = "/shield_information_barriers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBarrierValidateBeforeCall(ShieldInformationBarriersCreateBarrierRequest shieldInformationBarriersCreateBarrierRequest, final ApiCallback _callback) throws ApiException {
        return createBarrierCall(shieldInformationBarriersCreateBarrierRequest, _callback);

    }


    private ApiResponse<ShieldInformationBarrier> createBarrierWithHttpInfo(ShieldInformationBarriersCreateBarrierRequest shieldInformationBarriersCreateBarrierRequest) throws ApiException {
        okhttp3.Call localVarCall = createBarrierValidateBeforeCall(shieldInformationBarriersCreateBarrierRequest, null);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBarrierAsync(ShieldInformationBarriersCreateBarrierRequest shieldInformationBarriersCreateBarrierRequest, final ApiCallback<ShieldInformationBarrier> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBarrierValidateBeforeCall(shieldInformationBarriersCreateBarrierRequest, _callback);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBarrierRequestBuilder {
        private final EnterpriseBase enterprise;

        private CreateBarrierRequestBuilder(EnterpriseBase enterprise) {
            this.enterprise = enterprise;
        }

        /**
         * Build call for createBarrier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new shield information barrier object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShieldInformationBarriersCreateBarrierRequest shieldInformationBarriersCreateBarrierRequest = buildBodyParams();
            return createBarrierCall(shieldInformationBarriersCreateBarrierRequest, _callback);
        }

        private ShieldInformationBarriersCreateBarrierRequest buildBodyParams() {
            ShieldInformationBarriersCreateBarrierRequest shieldInformationBarriersCreateBarrierRequest = new ShieldInformationBarriersCreateBarrierRequest();
            shieldInformationBarriersCreateBarrierRequest.enterprise(this.enterprise);
            return shieldInformationBarriersCreateBarrierRequest;
        }

        /**
         * Execute createBarrier request
         * @return ShieldInformationBarrier
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new shield information barrier object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ShieldInformationBarrier execute() throws ApiException {
            ShieldInformationBarriersCreateBarrierRequest shieldInformationBarriersCreateBarrierRequest = buildBodyParams();
            ApiResponse<ShieldInformationBarrier> localVarResp = createBarrierWithHttpInfo(shieldInformationBarriersCreateBarrierRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBarrier request with HTTP info returned
         * @return ApiResponse&lt;ShieldInformationBarrier&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new shield information barrier object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShieldInformationBarrier> executeWithHttpInfo() throws ApiException {
            ShieldInformationBarriersCreateBarrierRequest shieldInformationBarriersCreateBarrierRequest = buildBodyParams();
            return createBarrierWithHttpInfo(shieldInformationBarriersCreateBarrierRequest);
        }

        /**
         * Execute createBarrier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new shield information barrier object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShieldInformationBarrier> _callback) throws ApiException {
            ShieldInformationBarriersCreateBarrierRequest shieldInformationBarriersCreateBarrierRequest = buildBodyParams();
            return createBarrierAsync(shieldInformationBarriersCreateBarrierRequest, _callback);
        }
    }

    /**
     * Create shield information barrier
     * Creates a shield information barrier to separate individuals/groups within the same firm and prevents confidential information passing between them.
     * @return CreateBarrierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new shield information barrier object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateBarrierRequestBuilder createBarrier(EnterpriseBase enterprise) throws IllegalArgumentException {
        if (enterprise == null) throw new IllegalArgumentException("\"enterprise\" is required but got null");
        return new CreateBarrierRequestBuilder(enterprise);
    }
    private okhttp3.Call getByIdCall(String shieldInformationBarrierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shield_information_barriers/{shield_information_barrier_id}"
            .replace("{" + "shield_information_barrier_id" + "}", localVarApiClient.escapeString(shieldInformationBarrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String shieldInformationBarrierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shieldInformationBarrierId' is set
        if (shieldInformationBarrierId == null) {
            throw new ApiException("Missing the required parameter 'shieldInformationBarrierId' when calling getById(Async)");
        }

        return getByIdCall(shieldInformationBarrierId, _callback);

    }


    private ApiResponse<ShieldInformationBarrier> getByIdWithHttpInfo(String shieldInformationBarrierId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(shieldInformationBarrierId, null);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String shieldInformationBarrierId, final ApiCallback<ShieldInformationBarrier> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(shieldInformationBarrierId, _callback);
        Type localVarReturnType = new TypeToken<ShieldInformationBarrier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String shieldInformationBarrierId;

        private GetByIdRequestBuilder(String shieldInformationBarrierId) {
            this.shieldInformationBarrierId = shieldInformationBarrierId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the shield information barrier object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(shieldInformationBarrierId, _callback);
        }


        /**
         * Execute getById request
         * @return ShieldInformationBarrier
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the shield information barrier object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ShieldInformationBarrier execute() throws ApiException {
            ApiResponse<ShieldInformationBarrier> localVarResp = getByIdWithHttpInfo(shieldInformationBarrierId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ShieldInformationBarrier&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the shield information barrier object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShieldInformationBarrier> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(shieldInformationBarrierId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the shield information barrier object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShieldInformationBarrier> _callback) throws ApiException {
            return getByIdAsync(shieldInformationBarrierId, _callback);
        }
    }

    /**
     * Get shield information barrier with specified ID
     * Get shield information barrier based on provided ID.
     * @param shieldInformationBarrierId The ID of the shield information barrier. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the shield information barrier object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String shieldInformationBarrierId) throws IllegalArgumentException {
        if (shieldInformationBarrierId == null) throw new IllegalArgumentException("\"shieldInformationBarrierId\" is required but got null");
            

        return new GetByIdRequestBuilder(shieldInformationBarrierId);
    }
    private okhttp3.Call listInformationObjectsCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shield_information_barriers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInformationObjectsValidateBeforeCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        return listInformationObjectsCall(marker, limit, _callback);

    }


    private ApiResponse<ShieldInformationBarriers> listInformationObjectsWithHttpInfo(String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listInformationObjectsValidateBeforeCall(marker, limit, null);
        Type localVarReturnType = new TypeToken<ShieldInformationBarriers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInformationObjectsAsync(String marker, Long limit, final ApiCallback<ShieldInformationBarriers> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInformationObjectsValidateBeforeCall(marker, limit, _callback);
        Type localVarReturnType = new TypeToken<ShieldInformationBarriers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInformationObjectsRequestBuilder {
        private String marker;
        private Long limit;

        private ListInformationObjectsRequestBuilder() {
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination. (optional)
         * @return ListInformationObjectsRequestBuilder
         */
        public ListInformationObjectsRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListInformationObjectsRequestBuilder
         */
        public ListInformationObjectsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listInformationObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paginated list of shield information barrier objects, empty list if currently no barrier. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInformationObjectsCall(marker, limit, _callback);
        }


        /**
         * Execute listInformationObjects request
         * @return ShieldInformationBarriers
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paginated list of shield information barrier objects, empty list if currently no barrier. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ShieldInformationBarriers execute() throws ApiException {
            ApiResponse<ShieldInformationBarriers> localVarResp = listInformationObjectsWithHttpInfo(marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInformationObjects request with HTTP info returned
         * @return ApiResponse&lt;ShieldInformationBarriers&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paginated list of shield information barrier objects, empty list if currently no barrier. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShieldInformationBarriers> executeWithHttpInfo() throws ApiException {
            return listInformationObjectsWithHttpInfo(marker, limit);
        }

        /**
         * Execute listInformationObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paginated list of shield information barrier objects, empty list if currently no barrier. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShieldInformationBarriers> _callback) throws ApiException {
            return listInformationObjectsAsync(marker, limit, _callback);
        }
    }

    /**
     * List shield information barriers
     * Retrieves a list of shield information barrier objects for the enterprise of JWT.
     * @return ListInformationObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of shield information barrier objects, empty list if currently no barrier. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListInformationObjectsRequestBuilder listInformationObjects() throws IllegalArgumentException {
        return new ListInformationObjectsRequestBuilder();
    }
}
