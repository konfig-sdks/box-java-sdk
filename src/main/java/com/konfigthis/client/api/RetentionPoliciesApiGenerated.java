/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.RetentionPolicies;
import com.konfigthis.client.model.RetentionPoliciesCreatePolicyRequest;
import com.konfigthis.client.model.RetentionPoliciesUpdatePolicyRequest;
import com.konfigthis.client.model.RetentionPolicy;
import com.konfigthis.client.model.UserBase;
import com.konfigthis.client.model.UserMini;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RetentionPoliciesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RetentionPoliciesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RetentionPoliciesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPolicyCall(RetentionPoliciesCreatePolicyRequest retentionPoliciesCreatePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = retentionPoliciesCreatePolicyRequest;

        // create path and map variables
        String localVarPath = "/retention_policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyValidateBeforeCall(RetentionPoliciesCreatePolicyRequest retentionPoliciesCreatePolicyRequest, final ApiCallback _callback) throws ApiException {
        return createPolicyCall(retentionPoliciesCreatePolicyRequest, _callback);

    }


    private ApiResponse<RetentionPolicy> createPolicyWithHttpInfo(RetentionPoliciesCreatePolicyRequest retentionPoliciesCreatePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(retentionPoliciesCreatePolicyRequest, null);
        Type localVarReturnType = new TypeToken<RetentionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPolicyAsync(RetentionPoliciesCreatePolicyRequest retentionPoliciesCreatePolicyRequest, final ApiCallback<RetentionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(retentionPoliciesCreatePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<RetentionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePolicyRequestBuilder {
        private final String policyName;
        private final String policyType;
        private final String dispositionAction;
        private String description;
        private Object retentionLength;
        private String retentionType;
        private Boolean canOwnerExtendRetention;
        private Boolean areOwnersNotified;
        private List<UserMini> customNotificationRecipients;

        private CreatePolicyRequestBuilder(String policyName, String policyType, String dispositionAction) {
            this.policyName = policyName;
            this.policyType = policyType;
            this.dispositionAction = dispositionAction;
        }

        /**
         * Set description
         * @param description The additional text description of the retention policy. (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set retentionLength
         * @param retentionLength  (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder retentionLength(Object retentionLength) {
            this.retentionLength = retentionLength;
            return this;
        }
        
        /**
         * Set retentionType
         * @param retentionType Specifies the retention type:  * &#x60;modifiable&#x60;: You can modify the retention policy. For example, you can add or remove folders, shorten or lengthen the policy duration, or delete the assignment. Use this type if your retention policy is not related to any regulatory purposes.  * &#x60;non_modifiable&#x60;: You can modify the retention policy only in a limited way: add a folder, lengthen the duration, retire the policy, change the disposition action or notification settings. You cannot perform other actions, such as deleting the assignment or shortening the policy duration. Use this type to ensure compliance with regulatory retention policies. (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder retentionType(String retentionType) {
            this.retentionType = retentionType;
            return this;
        }
        
        /**
         * Set canOwnerExtendRetention
         * @param canOwnerExtendRetention Whether the owner of a file will be allowed to extend the retention. (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder canOwnerExtendRetention(Boolean canOwnerExtendRetention) {
            this.canOwnerExtendRetention = canOwnerExtendRetention;
            return this;
        }
        
        /**
         * Set areOwnersNotified
         * @param areOwnersNotified Whether owner and co-owners of a file are notified when the policy nears expiration. (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder areOwnersNotified(Boolean areOwnersNotified) {
            this.areOwnersNotified = areOwnersNotified;
            return this;
        }
        
        /**
         * Set customNotificationRecipients
         * @param customNotificationRecipients A list of users notified when the retention policy duration is about to end. (optional)
         * @return CreatePolicyRequestBuilder
         */
        public CreatePolicyRequestBuilder customNotificationRecipients(List<UserMini> customNotificationRecipients) {
            this.customNotificationRecipients = customNotificationRecipients;
            return this;
        }
        
        /**
         * Build call for createPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new retention policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RetentionPoliciesCreatePolicyRequest retentionPoliciesCreatePolicyRequest = buildBodyParams();
            return createPolicyCall(retentionPoliciesCreatePolicyRequest, _callback);
        }

        private RetentionPoliciesCreatePolicyRequest buildBodyParams() {
            RetentionPoliciesCreatePolicyRequest retentionPoliciesCreatePolicyRequest = new RetentionPoliciesCreatePolicyRequest();
            retentionPoliciesCreatePolicyRequest.description(this.description);
            retentionPoliciesCreatePolicyRequest.policyName(this.policyName);
            if (this.policyType != null)
            retentionPoliciesCreatePolicyRequest.policyType(RetentionPoliciesCreatePolicyRequest.PolicyTypeEnum.fromValue(this.policyType));
            if (this.dispositionAction != null)
            retentionPoliciesCreatePolicyRequest.dispositionAction(RetentionPoliciesCreatePolicyRequest.DispositionActionEnum.fromValue(this.dispositionAction));
            retentionPoliciesCreatePolicyRequest.retentionLength(this.retentionLength);
            if (this.retentionType != null)
            retentionPoliciesCreatePolicyRequest.retentionType(RetentionPoliciesCreatePolicyRequest.RetentionTypeEnum.fromValue(this.retentionType));
            if (this.canOwnerExtendRetention != null)
            retentionPoliciesCreatePolicyRequest.canOwnerExtendRetention(RetentionPoliciesCreatePolicyRequest.CanOwnerExtendRetentionEnum.fromValue(this.canOwnerExtendRetention));
            if (this.areOwnersNotified != null)
            retentionPoliciesCreatePolicyRequest.areOwnersNotified(RetentionPoliciesCreatePolicyRequest.AreOwnersNotifiedEnum.fromValue(this.areOwnersNotified));
            retentionPoliciesCreatePolicyRequest.customNotificationRecipients(this.customNotificationRecipients);
            return retentionPoliciesCreatePolicyRequest;
        }

        /**
         * Execute createPolicy request
         * @return RetentionPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new retention policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public RetentionPolicy execute() throws ApiException {
            RetentionPoliciesCreatePolicyRequest retentionPoliciesCreatePolicyRequest = buildBodyParams();
            ApiResponse<RetentionPolicy> localVarResp = createPolicyWithHttpInfo(retentionPoliciesCreatePolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPolicy request with HTTP info returned
         * @return ApiResponse&lt;RetentionPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new retention policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RetentionPolicy> executeWithHttpInfo() throws ApiException {
            RetentionPoliciesCreatePolicyRequest retentionPoliciesCreatePolicyRequest = buildBodyParams();
            return createPolicyWithHttpInfo(retentionPoliciesCreatePolicyRequest);
        }

        /**
         * Execute createPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new retention policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RetentionPolicy> _callback) throws ApiException {
            RetentionPoliciesCreatePolicyRequest retentionPoliciesCreatePolicyRequest = buildBodyParams();
            return createPolicyAsync(retentionPoliciesCreatePolicyRequest, _callback);
        }
    }

    /**
     * Create retention policy
     * Creates a retention policy.
     * @return CreatePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new retention policy object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePolicyRequestBuilder createPolicy(String policyName, String policyType, String dispositionAction) throws IllegalArgumentException {
        if (policyName == null) throw new IllegalArgumentException("\"policyName\" is required but got null");
            

        if (policyType == null) throw new IllegalArgumentException("\"policyType\" is required but got null");
            

        if (dispositionAction == null) throw new IllegalArgumentException("\"dispositionAction\" is required but got null");
            

        return new CreatePolicyRequestBuilder(policyName, policyType, dispositionAction);
    }
    private okhttp3.Call deletePolicyCall(String retentionPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retention_policies/{retention_policy_id}"
            .replace("{" + "retention_policy_id" + "}", localVarApiClient.escapeString(retentionPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyValidateBeforeCall(String retentionPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retentionPolicyId' is set
        if (retentionPolicyId == null) {
            throw new ApiException("Missing the required parameter 'retentionPolicyId' when calling deletePolicy(Async)");
        }

        return deletePolicyCall(retentionPolicyId, _callback);

    }


    private ApiResponse<Void> deletePolicyWithHttpInfo(String retentionPolicyId) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(retentionPolicyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePolicyAsync(String retentionPolicyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(retentionPolicyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePolicyRequestBuilder {
        private final String retentionPolicyId;

        private DeletePolicyRequestBuilder(String retentionPolicyId) {
            this.retentionPolicyId = retentionPolicyId;
        }

        /**
         * Build call for deletePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the policy has been deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePolicyCall(retentionPolicyId, _callback);
        }


        /**
         * Execute deletePolicy request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the policy has been deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePolicyWithHttpInfo(retentionPolicyId);
        }

        /**
         * Execute deletePolicy request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the policy has been deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePolicyWithHttpInfo(retentionPolicyId);
        }

        /**
         * Execute deletePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the policy has been deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePolicyAsync(retentionPolicyId, _callback);
        }
    }

    /**
     * Delete retention policy
     * Permanently deletes a retention policy.
     * @param retentionPolicyId The ID of the retention policy. (required)
     * @return DeletePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the policy has been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePolicyRequestBuilder deletePolicy(String retentionPolicyId) throws IllegalArgumentException {
        if (retentionPolicyId == null) throw new IllegalArgumentException("\"retentionPolicyId\" is required but got null");
            

        return new DeletePolicyRequestBuilder(retentionPolicyId);
    }
    private okhttp3.Call getPolicyCall(String retentionPolicyId, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retention_policies/{retention_policy_id}"
            .replace("{" + "retention_policy_id" + "}", localVarApiClient.escapeString(retentionPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyValidateBeforeCall(String retentionPolicyId, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retentionPolicyId' is set
        if (retentionPolicyId == null) {
            throw new ApiException("Missing the required parameter 'retentionPolicyId' when calling getPolicy(Async)");
        }

        return getPolicyCall(retentionPolicyId, fields, _callback);

    }


    private ApiResponse<RetentionPolicy> getPolicyWithHttpInfo(String retentionPolicyId, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(retentionPolicyId, fields, null);
        Type localVarReturnType = new TypeToken<RetentionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyAsync(String retentionPolicyId, List<String> fields, final ApiCallback<RetentionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(retentionPolicyId, fields, _callback);
        Type localVarReturnType = new TypeToken<RetentionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPolicyRequestBuilder {
        private final String retentionPolicyId;
        private List<String> fields;

        private GetPolicyRequestBuilder(String retentionPolicyId) {
            this.retentionPolicyId = retentionPolicyId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return GetPolicyRequestBuilder
         */
        public GetPolicyRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the retention policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyCall(retentionPolicyId, fields, _callback);
        }


        /**
         * Execute getPolicy request
         * @return RetentionPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the retention policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public RetentionPolicy execute() throws ApiException {
            ApiResponse<RetentionPolicy> localVarResp = getPolicyWithHttpInfo(retentionPolicyId, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPolicy request with HTTP info returned
         * @return ApiResponse&lt;RetentionPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the retention policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RetentionPolicy> executeWithHttpInfo() throws ApiException {
            return getPolicyWithHttpInfo(retentionPolicyId, fields);
        }

        /**
         * Execute getPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the retention policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RetentionPolicy> _callback) throws ApiException {
            return getPolicyAsync(retentionPolicyId, fields, _callback);
        }
    }

    /**
     * Get retention policy
     * Retrieves a retention policy.
     * @param retentionPolicyId The ID of the retention policy. (required)
     * @return GetPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the retention policy object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetPolicyRequestBuilder getPolicy(String retentionPolicyId) throws IllegalArgumentException {
        if (retentionPolicyId == null) throw new IllegalArgumentException("\"retentionPolicyId\" is required but got null");
            

        return new GetPolicyRequestBuilder(retentionPolicyId);
    }
    private okhttp3.Call listAllCall(String policyName, String policyType, String createdByUserId, List<String> fields, Long limit, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retention_policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_name", policyName));
        }

        if (policyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_type", policyType));
        }

        if (createdByUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by_user_id", createdByUserId));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String policyName, String policyType, String createdByUserId, List<String> fields, Long limit, String marker, final ApiCallback _callback) throws ApiException {
        return listAllCall(policyName, policyType, createdByUserId, fields, limit, marker, _callback);

    }


    private ApiResponse<RetentionPolicies> listAllWithHttpInfo(String policyName, String policyType, String createdByUserId, List<String> fields, Long limit, String marker) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(policyName, policyType, createdByUserId, fields, limit, marker, null);
        Type localVarReturnType = new TypeToken<RetentionPolicies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(String policyName, String policyType, String createdByUserId, List<String> fields, Long limit, String marker, final ApiCallback<RetentionPolicies> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(policyName, policyType, createdByUserId, fields, limit, marker, _callback);
        Type localVarReturnType = new TypeToken<RetentionPolicies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private String policyName;
        private String policyType;
        private String createdByUserId;
        private List<String> fields;
        private Long limit;
        private String marker;

        private ListAllRequestBuilder() {
        }

        /**
         * Set policyName
         * @param policyName Filters results by a case sensitive prefix of the name of retention policies. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder policyName(String policyName) {
            this.policyName = policyName;
            return this;
        }
        
        /**
         * Set policyType
         * @param policyType Filters results by the type of retention policy. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder policyType(String policyType) {
            this.policyType = policyType;
            return this;
        }
        
        /**
         * Set createdByUserId
         * @param createdByUserId Filters results by the ID of the user who created policy. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder createdByUserId(String createdByUserId) {
            this.createdByUserId = createdByUserId;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list retention policies in the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(policyName, policyType, createdByUserId, fields, limit, marker, _callback);
        }


        /**
         * Execute listAll request
         * @return RetentionPolicies
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list retention policies in the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public RetentionPolicies execute() throws ApiException {
            ApiResponse<RetentionPolicies> localVarResp = listAllWithHttpInfo(policyName, policyType, createdByUserId, fields, limit, marker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;RetentionPolicies&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list retention policies in the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RetentionPolicies> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(policyName, policyType, createdByUserId, fields, limit, marker);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list retention policies in the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RetentionPolicies> _callback) throws ApiException {
            return listAllAsync(policyName, policyType, createdByUserId, fields, limit, marker, _callback);
        }
    }

    /**
     * List retention policies
     * Retrieves all of the retention policies for an enterprise.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list retention policies in the enterprise. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call updatePolicyCall(String retentionPolicyId, RetentionPoliciesUpdatePolicyRequest retentionPoliciesUpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = retentionPoliciesUpdatePolicyRequest;

        // create path and map variables
        String localVarPath = "/retention_policies/{retention_policy_id}"
            .replace("{" + "retention_policy_id" + "}", localVarApiClient.escapeString(retentionPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePolicyValidateBeforeCall(String retentionPolicyId, RetentionPoliciesUpdatePolicyRequest retentionPoliciesUpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retentionPolicyId' is set
        if (retentionPolicyId == null) {
            throw new ApiException("Missing the required parameter 'retentionPolicyId' when calling updatePolicy(Async)");
        }

        return updatePolicyCall(retentionPolicyId, retentionPoliciesUpdatePolicyRequest, _callback);

    }


    private ApiResponse<RetentionPolicy> updatePolicyWithHttpInfo(String retentionPolicyId, RetentionPoliciesUpdatePolicyRequest retentionPoliciesUpdatePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(retentionPolicyId, retentionPoliciesUpdatePolicyRequest, null);
        Type localVarReturnType = new TypeToken<RetentionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePolicyAsync(String retentionPolicyId, RetentionPoliciesUpdatePolicyRequest retentionPoliciesUpdatePolicyRequest, final ApiCallback<RetentionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(retentionPolicyId, retentionPoliciesUpdatePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<RetentionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePolicyRequestBuilder {
        private final String retentionPolicyId;
        private String description;
        private String policyName;
        private String dispositionAction;
        private String retentionType;
        private Object retentionLength;
        private String status;
        private Boolean canOwnerExtendRetention;
        private Boolean areOwnersNotified;
        private List<UserBase> customNotificationRecipients;

        private UpdatePolicyRequestBuilder(String retentionPolicyId) {
            this.retentionPolicyId = retentionPolicyId;
        }

        /**
         * Set description
         * @param description The additional text description of the retention policy. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set policyName
         * @param policyName The name for the retention policy (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder policyName(String policyName) {
            this.policyName = policyName;
            return this;
        }
        
        /**
         * Set dispositionAction
         * @param dispositionAction  (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder dispositionAction(String dispositionAction) {
            this.dispositionAction = dispositionAction;
            return this;
        }
        
        /**
         * Set retentionType
         * @param retentionType Specifies the retention type:  * &#x60;modifiable&#x60;: You can modify the retention policy. For example, you can add or remove folders, shorten or lengthen the policy duration, or delete the assignment. Use this type if your retention policy is not related to any regulatory purposes. * &#x60;non-modifiable&#x60;: You can modify the retention policy only in a limited way: add a folder, lengthen the duration, retire the policy, change the disposition action or notification settings. You cannot perform other actions, such as deleting the assignment or shortening the policy duration. Use this type to ensure compliance with regulatory retention policies.  When updating a retention policy, you can use &#x60;non-modifiable&#x60; type only. You can convert a &#x60;modifiable&#x60; policy to &#x60;non-modifiable&#x60;, but not the other way around. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder retentionType(String retentionType) {
            this.retentionType = retentionType;
            return this;
        }
        
        /**
         * Set retentionLength
         * @param retentionLength  (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder retentionLength(Object retentionLength) {
            this.retentionLength = retentionLength;
            return this;
        }
        
        /**
         * Set status
         * @param status Used to retire a retention policy.  If not retiring a policy, do not include this parameter or set it to &#x60;null&#x60;. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set canOwnerExtendRetention
         * @param canOwnerExtendRetention Determines if the owner of items under the policy can extend the retention when the original retention duration is about to end. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder canOwnerExtendRetention(Boolean canOwnerExtendRetention) {
            this.canOwnerExtendRetention = canOwnerExtendRetention;
            return this;
        }
        
        /**
         * Set areOwnersNotified
         * @param areOwnersNotified Determines if owners and co-owners of items under the policy are notified when the retention duration is about to end. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder areOwnersNotified(Boolean areOwnersNotified) {
            this.areOwnersNotified = areOwnersNotified;
            return this;
        }
        
        /**
         * Set customNotificationRecipients
         * @param customNotificationRecipients A list of users notified when the retention duration is about to end. (optional)
         * @return UpdatePolicyRequestBuilder
         */
        public UpdatePolicyRequestBuilder customNotificationRecipients(List<UserBase> customNotificationRecipients) {
            this.customNotificationRecipients = customNotificationRecipients;
            return this;
        }
        
        /**
         * Build call for updatePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated retention policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RetentionPoliciesUpdatePolicyRequest retentionPoliciesUpdatePolicyRequest = buildBodyParams();
            return updatePolicyCall(retentionPolicyId, retentionPoliciesUpdatePolicyRequest, _callback);
        }

        private RetentionPoliciesUpdatePolicyRequest buildBodyParams() {
            RetentionPoliciesUpdatePolicyRequest retentionPoliciesUpdatePolicyRequest = new RetentionPoliciesUpdatePolicyRequest();
            retentionPoliciesUpdatePolicyRequest.description(this.description);
            retentionPoliciesUpdatePolicyRequest.policyName(this.policyName);
            if (this.dispositionAction != null)
            retentionPoliciesUpdatePolicyRequest.dispositionAction(RetentionPoliciesUpdatePolicyRequest.DispositionActionEnum.fromValue(this.dispositionAction));
            retentionPoliciesUpdatePolicyRequest.retentionType(this.retentionType);
            retentionPoliciesUpdatePolicyRequest.retentionLength(this.retentionLength);
            retentionPoliciesUpdatePolicyRequest.status(this.status);
            retentionPoliciesUpdatePolicyRequest.canOwnerExtendRetention(this.canOwnerExtendRetention);
            retentionPoliciesUpdatePolicyRequest.areOwnersNotified(this.areOwnersNotified);
            retentionPoliciesUpdatePolicyRequest.customNotificationRecipients(this.customNotificationRecipients);
            return retentionPoliciesUpdatePolicyRequest;
        }

        /**
         * Execute updatePolicy request
         * @return RetentionPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated retention policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public RetentionPolicy execute() throws ApiException {
            RetentionPoliciesUpdatePolicyRequest retentionPoliciesUpdatePolicyRequest = buildBodyParams();
            ApiResponse<RetentionPolicy> localVarResp = updatePolicyWithHttpInfo(retentionPolicyId, retentionPoliciesUpdatePolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePolicy request with HTTP info returned
         * @return ApiResponse&lt;RetentionPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated retention policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RetentionPolicy> executeWithHttpInfo() throws ApiException {
            RetentionPoliciesUpdatePolicyRequest retentionPoliciesUpdatePolicyRequest = buildBodyParams();
            return updatePolicyWithHttpInfo(retentionPolicyId, retentionPoliciesUpdatePolicyRequest);
        }

        /**
         * Execute updatePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated retention policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RetentionPolicy> _callback) throws ApiException {
            RetentionPoliciesUpdatePolicyRequest retentionPoliciesUpdatePolicyRequest = buildBodyParams();
            return updatePolicyAsync(retentionPolicyId, retentionPoliciesUpdatePolicyRequest, _callback);
        }
    }

    /**
     * Update retention policy
     * Updates a retention policy.
     * @param retentionPolicyId The ID of the retention policy. (required)
     * @return UpdatePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated retention policy object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePolicyRequestBuilder updatePolicy(String retentionPolicyId) throws IllegalArgumentException {
        if (retentionPolicyId == null) throw new IllegalArgumentException("\"retentionPolicyId\" is required but got null");
            

        return new UpdatePolicyRequestBuilder(retentionPolicyId);
    }
}
