/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PostTasksRequest;
import com.konfigthis.client.model.PostTasksRequestItem;
import com.konfigthis.client.model.Task;
import com.konfigthis.client.model.Tasks;
import com.konfigthis.client.model.TasksUpdateTaskConfigurationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TasksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getInfoCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getInfo(Async)");
        }

        return getInfoCall(taskId, _callback);

    }


    private ApiResponse<Task> getInfoWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String taskId, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String taskId;

        private GetInfoRequestBuilder(String taskId) {
            this.taskId = taskId;
        }

        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a task object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(taskId, _callback);
        }


        /**
         * Execute getInfo request
         * @return Task
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a task object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Task execute() throws ApiException {
            ApiResponse<Task> localVarResp = getInfoWithHttpInfo(taskId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;Task&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a task object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Task> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(taskId);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a task object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Task> _callback) throws ApiException {
            return getInfoAsync(taskId, _callback);
        }
    }

    /**
     * Get task
     * Retrieves information about a specific task.
     * @param taskId The ID of the task. (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a task object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetInfoRequestBuilder getInfo(String taskId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new GetInfoRequestBuilder(taskId);
    }
    private okhttp3.Call listOnFileCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/tasks"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOnFileValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling listOnFile(Async)");
        }

        return listOnFileCall(fileId, _callback);

    }


    private ApiResponse<Tasks> listOnFileWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = listOnFileValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<Tasks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOnFileAsync(String fileId, final ApiCallback<Tasks> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOnFileValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<Tasks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOnFileRequestBuilder {
        private final String fileId;

        private ListOnFileRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Build call for listOnFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of tasks on a file.  If there are no tasks on this file an empty collection is returned instead. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOnFileCall(fileId, _callback);
        }


        /**
         * Execute listOnFile request
         * @return Tasks
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of tasks on a file.  If there are no tasks on this file an empty collection is returned instead. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Tasks execute() throws ApiException {
            ApiResponse<Tasks> localVarResp = listOnFileWithHttpInfo(fileId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOnFile request with HTTP info returned
         * @return ApiResponse&lt;Tasks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of tasks on a file.  If there are no tasks on this file an empty collection is returned instead. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Tasks> executeWithHttpInfo() throws ApiException {
            return listOnFileWithHttpInfo(fileId);
        }

        /**
         * Execute listOnFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of tasks on a file.  If there are no tasks on this file an empty collection is returned instead. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Tasks> _callback) throws ApiException {
            return listOnFileAsync(fileId, _callback);
        }
    }

    /**
     * List tasks on file
     * Retrieves a list of all the tasks for a file. This endpoint does not support pagination.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return ListOnFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of tasks on a file.  If there are no tasks on this file an empty collection is returned instead. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListOnFileRequestBuilder listOnFile(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new ListOnFileRequestBuilder(fileId);
    }
    private okhttp3.Call removeFileCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFileValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling removeFile(Async)");
        }

        return removeFileCall(taskId, _callback);

    }


    private ApiResponse<Void> removeFileWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = removeFileValidateBeforeCall(taskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFileAsync(String taskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFileValidateBeforeCall(taskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFileRequestBuilder {
        private final String taskId;

        private RemoveFileRequestBuilder(String taskId) {
            this.taskId = taskId;
        }

        /**
         * Build call for removeFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the task was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFileCall(taskId, _callback);
        }


        /**
         * Execute removeFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the task was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFileWithHttpInfo(taskId);
        }

        /**
         * Execute removeFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the task was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFileWithHttpInfo(taskId);
        }

        /**
         * Execute removeFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the task was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFileAsync(taskId, _callback);
        }
    }

    /**
     * Remove task
     * Removes a task from a file.
     * @param taskId The ID of the task. (required)
     * @return RemoveFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the task was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFileRequestBuilder removeFile(String taskId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new RemoveFileRequestBuilder(taskId);
    }
    private okhttp3.Call tasksCall(PostTasksRequest postTasksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postTasksRequest;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksValidateBeforeCall(PostTasksRequest postTasksRequest, final ApiCallback _callback) throws ApiException {
        return tasksCall(postTasksRequest, _callback);

    }


    private ApiResponse<Task> tasksWithHttpInfo(PostTasksRequest postTasksRequest) throws ApiException {
        okhttp3.Call localVarCall = tasksValidateBeforeCall(postTasksRequest, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call tasksAsync(PostTasksRequest postTasksRequest, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksValidateBeforeCall(postTasksRequest, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TasksRequestBuilder {
        private final PostTasksRequestItem item;
        private String action;
        private String message;
        private OffsetDateTime dueAt;
        private String completionRule;

        private TasksRequestBuilder(PostTasksRequestItem item) {
            this.item = item;
        }

        /**
         * Set action
         * @param action The action the task assignee will be prompted to do. Must be  * &#x60;review&#x60; defines an approval task that can be approved or rejected * &#x60;complete&#x60; defines a general task which can be completed (optional, default to review)
         * @return TasksRequestBuilder
         */
        public TasksRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Set message
         * @param message An optional message to include with the task. (optional, default to )
         * @return TasksRequestBuilder
         */
        public TasksRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set dueAt
         * @param dueAt Defines when the task is due. Defaults to &#x60;null&#x60; if not provided. (optional)
         * @return TasksRequestBuilder
         */
        public TasksRequestBuilder dueAt(OffsetDateTime dueAt) {
            this.dueAt = dueAt;
            return this;
        }
        
        /**
         * Set completionRule
         * @param completionRule Defines which assignees need to complete this task before the task is considered completed.  * &#x60;all_assignees&#x60; (default) requires all assignees to review or approve the the task in order for it to be considered completed. * &#x60;any_assignee&#x60; accepts any one assignee to review or approve the the task in order for it to be considered completed. (optional, default to all_assignees)
         * @return TasksRequestBuilder
         */
        public TasksRequestBuilder completionRule(String completionRule) {
            this.completionRule = completionRule;
            return this;
        }
        
        /**
         * Build call for tasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the newly created task. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostTasksRequest postTasksRequest = buildBodyParams();
            return tasksCall(postTasksRequest, _callback);
        }

        private PostTasksRequest buildBodyParams() {
            PostTasksRequest postTasksRequest = new PostTasksRequest();
            postTasksRequest.item(this.item);
            if (this.action != null)
            postTasksRequest.action(PostTasksRequest.ActionEnum.fromValue(this.action));
            postTasksRequest.message(this.message);
            postTasksRequest.dueAt(this.dueAt);
            if (this.completionRule != null)
            postTasksRequest.completionRule(PostTasksRequest.CompletionRuleEnum.fromValue(this.completionRule));
            return postTasksRequest;
        }

        /**
         * Execute tasks request
         * @return Task
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the newly created task. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Task execute() throws ApiException {
            PostTasksRequest postTasksRequest = buildBodyParams();
            ApiResponse<Task> localVarResp = tasksWithHttpInfo(postTasksRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute tasks request with HTTP info returned
         * @return ApiResponse&lt;Task&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the newly created task. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Task> executeWithHttpInfo() throws ApiException {
            PostTasksRequest postTasksRequest = buildBodyParams();
            return tasksWithHttpInfo(postTasksRequest);
        }

        /**
         * Execute tasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the newly created task. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Task> _callback) throws ApiException {
            PostTasksRequest postTasksRequest = buildBodyParams();
            return tasksAsync(postTasksRequest, _callback);
        }
    }

    /**
     * Create task
     * Creates a single task on a file. This task is not assigned to any user and will need to be assigned separately.
     * @return TasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created task. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public TasksRequestBuilder tasks(PostTasksRequestItem item) throws IllegalArgumentException {
        if (item == null) throw new IllegalArgumentException("\"item\" is required but got null");
        return new TasksRequestBuilder(item);
    }
    private okhttp3.Call updateTaskConfigurationCall(String taskId, TasksUpdateTaskConfigurationRequest tasksUpdateTaskConfigurationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksUpdateTaskConfigurationRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskConfigurationValidateBeforeCall(String taskId, TasksUpdateTaskConfigurationRequest tasksUpdateTaskConfigurationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTaskConfiguration(Async)");
        }

        return updateTaskConfigurationCall(taskId, tasksUpdateTaskConfigurationRequest, _callback);

    }


    private ApiResponse<Task> updateTaskConfigurationWithHttpInfo(String taskId, TasksUpdateTaskConfigurationRequest tasksUpdateTaskConfigurationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTaskConfigurationValidateBeforeCall(taskId, tasksUpdateTaskConfigurationRequest, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTaskConfigurationAsync(String taskId, TasksUpdateTaskConfigurationRequest tasksUpdateTaskConfigurationRequest, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskConfigurationValidateBeforeCall(taskId, tasksUpdateTaskConfigurationRequest, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTaskConfigurationRequestBuilder {
        private final String taskId;
        private String action;
        private String message;
        private OffsetDateTime dueAt;
        private String completionRule;

        private UpdateTaskConfigurationRequestBuilder(String taskId) {
            this.taskId = taskId;
        }

        /**
         * Set action
         * @param action The action the task assignee will be prompted to do. Must be  * &#x60;review&#x60; defines an approval task that can be approved or rejected * &#x60;complete&#x60; defines a general task which can be completed (optional)
         * @return UpdateTaskConfigurationRequestBuilder
         */
        public UpdateTaskConfigurationRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Set message
         * @param message The message included with the task. (optional)
         * @return UpdateTaskConfigurationRequestBuilder
         */
        public UpdateTaskConfigurationRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set dueAt
         * @param dueAt When the task is due at. (optional)
         * @return UpdateTaskConfigurationRequestBuilder
         */
        public UpdateTaskConfigurationRequestBuilder dueAt(OffsetDateTime dueAt) {
            this.dueAt = dueAt;
            return this;
        }
        
        /**
         * Set completionRule
         * @param completionRule Defines which assignees need to complete this task before the task is considered completed.  * &#x60;all_assignees&#x60; (default) requires all assignees to review or approve the the task in order for it to be considered completed. * &#x60;any_assignee&#x60; accepts any one assignee to review or approve the the task in order for it to be considered completed. (optional)
         * @return UpdateTaskConfigurationRequestBuilder
         */
        public UpdateTaskConfigurationRequestBuilder completionRule(String completionRule) {
            this.completionRule = completionRule;
            return this;
        }
        
        /**
         * Build call for updateTaskConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated task object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksUpdateTaskConfigurationRequest tasksUpdateTaskConfigurationRequest = buildBodyParams();
            return updateTaskConfigurationCall(taskId, tasksUpdateTaskConfigurationRequest, _callback);
        }

        private TasksUpdateTaskConfigurationRequest buildBodyParams() {
            TasksUpdateTaskConfigurationRequest tasksUpdateTaskConfigurationRequest = new TasksUpdateTaskConfigurationRequest();
            if (this.action != null)
            tasksUpdateTaskConfigurationRequest.action(TasksUpdateTaskConfigurationRequest.ActionEnum.fromValue(this.action));
            tasksUpdateTaskConfigurationRequest.message(this.message);
            tasksUpdateTaskConfigurationRequest.dueAt(this.dueAt);
            if (this.completionRule != null)
            tasksUpdateTaskConfigurationRequest.completionRule(TasksUpdateTaskConfigurationRequest.CompletionRuleEnum.fromValue(this.completionRule));
            return tasksUpdateTaskConfigurationRequest;
        }

        /**
         * Execute updateTaskConfiguration request
         * @return Task
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated task object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Task execute() throws ApiException {
            TasksUpdateTaskConfigurationRequest tasksUpdateTaskConfigurationRequest = buildBodyParams();
            ApiResponse<Task> localVarResp = updateTaskConfigurationWithHttpInfo(taskId, tasksUpdateTaskConfigurationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTaskConfiguration request with HTTP info returned
         * @return ApiResponse&lt;Task&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated task object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Task> executeWithHttpInfo() throws ApiException {
            TasksUpdateTaskConfigurationRequest tasksUpdateTaskConfigurationRequest = buildBodyParams();
            return updateTaskConfigurationWithHttpInfo(taskId, tasksUpdateTaskConfigurationRequest);
        }

        /**
         * Execute updateTaskConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated task object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Task> _callback) throws ApiException {
            TasksUpdateTaskConfigurationRequest tasksUpdateTaskConfigurationRequest = buildBodyParams();
            return updateTaskConfigurationAsync(taskId, tasksUpdateTaskConfigurationRequest, _callback);
        }
    }

    /**
     * Update task
     * Updates a task. This can be used to update a task&#39;s configuration, or to update its completion state.
     * @param taskId The ID of the task. (required)
     * @return UpdateTaskConfigurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated task object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTaskConfigurationRequestBuilder updateTaskConfiguration(String taskId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new UpdateTaskConfigurationRequestBuilder(taskId);
    }
}
