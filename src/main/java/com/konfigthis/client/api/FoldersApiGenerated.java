/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FolderFull;
import com.konfigthis.client.model.FoldersCreateCopyRequest;
import com.konfigthis.client.model.FoldersCreateCopyRequestParent;
import com.konfigthis.client.model.FoldersUpdateFolderRequest;
import com.konfigthis.client.model.FoldersUpdateFolderRequestFolderUploadEmail;
import com.konfigthis.client.model.FoldersUpdateFolderRequestParent;
import com.konfigthis.client.model.FoldersUpdateFolderRequestSharedLink;
import com.konfigthis.client.model.Items;
import com.konfigthis.client.model.PostFoldersRequest;
import com.konfigthis.client.model.PostFoldersRequestFolderUploadEmail;
import com.konfigthis.client.model.PostFoldersRequestParent;
import com.konfigthis.client.model.Reference2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FoldersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FoldersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FoldersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCopyCall(String folderId, List<String> fields, FoldersCreateCopyRequest foldersCreateCopyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = foldersCreateCopyRequest;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/copy"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCopyValidateBeforeCall(String folderId, List<String> fields, FoldersCreateCopyRequest foldersCreateCopyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling createCopy(Async)");
        }

        return createCopyCall(folderId, fields, foldersCreateCopyRequest, _callback);

    }


    private ApiResponse<FolderFull> createCopyWithHttpInfo(String folderId, List<String> fields, FoldersCreateCopyRequest foldersCreateCopyRequest) throws ApiException {
        okhttp3.Call localVarCall = createCopyValidateBeforeCall(folderId, fields, foldersCreateCopyRequest, null);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCopyAsync(String folderId, List<String> fields, FoldersCreateCopyRequest foldersCreateCopyRequest, final ApiCallback<FolderFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCopyValidateBeforeCall(folderId, fields, foldersCreateCopyRequest, _callback);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCopyRequestBuilder {
        private final FoldersCreateCopyRequestParent parent;
        private final String folderId;
        private String name;
        private List<String> fields;

        private CreateCopyRequestBuilder(FoldersCreateCopyRequestParent parent, String folderId) {
            this.parent = parent;
            this.folderId = folderId;
        }

        /**
         * Set name
         * @param name An optional new name for the copied folder.  There are some restrictions to the file name. Names containing non-printable ASCII characters, forward and backward slashes (&#x60;/&#x60;, &#x60;\\\\&#x60;), as well as names with trailing spaces are prohibited.  Additionally, the names &#x60;.&#x60; and &#x60;..&#x60; are not allowed either. (optional)
         * @return CreateCopyRequestBuilder
         */
        public CreateCopyRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return CreateCopyRequestBuilder
         */
        public CreateCopyRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for createCopy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new folder object representing the copied folder.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FoldersCreateCopyRequest foldersCreateCopyRequest = buildBodyParams();
            return createCopyCall(folderId, fields, foldersCreateCopyRequest, _callback);
        }

        private FoldersCreateCopyRequest buildBodyParams() {
            FoldersCreateCopyRequest foldersCreateCopyRequest = new FoldersCreateCopyRequest();
            foldersCreateCopyRequest.name(this.name);
            foldersCreateCopyRequest.parent(this.parent);
            return foldersCreateCopyRequest;
        }

        /**
         * Execute createCopy request
         * @return FolderFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new folder object representing the copied folder.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FolderFull execute() throws ApiException {
            FoldersCreateCopyRequest foldersCreateCopyRequest = buildBodyParams();
            ApiResponse<FolderFull> localVarResp = createCopyWithHttpInfo(folderId, fields, foldersCreateCopyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCopy request with HTTP info returned
         * @return ApiResponse&lt;FolderFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new folder object representing the copied folder.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FolderFull> executeWithHttpInfo() throws ApiException {
            FoldersCreateCopyRequest foldersCreateCopyRequest = buildBodyParams();
            return createCopyWithHttpInfo(folderId, fields, foldersCreateCopyRequest);
        }

        /**
         * Execute createCopy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new folder object representing the copied folder.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FolderFull> _callback) throws ApiException {
            FoldersCreateCopyRequest foldersCreateCopyRequest = buildBodyParams();
            return createCopyAsync(folderId, fields, foldersCreateCopyRequest, _callback);
        }
    }

    /**
     * Copy folder
     * Creates a copy of a folder within a destination folder.  The original folder will not be changed.
     * @param folderId The unique identifier of the folder to copy.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder with the ID &#x60;0&#x60; can not be copied. (required)
     * @return CreateCopyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new folder object representing the copied folder.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCopyRequestBuilder createCopy(FoldersCreateCopyRequestParent parent, String folderId) throws IllegalArgumentException {
        if (parent == null) throw new IllegalArgumentException("\"parent\" is required but got null");
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new CreateCopyRequestBuilder(parent, folderId);
    }
    private okhttp3.Call deleteByIdCall(String folderId, String ifMatch, Boolean recursive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("if-match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(String folderId, String ifMatch, Boolean recursive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling deleteById(Async)");
        }

        return deleteByIdCall(folderId, ifMatch, recursive, _callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo(String folderId, String ifMatch, Boolean recursive) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(folderId, ifMatch, recursive, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(String folderId, String ifMatch, Boolean recursive, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(folderId, ifMatch, recursive, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final String folderId;
        private String ifMatch;
        private Boolean recursive;

        private DeleteByIdRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Set ifMatch
         * @param ifMatch Ensures this item hasn&#39;t recently changed before making changes.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since. (optional)
         * @return DeleteByIdRequestBuilder
         */
        public DeleteByIdRequestBuilder ifMatch(String ifMatch) {
            this.ifMatch = ifMatch;
            return this;
        }
        
        /**
         * Set recursive
         * @param recursive Delete a folder that is not empty by recursively deleting the folder and all of its content. (optional)
         * @return DeleteByIdRequestBuilder
         */
        public DeleteByIdRequestBuilder recursive(Boolean recursive) {
            this.recursive = recursive;
            return this;
        }
        
        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the folder is successfully deleted or moved to the trash. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(folderId, ifMatch, recursive, _callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the folder is successfully deleted or moved to the trash. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo(folderId, ifMatch, recursive);
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the folder is successfully deleted or moved to the trash. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(folderId, ifMatch, recursive);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the folder is successfully deleted or moved to the trash. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(folderId, ifMatch, recursive, _callback);
        }
    }

    /**
     * Delete folder
     * Deletes a folder, either permanently or by moving it to the trash.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the folder is successfully deleted or moved to the trash. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new DeleteByIdRequestBuilder(folderId);
    }
    private okhttp3.Call foldersCall(List<String> fields, PostFoldersRequest postFoldersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postFoldersRequest;

        // create path and map variables
        String localVarPath = "/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call foldersValidateBeforeCall(List<String> fields, PostFoldersRequest postFoldersRequest, final ApiCallback _callback) throws ApiException {
        return foldersCall(fields, postFoldersRequest, _callback);

    }


    private ApiResponse<FolderFull> foldersWithHttpInfo(List<String> fields, PostFoldersRequest postFoldersRequest) throws ApiException {
        okhttp3.Call localVarCall = foldersValidateBeforeCall(fields, postFoldersRequest, null);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call foldersAsync(List<String> fields, PostFoldersRequest postFoldersRequest, final ApiCallback<FolderFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = foldersValidateBeforeCall(fields, postFoldersRequest, _callback);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FoldersRequestBuilder {
        private final String name;
        private final PostFoldersRequestParent parent;
        private PostFoldersRequestFolderUploadEmail folderUploadEmail;
        private String syncState;
        private List<String> fields;

        private FoldersRequestBuilder(String name, PostFoldersRequestParent parent) {
            this.name = name;
            this.parent = parent;
        }

        /**
         * Set folderUploadEmail
         * @param folderUploadEmail  (optional)
         * @return FoldersRequestBuilder
         */
        public FoldersRequestBuilder folderUploadEmail(PostFoldersRequestFolderUploadEmail folderUploadEmail) {
            this.folderUploadEmail = folderUploadEmail;
            return this;
        }
        
        /**
         * Set syncState
         * @param syncState Specifies whether a folder should be synced to a user&#39;s device or not. This is used by Box Sync (discontinued) and is not used by Box Drive. (optional)
         * @return FoldersRequestBuilder
         */
        public FoldersRequestBuilder syncState(String syncState) {
            this.syncState = syncState;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return FoldersRequestBuilder
         */
        public FoldersRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for folders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a folder object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostFoldersRequest postFoldersRequest = buildBodyParams();
            return foldersCall(fields, postFoldersRequest, _callback);
        }

        private PostFoldersRequest buildBodyParams() {
            PostFoldersRequest postFoldersRequest = new PostFoldersRequest();
            postFoldersRequest.name(this.name);
            postFoldersRequest.parent(this.parent);
            postFoldersRequest.folderUploadEmail(this.folderUploadEmail);
            if (this.syncState != null)
            postFoldersRequest.syncState(PostFoldersRequest.SyncStateEnum.fromValue(this.syncState));
            return postFoldersRequest;
        }

        /**
         * Execute folders request
         * @return FolderFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a folder object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FolderFull execute() throws ApiException {
            PostFoldersRequest postFoldersRequest = buildBodyParams();
            ApiResponse<FolderFull> localVarResp = foldersWithHttpInfo(fields, postFoldersRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute folders request with HTTP info returned
         * @return ApiResponse&lt;FolderFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a folder object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FolderFull> executeWithHttpInfo() throws ApiException {
            PostFoldersRequest postFoldersRequest = buildBodyParams();
            return foldersWithHttpInfo(fields, postFoldersRequest);
        }

        /**
         * Execute folders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a folder object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FolderFull> _callback) throws ApiException {
            PostFoldersRequest postFoldersRequest = buildBodyParams();
            return foldersAsync(fields, postFoldersRequest, _callback);
        }
    }

    /**
     * Create folder
     * Creates a new empty folder within the specified parent folder.
     * @return FoldersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a folder object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public FoldersRequestBuilder folders(String name, PostFoldersRequestParent parent) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (parent == null) throw new IllegalArgumentException("\"parent\" is required but got null");
        return new FoldersRequestBuilder(name, parent);
    }
    private okhttp3.Call getFolderDetailsCall(String folderId, List<String> fields, String ifNoneMatch, String boxapi, String sort, String direction, Long offset, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("if-none-match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (boxapi != null) {
            localVarHeaderParams.put("boxapi", localVarApiClient.parameterToString(boxapi));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderDetailsValidateBeforeCall(String folderId, List<String> fields, String ifNoneMatch, String boxapi, String sort, String direction, Long offset, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getFolderDetails(Async)");
        }

        return getFolderDetailsCall(folderId, fields, ifNoneMatch, boxapi, sort, direction, offset, limit, _callback);

    }


    private ApiResponse<FolderFull> getFolderDetailsWithHttpInfo(String folderId, List<String> fields, String ifNoneMatch, String boxapi, String sort, String direction, Long offset, Long limit) throws ApiException {
        okhttp3.Call localVarCall = getFolderDetailsValidateBeforeCall(folderId, fields, ifNoneMatch, boxapi, sort, direction, offset, limit, null);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFolderDetailsAsync(String folderId, List<String> fields, String ifNoneMatch, String boxapi, String sort, String direction, Long offset, Long limit, final ApiCallback<FolderFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderDetailsValidateBeforeCall(folderId, fields, ifNoneMatch, boxapi, sort, direction, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFolderDetailsRequestBuilder {
        private final String folderId;
        private List<String> fields;
        private String ifNoneMatch;
        private String boxapi;
        private String sort;
        private String direction;
        private Long offset;
        private Long limit;

        private GetFolderDetailsRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.  Additionally this field can be used to query any metadata applied to the file by specifying the &#x60;metadata&#x60; field as well as the scope and key of the template to retrieve, for example &#x60;?field&#x3D;metadata.enterprise_12345.contractTemplate&#x60;. (optional)
         * @return GetFolderDetailsRequestBuilder
         */
        public GetFolderDetailsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set ifNoneMatch
         * @param ifNoneMatch Ensures an item is only returned if it has changed.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;304 Not Modified&#x60; if the item has not changed since. (optional)
         * @return GetFolderDetailsRequestBuilder
         */
        public GetFolderDetailsRequestBuilder ifNoneMatch(String ifNoneMatch) {
            this.ifNoneMatch = ifNoneMatch;
            return this;
        }
        
        /**
         * Set boxapi
         * @param boxapi The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format &#x60;shared_link&#x3D;[link]&#x60; or if a password is required then use &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60;.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item. (optional)
         * @return GetFolderDetailsRequestBuilder
         */
        public GetFolderDetailsRequestBuilder boxapi(String boxapi) {
            this.boxapi = boxapi;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Defines the **second** attribute by which items are sorted.  The folder type affects the way the items are sorted:    * **Standard folder**:   Items are always sorted by   their &#x60;type&#x60; first, with   folders listed before files,   and files listed   before web links.    * **Root folder**:   This parameter is not supported   for marker-based pagination   on the root folder    (the folder with an &#x60;id&#x60; of &#x60;0&#x60;).    * **Shared folder with parent path   to the associated folder visible to   the collaborator**:   Items are always sorted by   their &#x60;type&#x60; first, with   folders listed before files,   and files listed   before web links. (optional)
         * @return GetFolderDetailsRequestBuilder
         */
        public GetFolderDetailsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set direction
         * @param direction The direction to sort results in. This can be either in alphabetical ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. (optional)
         * @return GetFolderDetailsRequestBuilder
         */
        public GetFolderDetailsRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response. (optional, default to 0)
         * @return GetFolderDetailsRequestBuilder
         */
        public GetFolderDetailsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return GetFolderDetailsRequestBuilder
         */
        public GetFolderDetailsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getFolderDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a folder, including the first 100 entries in the folder. If you used query parameters like &#x60;sort&#x60;, &#x60;direction&#x60;, &#x60;offset&#x60;, or &#x60;limit&#x60; the *folder items list* will be affected accordingly.  To fetch more items within the folder, use the [Get items in a folder](e://get-folders-id-items)) endpoint.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFolderDetailsCall(folderId, fields, ifNoneMatch, boxapi, sort, direction, offset, limit, _callback);
        }


        /**
         * Execute getFolderDetails request
         * @return FolderFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a folder, including the first 100 entries in the folder. If you used query parameters like &#x60;sort&#x60;, &#x60;direction&#x60;, &#x60;offset&#x60;, or &#x60;limit&#x60; the *folder items list* will be affected accordingly.  To fetch more items within the folder, use the [Get items in a folder](e://get-folders-id-items)) endpoint.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FolderFull execute() throws ApiException {
            ApiResponse<FolderFull> localVarResp = getFolderDetailsWithHttpInfo(folderId, fields, ifNoneMatch, boxapi, sort, direction, offset, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFolderDetails request with HTTP info returned
         * @return ApiResponse&lt;FolderFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a folder, including the first 100 entries in the folder. If you used query parameters like &#x60;sort&#x60;, &#x60;direction&#x60;, &#x60;offset&#x60;, or &#x60;limit&#x60; the *folder items list* will be affected accordingly.  To fetch more items within the folder, use the [Get items in a folder](e://get-folders-id-items)) endpoint.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FolderFull> executeWithHttpInfo() throws ApiException {
            return getFolderDetailsWithHttpInfo(folderId, fields, ifNoneMatch, boxapi, sort, direction, offset, limit);
        }

        /**
         * Execute getFolderDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a folder, including the first 100 entries in the folder. If you used query parameters like &#x60;sort&#x60;, &#x60;direction&#x60;, &#x60;offset&#x60;, or &#x60;limit&#x60; the *folder items list* will be affected accordingly.  To fetch more items within the folder, use the [Get items in a folder](e://get-folders-id-items)) endpoint.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FolderFull> _callback) throws ApiException {
            return getFolderDetailsAsync(folderId, fields, ifNoneMatch, boxapi, sort, direction, offset, limit, _callback);
        }
    }

    /**
     * Get folder information
     * Retrieves details for a folder, including the first 100 entries in the folder.  Passing &#x60;sort&#x60;, &#x60;direction&#x60;, &#x60;offset&#x60;, and &#x60;limit&#x60; parameters in query allows you to manage the list of returned [folder items](r://folder--full#param-item-collection).  To fetch more items within the folder, use the [Get items in a folder](e://get-folders-id-items) endpoint.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return GetFolderDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a folder, including the first 100 entries in the folder. If you used query parameters like &#x60;sort&#x60;, &#x60;direction&#x60;, &#x60;offset&#x60;, or &#x60;limit&#x60; the *folder items list* will be affected accordingly.  To fetch more items within the folder, use the [Get items in a folder](e://get-folders-id-items)) endpoint.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderDetailsRequestBuilder getFolderDetails(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new GetFolderDetailsRequestBuilder(folderId);
    }
    private okhttp3.Call listItemsInFolderCall(String folderId, List<String> fields, Boolean usemarker, String marker, Long offset, Long limit, String boxapi, String sort, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/items"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (usemarker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usemarker", usemarker));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (boxapi != null) {
            localVarHeaderParams.put("boxapi", localVarApiClient.parameterToString(boxapi));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listItemsInFolderValidateBeforeCall(String folderId, List<String> fields, Boolean usemarker, String marker, Long offset, Long limit, String boxapi, String sort, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling listItemsInFolder(Async)");
        }

        return listItemsInFolderCall(folderId, fields, usemarker, marker, offset, limit, boxapi, sort, direction, _callback);

    }


    private ApiResponse<Items> listItemsInFolderWithHttpInfo(String folderId, List<String> fields, Boolean usemarker, String marker, Long offset, Long limit, String boxapi, String sort, String direction) throws ApiException {
        okhttp3.Call localVarCall = listItemsInFolderValidateBeforeCall(folderId, fields, usemarker, marker, offset, limit, boxapi, sort, direction, null);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listItemsInFolderAsync(String folderId, List<String> fields, Boolean usemarker, String marker, Long offset, Long limit, String boxapi, String sort, String direction, final ApiCallback<Items> _callback) throws ApiException {

        okhttp3.Call localVarCall = listItemsInFolderValidateBeforeCall(folderId, fields, usemarker, marker, offset, limit, boxapi, sort, direction, _callback);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListItemsInFolderRequestBuilder {
        private final String folderId;
        private List<String> fields;
        private Boolean usemarker;
        private String marker;
        private Long offset;
        private Long limit;
        private String boxapi;
        private String sort;
        private String direction;

        private ListItemsInFolderRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.  Additionally this field can be used to query any metadata applied to the file by specifying the &#x60;metadata&#x60; field as well as the scope and key of the template to retrieve, for example &#x60;?field&#x3D;metadata.enterprise_12345.contractTemplate&#x60;. (optional)
         * @return ListItemsInFolderRequestBuilder
         */
        public ListItemsInFolderRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set usemarker
         * @param usemarker Specifies whether to use marker-based pagination instead of offset-based pagination. Only one pagination method can be used at a time.  By setting this value to true, the API will return a &#x60;marker&#x60; field that can be passed as a parameter to this endpoint to get the next page of the response. (optional)
         * @return ListItemsInFolderRequestBuilder
         */
        public ListItemsInFolderRequestBuilder usemarker(Boolean usemarker) {
            this.usemarker = usemarker;
            return this;
        }
        
        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListItemsInFolderRequestBuilder
         */
        public ListItemsInFolderRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response. (optional, default to 0)
         * @return ListItemsInFolderRequestBuilder
         */
        public ListItemsInFolderRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListItemsInFolderRequestBuilder
         */
        public ListItemsInFolderRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set boxapi
         * @param boxapi The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format &#x60;shared_link&#x3D;[link]&#x60; or if a password is required then use &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60;.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item. (optional)
         * @return ListItemsInFolderRequestBuilder
         */
        public ListItemsInFolderRequestBuilder boxapi(String boxapi) {
            this.boxapi = boxapi;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Defines the **second** attribute by which items are sorted.  The folder type affects the way the items are sorted:    * **Standard folder**:   Items are always sorted by   their &#x60;type&#x60; first, with   folders listed before files,   and files listed   before web links.    * **Root folder**:   This parameter is not supported   for marker-based pagination   on the root folder    (the folder with an &#x60;id&#x60; of &#x60;0&#x60;).    * **Shared folder with parent path   to the associated folder visible to   the collaborator**:   Items are always sorted by   their &#x60;type&#x60; first, with   folders listed before files,   and files listed   before web links. (optional)
         * @return ListItemsInFolderRequestBuilder
         */
        public ListItemsInFolderRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set direction
         * @param direction The direction to sort results in. This can be either in alphabetical ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;) order. (optional)
         * @return ListItemsInFolderRequestBuilder
         */
        public ListItemsInFolderRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Build call for listItemsInFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of files, folders, and web links contained in a folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listItemsInFolderCall(folderId, fields, usemarker, marker, offset, limit, boxapi, sort, direction, _callback);
        }


        /**
         * Execute listItemsInFolder request
         * @return Items
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of files, folders, and web links contained in a folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Items execute() throws ApiException {
            ApiResponse<Items> localVarResp = listItemsInFolderWithHttpInfo(folderId, fields, usemarker, marker, offset, limit, boxapi, sort, direction);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listItemsInFolder request with HTTP info returned
         * @return ApiResponse&lt;Items&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of files, folders, and web links contained in a folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Items> executeWithHttpInfo() throws ApiException {
            return listItemsInFolderWithHttpInfo(folderId, fields, usemarker, marker, offset, limit, boxapi, sort, direction);
        }

        /**
         * Execute listItemsInFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of files, folders, and web links contained in a folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Items> _callback) throws ApiException {
            return listItemsInFolderAsync(folderId, fields, usemarker, marker, offset, limit, boxapi, sort, direction, _callback);
        }
    }

    /**
     * List items in folder
     * Retrieves a page of items in a folder. These items can be files, folders, and web links.  To request more information about the folder itself, like its size, use the [Get a folder](https://raw.githubusercontent.com) endpoint instead.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return ListItemsInFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of files, folders, and web links contained in a folder. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListItemsInFolderRequestBuilder listItemsInFolder(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new ListItemsInFolderRequestBuilder(folderId);
    }
    private okhttp3.Call updateFolderCall(String folderId, List<String> fields, String ifMatch, FoldersUpdateFolderRequest foldersUpdateFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = foldersUpdateFolderRequest;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("if-match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFolderValidateBeforeCall(String folderId, List<String> fields, String ifMatch, FoldersUpdateFolderRequest foldersUpdateFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling updateFolder(Async)");
        }

        return updateFolderCall(folderId, fields, ifMatch, foldersUpdateFolderRequest, _callback);

    }


    private ApiResponse<FolderFull> updateFolderWithHttpInfo(String folderId, List<String> fields, String ifMatch, FoldersUpdateFolderRequest foldersUpdateFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFolderValidateBeforeCall(folderId, fields, ifMatch, foldersUpdateFolderRequest, null);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFolderAsync(String folderId, List<String> fields, String ifMatch, FoldersUpdateFolderRequest foldersUpdateFolderRequest, final ApiCallback<FolderFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFolderValidateBeforeCall(folderId, fields, ifMatch, foldersUpdateFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFolderRequestBuilder {
        private final String folderId;
        private List<String> tags;
        private String description;
        private String name;
        private String syncState;
        private Boolean canNonOwnersInvite;
        private FoldersUpdateFolderRequestParent parent;
        private FoldersUpdateFolderRequestSharedLink sharedLink;
        private FoldersUpdateFolderRequestFolderUploadEmail folderUploadEmail;
        private Boolean isCollaborationRestrictedToEnterprise;
        private List<Reference2> collections;
        private Boolean canNonOwnersViewCollaborators;
        private List<String> fields;
        private String ifMatch;

        private UpdateFolderRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Set tags
         * @param tags The tags for this item. These tags are shown in the Box web app and mobile apps next to an item.  To add or remove a tag, retrieve the item&#39;s current tags, modify them, and then update this field.  There is a limit of 100 tags per item, and 10,000 unique tags per enterprise. (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set description
         * @param description The optional description of this folder (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The optional new name for this folder. (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set syncState
         * @param syncState Specifies whether a folder should be synced to a user&#39;s device or not. This is used by Box Sync (discontinued) and is not used by Box Drive. (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder syncState(String syncState) {
            this.syncState = syncState;
            return this;
        }
        
        /**
         * Set canNonOwnersInvite
         * @param canNonOwnersInvite Specifies if users who are not the owner of the folder can invite new collaborators to the folder. (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder canNonOwnersInvite(Boolean canNonOwnersInvite) {
            this.canNonOwnersInvite = canNonOwnersInvite;
            return this;
        }
        
        /**
         * Set parent
         * @param parent  (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder parent(FoldersUpdateFolderRequestParent parent) {
            this.parent = parent;
            return this;
        }
        
        /**
         * Set sharedLink
         * @param sharedLink  (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder sharedLink(FoldersUpdateFolderRequestSharedLink sharedLink) {
            this.sharedLink = sharedLink;
            return this;
        }
        
        /**
         * Set folderUploadEmail
         * @param folderUploadEmail  (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder folderUploadEmail(FoldersUpdateFolderRequestFolderUploadEmail folderUploadEmail) {
            this.folderUploadEmail = folderUploadEmail;
            return this;
        }
        
        /**
         * Set isCollaborationRestrictedToEnterprise
         * @param isCollaborationRestrictedToEnterprise Specifies if new invites to this folder are restricted to users within the enterprise. This does not affect existing collaborations. (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder isCollaborationRestrictedToEnterprise(Boolean isCollaborationRestrictedToEnterprise) {
            this.isCollaborationRestrictedToEnterprise = isCollaborationRestrictedToEnterprise;
            return this;
        }
        
        /**
         * Set collections
         * @param collections An array of collections to make this folder a member of. Currently we only support the &#x60;favorites&#x60; collection.  To get the ID for a collection, use the [List all collections][1] endpoint.  Passing an empty array &#x60;[]&#x60; or &#x60;null&#x60; will remove the folder from all collections.  [1]: e://get-collections (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder collections(List<Reference2> collections) {
            this.collections = collections;
            return this;
        }
        
        /**
         * Set canNonOwnersViewCollaborators
         * @param canNonOwnersViewCollaborators Restricts collaborators who are not the owner of this folder from viewing other collaborations on this folder.  It also restricts non-owners from inviting new collaborators.  When setting this field to &#x60;false&#x60;, it is required to also set &#x60;can_non_owners_invite_collaborators&#x60; to &#x60;false&#x60; if it has not already been set. (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder canNonOwnersViewCollaborators(Boolean canNonOwnersViewCollaborators) {
            this.canNonOwnersViewCollaborators = canNonOwnersViewCollaborators;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set ifMatch
         * @param ifMatch Ensures this item hasn&#39;t recently changed before making changes.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since. (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder ifMatch(String ifMatch) {
            this.ifMatch = ifMatch;
            return this;
        }
        
        /**
         * Build call for updateFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a folder object for the updated folder  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields.  This call will return synchronously. This holds true even when moving folders with a large a large number of items in all of its descendants. For very large folders, this means the call could take minutes or hours to return. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FoldersUpdateFolderRequest foldersUpdateFolderRequest = buildBodyParams();
            return updateFolderCall(folderId, fields, ifMatch, foldersUpdateFolderRequest, _callback);
        }

        private FoldersUpdateFolderRequest buildBodyParams() {
            FoldersUpdateFolderRequest foldersUpdateFolderRequest = new FoldersUpdateFolderRequest();
            foldersUpdateFolderRequest.tags(this.tags);
            foldersUpdateFolderRequest.description(this.description);
            foldersUpdateFolderRequest.name(this.name);
            if (this.syncState != null)
            foldersUpdateFolderRequest.syncState(FoldersUpdateFolderRequest.SyncStateEnum.fromValue(this.syncState));
            foldersUpdateFolderRequest.canNonOwnersInvite(this.canNonOwnersInvite);
            foldersUpdateFolderRequest.parent(this.parent);
            foldersUpdateFolderRequest.sharedLink(this.sharedLink);
            foldersUpdateFolderRequest.folderUploadEmail(this.folderUploadEmail);
            foldersUpdateFolderRequest.isCollaborationRestrictedToEnterprise(this.isCollaborationRestrictedToEnterprise);
            foldersUpdateFolderRequest.collections(this.collections);
            foldersUpdateFolderRequest.canNonOwnersViewCollaborators(this.canNonOwnersViewCollaborators);
            return foldersUpdateFolderRequest;
        }

        /**
         * Execute updateFolder request
         * @return FolderFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a folder object for the updated folder  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields.  This call will return synchronously. This holds true even when moving folders with a large a large number of items in all of its descendants. For very large folders, this means the call could take minutes or hours to return. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FolderFull execute() throws ApiException {
            FoldersUpdateFolderRequest foldersUpdateFolderRequest = buildBodyParams();
            ApiResponse<FolderFull> localVarResp = updateFolderWithHttpInfo(folderId, fields, ifMatch, foldersUpdateFolderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFolder request with HTTP info returned
         * @return ApiResponse&lt;FolderFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a folder object for the updated folder  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields.  This call will return synchronously. This holds true even when moving folders with a large a large number of items in all of its descendants. For very large folders, this means the call could take minutes or hours to return. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FolderFull> executeWithHttpInfo() throws ApiException {
            FoldersUpdateFolderRequest foldersUpdateFolderRequest = buildBodyParams();
            return updateFolderWithHttpInfo(folderId, fields, ifMatch, foldersUpdateFolderRequest);
        }

        /**
         * Execute updateFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a folder object for the updated folder  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields.  This call will return synchronously. This holds true even when moving folders with a large a large number of items in all of its descendants. For very large folders, this means the call could take minutes or hours to return. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FolderFull> _callback) throws ApiException {
            FoldersUpdateFolderRequest foldersUpdateFolderRequest = buildBodyParams();
            return updateFolderAsync(folderId, fields, ifMatch, foldersUpdateFolderRequest, _callback);
        }
    }

    /**
     * Update folder
     * Updates a folder. This can be also be used to move the folder, create shared links, update collaborations, and more.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return UpdateFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a folder object for the updated folder  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields.  This call will return synchronously. This holds true even when moving folders with a large a large number of items in all of its descendants. For very large folders, this means the call could take minutes or hours to return. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFolderRequestBuilder updateFolder(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new UpdateFolderRequestBuilder(folderId);
    }
}
