/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FolderFull;
import com.konfigthis.client.model.SharedLinksFoldersAddLinkToFolderRequest;
import com.konfigthis.client.model.SharedLinksFoldersAddLinkToFolderRequestSharedLink;
import com.konfigthis.client.model.SharedLinksFoldersRemoveFromFolderRequest;
import com.konfigthis.client.model.SharedLinksFoldersUpdateFolderSharedLinkRequest;
import com.konfigthis.client.model.SharedLinksFoldersUpdateFolderSharedLinkRequestSharedLink;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SharedLinksFoldersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SharedLinksFoldersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SharedLinksFoldersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addLinkToFolderCall(String folderId, String fields, SharedLinksFoldersAddLinkToFolderRequest sharedLinksFoldersAddLinkToFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedLinksFoldersAddLinkToFolderRequest;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}#add_shared_link"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLinkToFolderValidateBeforeCall(String folderId, String fields, SharedLinksFoldersAddLinkToFolderRequest sharedLinksFoldersAddLinkToFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling addLinkToFolder(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling addLinkToFolder(Async)");
        }

        return addLinkToFolderCall(folderId, fields, sharedLinksFoldersAddLinkToFolderRequest, _callback);

    }


    private ApiResponse<FolderFull> addLinkToFolderWithHttpInfo(String folderId, String fields, SharedLinksFoldersAddLinkToFolderRequest sharedLinksFoldersAddLinkToFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = addLinkToFolderValidateBeforeCall(folderId, fields, sharedLinksFoldersAddLinkToFolderRequest, null);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addLinkToFolderAsync(String folderId, String fields, SharedLinksFoldersAddLinkToFolderRequest sharedLinksFoldersAddLinkToFolderRequest, final ApiCallback<FolderFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLinkToFolderValidateBeforeCall(folderId, fields, sharedLinksFoldersAddLinkToFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddLinkToFolderRequestBuilder {
        private final String folderId;
        private final String fields;
        private SharedLinksFoldersAddLinkToFolderRequestSharedLink sharedLink;

        private AddLinkToFolderRequestBuilder(String folderId, String fields) {
            this.folderId = folderId;
            this.fields = fields;
        }

        /**
         * Set sharedLink
         * @param sharedLink  (optional)
         * @return AddLinkToFolderRequestBuilder
         */
        public AddLinkToFolderRequestBuilder sharedLink(SharedLinksFoldersAddLinkToFolderRequestSharedLink sharedLink) {
            this.sharedLink = sharedLink;
            return this;
        }
        
        /**
         * Build call for addLinkToFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a folder with a new shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SharedLinksFoldersAddLinkToFolderRequest sharedLinksFoldersAddLinkToFolderRequest = buildBodyParams();
            return addLinkToFolderCall(folderId, fields, sharedLinksFoldersAddLinkToFolderRequest, _callback);
        }

        private SharedLinksFoldersAddLinkToFolderRequest buildBodyParams() {
            SharedLinksFoldersAddLinkToFolderRequest sharedLinksFoldersAddLinkToFolderRequest = new SharedLinksFoldersAddLinkToFolderRequest();
            sharedLinksFoldersAddLinkToFolderRequest.sharedLink(this.sharedLink);
            return sharedLinksFoldersAddLinkToFolderRequest;
        }

        /**
         * Execute addLinkToFolder request
         * @return FolderFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a folder with a new shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FolderFull execute() throws ApiException {
            SharedLinksFoldersAddLinkToFolderRequest sharedLinksFoldersAddLinkToFolderRequest = buildBodyParams();
            ApiResponse<FolderFull> localVarResp = addLinkToFolderWithHttpInfo(folderId, fields, sharedLinksFoldersAddLinkToFolderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addLinkToFolder request with HTTP info returned
         * @return ApiResponse&lt;FolderFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a folder with a new shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FolderFull> executeWithHttpInfo() throws ApiException {
            SharedLinksFoldersAddLinkToFolderRequest sharedLinksFoldersAddLinkToFolderRequest = buildBodyParams();
            return addLinkToFolderWithHttpInfo(folderId, fields, sharedLinksFoldersAddLinkToFolderRequest);
        }

        /**
         * Execute addLinkToFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a folder with a new shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FolderFull> _callback) throws ApiException {
            SharedLinksFoldersAddLinkToFolderRequest sharedLinksFoldersAddLinkToFolderRequest = buildBodyParams();
            return addLinkToFolderAsync(folderId, fields, sharedLinksFoldersAddLinkToFolderRequest, _callback);
        }
    }

    /**
     * Add shared link to folder
     * Adds a shared link to a folder.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @param fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item. (required)
     * @return AddLinkToFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the base representation of a folder with a new shared link attached. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public AddLinkToFolderRequestBuilder addLinkToFolder(String folderId, String fields) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        return new AddLinkToFolderRequestBuilder(folderId, fields);
    }
    private okhttp3.Call findFolderBySharedLinkCall(String boxapi, String ifNoneMatch, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shared_items#folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("if-none-match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (boxapi != null) {
            localVarHeaderParams.put("boxapi", localVarApiClient.parameterToString(boxapi));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findFolderBySharedLinkValidateBeforeCall(String boxapi, String ifNoneMatch, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'boxapi' is set
        if (boxapi == null) {
            throw new ApiException("Missing the required parameter 'boxapi' when calling findFolderBySharedLink(Async)");
        }

        return findFolderBySharedLinkCall(boxapi, ifNoneMatch, fields, _callback);

    }


    private ApiResponse<FolderFull> findFolderBySharedLinkWithHttpInfo(String boxapi, String ifNoneMatch, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = findFolderBySharedLinkValidateBeforeCall(boxapi, ifNoneMatch, fields, null);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findFolderBySharedLinkAsync(String boxapi, String ifNoneMatch, List<String> fields, final ApiCallback<FolderFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = findFolderBySharedLinkValidateBeforeCall(boxapi, ifNoneMatch, fields, _callback);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindFolderBySharedLinkRequestBuilder {
        private final String boxapi;
        private String ifNoneMatch;
        private List<String> fields;

        private FindFolderBySharedLinkRequestBuilder(String boxapi) {
            this.boxapi = boxapi;
        }

        /**
         * Set ifNoneMatch
         * @param ifNoneMatch Ensures an item is only returned if it has changed.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;304 Not Modified&#x60; if the item has not changed since. (optional)
         * @return FindFolderBySharedLinkRequestBuilder
         */
        public FindFolderBySharedLinkRequestBuilder ifNoneMatch(String ifNoneMatch) {
            this.ifNoneMatch = ifNoneMatch;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return FindFolderBySharedLinkRequestBuilder
         */
        public FindFolderBySharedLinkRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for findFolderBySharedLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a full folder resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findFolderBySharedLinkCall(boxapi, ifNoneMatch, fields, _callback);
        }


        /**
         * Execute findFolderBySharedLink request
         * @return FolderFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a full folder resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FolderFull execute() throws ApiException {
            ApiResponse<FolderFull> localVarResp = findFolderBySharedLinkWithHttpInfo(boxapi, ifNoneMatch, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findFolderBySharedLink request with HTTP info returned
         * @return ApiResponse&lt;FolderFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a full folder resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FolderFull> executeWithHttpInfo() throws ApiException {
            return findFolderBySharedLinkWithHttpInfo(boxapi, ifNoneMatch, fields);
        }

        /**
         * Execute findFolderBySharedLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a full folder resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FolderFull> _callback) throws ApiException {
            return findFolderBySharedLinkAsync(boxapi, ifNoneMatch, fields, _callback);
        }
    }

    /**
     * Find folder for shared link
     * Return the folder represented by a shared link.  A shared folder can be represented by a shared link, which can originate within the current enterprise or within another.  This endpoint allows an application to retrieve information about a shared folder when only given a shared link.
     * @param boxapi A header containing the shared link and optional password for the shared link.  The format for this header is as follows.  &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60; (required)
     * @return FindFolderBySharedLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a full folder resource if the shared link is valid and the user has access to it. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public FindFolderBySharedLinkRequestBuilder findFolderBySharedLink(String boxapi) throws IllegalArgumentException {
        if (boxapi == null) throw new IllegalArgumentException("\"boxapi\" is required but got null");
            

        return new FindFolderBySharedLinkRequestBuilder(boxapi);
    }
    private okhttp3.Call getSharedLinkForFolderCall(String folderId, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}#get_shared_link"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSharedLinkForFolderValidateBeforeCall(String folderId, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getSharedLinkForFolder(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling getSharedLinkForFolder(Async)");
        }

        return getSharedLinkForFolderCall(folderId, fields, _callback);

    }


    private ApiResponse<FolderFull> getSharedLinkForFolderWithHttpInfo(String folderId, String fields) throws ApiException {
        okhttp3.Call localVarCall = getSharedLinkForFolderValidateBeforeCall(folderId, fields, null);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSharedLinkForFolderAsync(String folderId, String fields, final ApiCallback<FolderFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSharedLinkForFolderValidateBeforeCall(folderId, fields, _callback);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSharedLinkForFolderRequestBuilder {
        private final String folderId;
        private final String fields;

        private GetSharedLinkForFolderRequestBuilder(String folderId, String fields) {
            this.folderId = folderId;
            this.fields = fields;
        }

        /**
         * Build call for getSharedLinkForFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a folder with the additional shared link information. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSharedLinkForFolderCall(folderId, fields, _callback);
        }


        /**
         * Execute getSharedLinkForFolder request
         * @return FolderFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a folder with the additional shared link information. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FolderFull execute() throws ApiException {
            ApiResponse<FolderFull> localVarResp = getSharedLinkForFolderWithHttpInfo(folderId, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSharedLinkForFolder request with HTTP info returned
         * @return ApiResponse&lt;FolderFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a folder with the additional shared link information. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FolderFull> executeWithHttpInfo() throws ApiException {
            return getSharedLinkForFolderWithHttpInfo(folderId, fields);
        }

        /**
         * Execute getSharedLinkForFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the base representation of a folder with the additional shared link information. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FolderFull> _callback) throws ApiException {
            return getSharedLinkForFolderAsync(folderId, fields, _callback);
        }
    }

    /**
     * Get shared link for folder
     * Gets the information for a shared link on a folder.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @param fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item. (required)
     * @return GetSharedLinkForFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the base representation of a folder with the additional shared link information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetSharedLinkForFolderRequestBuilder getSharedLinkForFolder(String folderId, String fields) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        return new GetSharedLinkForFolderRequestBuilder(folderId, fields);
    }
    private okhttp3.Call removeFromFolderCall(String folderId, String fields, SharedLinksFoldersRemoveFromFolderRequest sharedLinksFoldersRemoveFromFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedLinksFoldersRemoveFromFolderRequest;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}#remove_shared_link"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromFolderValidateBeforeCall(String folderId, String fields, SharedLinksFoldersRemoveFromFolderRequest sharedLinksFoldersRemoveFromFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling removeFromFolder(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling removeFromFolder(Async)");
        }

        return removeFromFolderCall(folderId, fields, sharedLinksFoldersRemoveFromFolderRequest, _callback);

    }


    private ApiResponse<FolderFull> removeFromFolderWithHttpInfo(String folderId, String fields, SharedLinksFoldersRemoveFromFolderRequest sharedLinksFoldersRemoveFromFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = removeFromFolderValidateBeforeCall(folderId, fields, sharedLinksFoldersRemoveFromFolderRequest, null);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFromFolderAsync(String folderId, String fields, SharedLinksFoldersRemoveFromFolderRequest sharedLinksFoldersRemoveFromFolderRequest, final ApiCallback<FolderFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromFolderValidateBeforeCall(folderId, fields, sharedLinksFoldersRemoveFromFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveFromFolderRequestBuilder {
        private final String folderId;
        private final String fields;
        private Object sharedLink;

        private RemoveFromFolderRequestBuilder(String folderId, String fields) {
            this.folderId = folderId;
            this.fields = fields;
        }

        /**
         * Set sharedLink
         * @param sharedLink By setting this value to &#x60;null&#x60;, the shared link is removed from the folder. (optional)
         * @return RemoveFromFolderRequestBuilder
         */
        public RemoveFromFolderRequestBuilder sharedLink(Object sharedLink) {
            this.sharedLink = sharedLink;
            return this;
        }
        
        /**
         * Build call for removeFromFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of a folder, with the shared link removed. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SharedLinksFoldersRemoveFromFolderRequest sharedLinksFoldersRemoveFromFolderRequest = buildBodyParams();
            return removeFromFolderCall(folderId, fields, sharedLinksFoldersRemoveFromFolderRequest, _callback);
        }

        private SharedLinksFoldersRemoveFromFolderRequest buildBodyParams() {
            SharedLinksFoldersRemoveFromFolderRequest sharedLinksFoldersRemoveFromFolderRequest = new SharedLinksFoldersRemoveFromFolderRequest();
            sharedLinksFoldersRemoveFromFolderRequest.sharedLink(this.sharedLink);
            return sharedLinksFoldersRemoveFromFolderRequest;
        }

        /**
         * Execute removeFromFolder request
         * @return FolderFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of a folder, with the shared link removed. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FolderFull execute() throws ApiException {
            SharedLinksFoldersRemoveFromFolderRequest sharedLinksFoldersRemoveFromFolderRequest = buildBodyParams();
            ApiResponse<FolderFull> localVarResp = removeFromFolderWithHttpInfo(folderId, fields, sharedLinksFoldersRemoveFromFolderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeFromFolder request with HTTP info returned
         * @return ApiResponse&lt;FolderFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of a folder, with the shared link removed. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FolderFull> executeWithHttpInfo() throws ApiException {
            SharedLinksFoldersRemoveFromFolderRequest sharedLinksFoldersRemoveFromFolderRequest = buildBodyParams();
            return removeFromFolderWithHttpInfo(folderId, fields, sharedLinksFoldersRemoveFromFolderRequest);
        }

        /**
         * Execute removeFromFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of a folder, with the shared link removed. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FolderFull> _callback) throws ApiException {
            SharedLinksFoldersRemoveFromFolderRequest sharedLinksFoldersRemoveFromFolderRequest = buildBodyParams();
            return removeFromFolderAsync(folderId, fields, sharedLinksFoldersRemoveFromFolderRequest, _callback);
        }
    }

    /**
     * Remove shared link from folder
     * Removes a shared link from a folder.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @param fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item. (required)
     * @return RemoveFromFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a basic representation of a folder, with the shared link removed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromFolderRequestBuilder removeFromFolder(String folderId, String fields) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        return new RemoveFromFolderRequestBuilder(folderId, fields);
    }
    private okhttp3.Call updateFolderSharedLinkCall(String folderId, String fields, SharedLinksFoldersUpdateFolderSharedLinkRequest sharedLinksFoldersUpdateFolderSharedLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedLinksFoldersUpdateFolderSharedLinkRequest;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}#update_shared_link"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFolderSharedLinkValidateBeforeCall(String folderId, String fields, SharedLinksFoldersUpdateFolderSharedLinkRequest sharedLinksFoldersUpdateFolderSharedLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling updateFolderSharedLink(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling updateFolderSharedLink(Async)");
        }

        return updateFolderSharedLinkCall(folderId, fields, sharedLinksFoldersUpdateFolderSharedLinkRequest, _callback);

    }


    private ApiResponse<FolderFull> updateFolderSharedLinkWithHttpInfo(String folderId, String fields, SharedLinksFoldersUpdateFolderSharedLinkRequest sharedLinksFoldersUpdateFolderSharedLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFolderSharedLinkValidateBeforeCall(folderId, fields, sharedLinksFoldersUpdateFolderSharedLinkRequest, null);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFolderSharedLinkAsync(String folderId, String fields, SharedLinksFoldersUpdateFolderSharedLinkRequest sharedLinksFoldersUpdateFolderSharedLinkRequest, final ApiCallback<FolderFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFolderSharedLinkValidateBeforeCall(folderId, fields, sharedLinksFoldersUpdateFolderSharedLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<FolderFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFolderSharedLinkRequestBuilder {
        private final String folderId;
        private final String fields;
        private SharedLinksFoldersUpdateFolderSharedLinkRequestSharedLink sharedLink;

        private UpdateFolderSharedLinkRequestBuilder(String folderId, String fields) {
            this.folderId = folderId;
            this.fields = fields;
        }

        /**
         * Set sharedLink
         * @param sharedLink  (optional)
         * @return UpdateFolderSharedLinkRequestBuilder
         */
        public UpdateFolderSharedLinkRequestBuilder sharedLink(SharedLinksFoldersUpdateFolderSharedLinkRequestSharedLink sharedLink) {
            this.sharedLink = sharedLink;
            return this;
        }
        
        /**
         * Build call for updateFolderSharedLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of the folder, with the updated shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SharedLinksFoldersUpdateFolderSharedLinkRequest sharedLinksFoldersUpdateFolderSharedLinkRequest = buildBodyParams();
            return updateFolderSharedLinkCall(folderId, fields, sharedLinksFoldersUpdateFolderSharedLinkRequest, _callback);
        }

        private SharedLinksFoldersUpdateFolderSharedLinkRequest buildBodyParams() {
            SharedLinksFoldersUpdateFolderSharedLinkRequest sharedLinksFoldersUpdateFolderSharedLinkRequest = new SharedLinksFoldersUpdateFolderSharedLinkRequest();
            sharedLinksFoldersUpdateFolderSharedLinkRequest.sharedLink(this.sharedLink);
            return sharedLinksFoldersUpdateFolderSharedLinkRequest;
        }

        /**
         * Execute updateFolderSharedLink request
         * @return FolderFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of the folder, with the updated shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FolderFull execute() throws ApiException {
            SharedLinksFoldersUpdateFolderSharedLinkRequest sharedLinksFoldersUpdateFolderSharedLinkRequest = buildBodyParams();
            ApiResponse<FolderFull> localVarResp = updateFolderSharedLinkWithHttpInfo(folderId, fields, sharedLinksFoldersUpdateFolderSharedLinkRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFolderSharedLink request with HTTP info returned
         * @return ApiResponse&lt;FolderFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of the folder, with the updated shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FolderFull> executeWithHttpInfo() throws ApiException {
            SharedLinksFoldersUpdateFolderSharedLinkRequest sharedLinksFoldersUpdateFolderSharedLinkRequest = buildBodyParams();
            return updateFolderSharedLinkWithHttpInfo(folderId, fields, sharedLinksFoldersUpdateFolderSharedLinkRequest);
        }

        /**
         * Execute updateFolderSharedLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a basic representation of the folder, with the updated shared link attached. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FolderFull> _callback) throws ApiException {
            SharedLinksFoldersUpdateFolderSharedLinkRequest sharedLinksFoldersUpdateFolderSharedLinkRequest = buildBodyParams();
            return updateFolderSharedLinkAsync(folderId, fields, sharedLinksFoldersUpdateFolderSharedLinkRequest, _callback);
        }
    }

    /**
     * Update shared link on folder
     * Updates a shared link on a folder.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @param fields Explicitly request the &#x60;shared_link&#x60; fields to be returned for this item. (required)
     * @return UpdateFolderSharedLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a basic representation of the folder, with the updated shared link attached. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFolderSharedLinkRequestBuilder updateFolderSharedLink(String folderId, String fields) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
            

        return new UpdateFolderSharedLinkRequestBuilder(folderId, fields);
    }
}
