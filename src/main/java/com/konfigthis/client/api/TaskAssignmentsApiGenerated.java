/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.TaskAssignment;
import com.konfigthis.client.model.TaskAssignments;
import com.konfigthis.client.model.TaskAssignmentsAssignMultipleUsersRequest;
import com.konfigthis.client.model.TaskAssignmentsAssignMultipleUsersRequestAssignTo;
import com.konfigthis.client.model.TaskAssignmentsAssignMultipleUsersRequestTask;
import com.konfigthis.client.model.TaskAssignmentsUpdateStateAssignedToUserRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TaskAssignmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskAssignmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TaskAssignmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignMultipleUsersCall(TaskAssignmentsAssignMultipleUsersRequest taskAssignmentsAssignMultipleUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskAssignmentsAssignMultipleUsersRequest;

        // create path and map variables
        String localVarPath = "/task_assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignMultipleUsersValidateBeforeCall(TaskAssignmentsAssignMultipleUsersRequest taskAssignmentsAssignMultipleUsersRequest, final ApiCallback _callback) throws ApiException {
        return assignMultipleUsersCall(taskAssignmentsAssignMultipleUsersRequest, _callback);

    }


    private ApiResponse<TaskAssignment> assignMultipleUsersWithHttpInfo(TaskAssignmentsAssignMultipleUsersRequest taskAssignmentsAssignMultipleUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = assignMultipleUsersValidateBeforeCall(taskAssignmentsAssignMultipleUsersRequest, null);
        Type localVarReturnType = new TypeToken<TaskAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignMultipleUsersAsync(TaskAssignmentsAssignMultipleUsersRequest taskAssignmentsAssignMultipleUsersRequest, final ApiCallback<TaskAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignMultipleUsersValidateBeforeCall(taskAssignmentsAssignMultipleUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<TaskAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignMultipleUsersRequestBuilder {
        private final TaskAssignmentsAssignMultipleUsersRequestTask task;
        private final TaskAssignmentsAssignMultipleUsersRequestAssignTo assignTo;

        private AssignMultipleUsersRequestBuilder(TaskAssignmentsAssignMultipleUsersRequestTask task, TaskAssignmentsAssignMultipleUsersRequestAssignTo assignTo) {
            this.task = task;
            this.assignTo = assignTo;
        }

        /**
         * Build call for assignMultipleUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new task assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TaskAssignmentsAssignMultipleUsersRequest taskAssignmentsAssignMultipleUsersRequest = buildBodyParams();
            return assignMultipleUsersCall(taskAssignmentsAssignMultipleUsersRequest, _callback);
        }

        private TaskAssignmentsAssignMultipleUsersRequest buildBodyParams() {
            TaskAssignmentsAssignMultipleUsersRequest taskAssignmentsAssignMultipleUsersRequest = new TaskAssignmentsAssignMultipleUsersRequest();
            taskAssignmentsAssignMultipleUsersRequest.task(this.task);
            taskAssignmentsAssignMultipleUsersRequest.assignTo(this.assignTo);
            return taskAssignmentsAssignMultipleUsersRequest;
        }

        /**
         * Execute assignMultipleUsers request
         * @return TaskAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new task assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public TaskAssignment execute() throws ApiException {
            TaskAssignmentsAssignMultipleUsersRequest taskAssignmentsAssignMultipleUsersRequest = buildBodyParams();
            ApiResponse<TaskAssignment> localVarResp = assignMultipleUsersWithHttpInfo(taskAssignmentsAssignMultipleUsersRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignMultipleUsers request with HTTP info returned
         * @return ApiResponse&lt;TaskAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new task assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskAssignment> executeWithHttpInfo() throws ApiException {
            TaskAssignmentsAssignMultipleUsersRequest taskAssignmentsAssignMultipleUsersRequest = buildBodyParams();
            return assignMultipleUsersWithHttpInfo(taskAssignmentsAssignMultipleUsersRequest);
        }

        /**
         * Execute assignMultipleUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new task assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskAssignment> _callback) throws ApiException {
            TaskAssignmentsAssignMultipleUsersRequest taskAssignmentsAssignMultipleUsersRequest = buildBodyParams();
            return assignMultipleUsersAsync(taskAssignmentsAssignMultipleUsersRequest, _callback);
        }
    }

    /**
     * Assign task
     * Assigns a task to a user.  A task can be assigned to more than one user by creating multiple assignments.
     * @return AssignMultipleUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new task assignment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public AssignMultipleUsersRequestBuilder assignMultipleUsers(TaskAssignmentsAssignMultipleUsersRequestTask task, TaskAssignmentsAssignMultipleUsersRequestAssignTo assignTo) throws IllegalArgumentException {
        if (task == null) throw new IllegalArgumentException("\"task\" is required but got null");
        if (assignTo == null) throw new IllegalArgumentException("\"assignTo\" is required but got null");
        return new AssignMultipleUsersRequestBuilder(task, assignTo);
    }
    private okhttp3.Call deleteSpecificAssignmentCall(String taskAssignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_assignments/{task_assignment_id}"
            .replace("{" + "task_assignment_id" + "}", localVarApiClient.escapeString(taskAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpecificAssignmentValidateBeforeCall(String taskAssignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskAssignmentId' is set
        if (taskAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'taskAssignmentId' when calling deleteSpecificAssignment(Async)");
        }

        return deleteSpecificAssignmentCall(taskAssignmentId, _callback);

    }


    private ApiResponse<Void> deleteSpecificAssignmentWithHttpInfo(String taskAssignmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteSpecificAssignmentValidateBeforeCall(taskAssignmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSpecificAssignmentAsync(String taskAssignmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpecificAssignmentValidateBeforeCall(taskAssignmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSpecificAssignmentRequestBuilder {
        private final String taskAssignmentId;

        private DeleteSpecificAssignmentRequestBuilder(String taskAssignmentId) {
            this.taskAssignmentId = taskAssignmentId;
        }

        /**
         * Build call for deleteSpecificAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the task assignment was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSpecificAssignmentCall(taskAssignmentId, _callback);
        }


        /**
         * Execute deleteSpecificAssignment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the task assignment was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSpecificAssignmentWithHttpInfo(taskAssignmentId);
        }

        /**
         * Execute deleteSpecificAssignment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the task assignment was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSpecificAssignmentWithHttpInfo(taskAssignmentId);
        }

        /**
         * Execute deleteSpecificAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the task assignment was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSpecificAssignmentAsync(taskAssignmentId, _callback);
        }
    }

    /**
     * Unassign task
     * Deletes a specific task assignment.
     * @param taskAssignmentId The ID of the task assignment. (required)
     * @return DeleteSpecificAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the task assignment was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSpecificAssignmentRequestBuilder deleteSpecificAssignment(String taskAssignmentId) throws IllegalArgumentException {
        if (taskAssignmentId == null) throw new IllegalArgumentException("\"taskAssignmentId\" is required but got null");
            

        return new DeleteSpecificAssignmentRequestBuilder(taskAssignmentId);
    }
    private okhttp3.Call getTaskAssignmentInfoCall(String taskAssignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_assignments/{task_assignment_id}"
            .replace("{" + "task_assignment_id" + "}", localVarApiClient.escapeString(taskAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskAssignmentInfoValidateBeforeCall(String taskAssignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskAssignmentId' is set
        if (taskAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'taskAssignmentId' when calling getTaskAssignmentInfo(Async)");
        }

        return getTaskAssignmentInfoCall(taskAssignmentId, _callback);

    }


    private ApiResponse<TaskAssignment> getTaskAssignmentInfoWithHttpInfo(String taskAssignmentId) throws ApiException {
        okhttp3.Call localVarCall = getTaskAssignmentInfoValidateBeforeCall(taskAssignmentId, null);
        Type localVarReturnType = new TypeToken<TaskAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaskAssignmentInfoAsync(String taskAssignmentId, final ApiCallback<TaskAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskAssignmentInfoValidateBeforeCall(taskAssignmentId, _callback);
        Type localVarReturnType = new TypeToken<TaskAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaskAssignmentInfoRequestBuilder {
        private final String taskAssignmentId;

        private GetTaskAssignmentInfoRequestBuilder(String taskAssignmentId) {
            this.taskAssignmentId = taskAssignmentId;
        }

        /**
         * Build call for getTaskAssignmentInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a task assignment, specifying who the task has been assigned to and by whom. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaskAssignmentInfoCall(taskAssignmentId, _callback);
        }


        /**
         * Execute getTaskAssignmentInfo request
         * @return TaskAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a task assignment, specifying who the task has been assigned to and by whom. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public TaskAssignment execute() throws ApiException {
            ApiResponse<TaskAssignment> localVarResp = getTaskAssignmentInfoWithHttpInfo(taskAssignmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaskAssignmentInfo request with HTTP info returned
         * @return ApiResponse&lt;TaskAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a task assignment, specifying who the task has been assigned to and by whom. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskAssignment> executeWithHttpInfo() throws ApiException {
            return getTaskAssignmentInfoWithHttpInfo(taskAssignmentId);
        }

        /**
         * Execute getTaskAssignmentInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a task assignment, specifying who the task has been assigned to and by whom. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskAssignment> _callback) throws ApiException {
            return getTaskAssignmentInfoAsync(taskAssignmentId, _callback);
        }
    }

    /**
     * Get task assignment
     * Retrieves information about a task assignment.
     * @param taskAssignmentId The ID of the task assignment. (required)
     * @return GetTaskAssignmentInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a task assignment, specifying who the task has been assigned to and by whom. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskAssignmentInfoRequestBuilder getTaskAssignmentInfo(String taskAssignmentId) throws IllegalArgumentException {
        if (taskAssignmentId == null) throw new IllegalArgumentException("\"taskAssignmentId\" is required but got null");
            

        return new GetTaskAssignmentInfoRequestBuilder(taskAssignmentId);
    }
    private okhttp3.Call listForTaskCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_id}/assignments"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listForTaskValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling listForTask(Async)");
        }

        return listForTaskCall(taskId, _callback);

    }


    private ApiResponse<TaskAssignments> listForTaskWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = listForTaskValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<TaskAssignments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listForTaskAsync(String taskId, final ApiCallback<TaskAssignments> _callback) throws ApiException {

        okhttp3.Call localVarCall = listForTaskValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<TaskAssignments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListForTaskRequestBuilder {
        private final String taskId;

        private ListForTaskRequestBuilder(String taskId) {
            this.taskId = taskId;
        }

        /**
         * Build call for listForTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of task assignment defining what task on a file has been assigned to which users and by who. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listForTaskCall(taskId, _callback);
        }


        /**
         * Execute listForTask request
         * @return TaskAssignments
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of task assignment defining what task on a file has been assigned to which users and by who. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public TaskAssignments execute() throws ApiException {
            ApiResponse<TaskAssignments> localVarResp = listForTaskWithHttpInfo(taskId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listForTask request with HTTP info returned
         * @return ApiResponse&lt;TaskAssignments&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of task assignment defining what task on a file has been assigned to which users and by who. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskAssignments> executeWithHttpInfo() throws ApiException {
            return listForTaskWithHttpInfo(taskId);
        }

        /**
         * Execute listForTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of task assignment defining what task on a file has been assigned to which users and by who. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskAssignments> _callback) throws ApiException {
            return listForTaskAsync(taskId, _callback);
        }
    }

    /**
     * List task assignments
     * Lists all of the assignments for a given task.
     * @param taskId The ID of the task. (required)
     * @return ListForTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of task assignment defining what task on a file has been assigned to which users and by who. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListForTaskRequestBuilder listForTask(String taskId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new ListForTaskRequestBuilder(taskId);
    }
    private okhttp3.Call updateStateAssignedToUserCall(String taskAssignmentId, TaskAssignmentsUpdateStateAssignedToUserRequest taskAssignmentsUpdateStateAssignedToUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskAssignmentsUpdateStateAssignedToUserRequest;

        // create path and map variables
        String localVarPath = "/task_assignments/{task_assignment_id}"
            .replace("{" + "task_assignment_id" + "}", localVarApiClient.escapeString(taskAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStateAssignedToUserValidateBeforeCall(String taskAssignmentId, TaskAssignmentsUpdateStateAssignedToUserRequest taskAssignmentsUpdateStateAssignedToUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskAssignmentId' is set
        if (taskAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'taskAssignmentId' when calling updateStateAssignedToUser(Async)");
        }

        return updateStateAssignedToUserCall(taskAssignmentId, taskAssignmentsUpdateStateAssignedToUserRequest, _callback);

    }


    private ApiResponse<TaskAssignment> updateStateAssignedToUserWithHttpInfo(String taskAssignmentId, TaskAssignmentsUpdateStateAssignedToUserRequest taskAssignmentsUpdateStateAssignedToUserRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStateAssignedToUserValidateBeforeCall(taskAssignmentId, taskAssignmentsUpdateStateAssignedToUserRequest, null);
        Type localVarReturnType = new TypeToken<TaskAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStateAssignedToUserAsync(String taskAssignmentId, TaskAssignmentsUpdateStateAssignedToUserRequest taskAssignmentsUpdateStateAssignedToUserRequest, final ApiCallback<TaskAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStateAssignedToUserValidateBeforeCall(taskAssignmentId, taskAssignmentsUpdateStateAssignedToUserRequest, _callback);
        Type localVarReturnType = new TypeToken<TaskAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateStateAssignedToUserRequestBuilder {
        private final String taskAssignmentId;
        private String message;
        private String resolutionState;

        private UpdateStateAssignedToUserRequestBuilder(String taskAssignmentId) {
            this.taskAssignmentId = taskAssignmentId;
        }

        /**
         * Set message
         * @param message An optional message by the assignee that can be added to the task. (optional)
         * @return UpdateStateAssignedToUserRequestBuilder
         */
        public UpdateStateAssignedToUserRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set resolutionState
         * @param resolutionState The state of the task assigned to the user.  * For a task with an &#x60;action&#x60; value of &#x60;complete&#x60; this can be &#x60;incomplete&#x60; or &#x60;completed&#x60;. * For a task with an &#x60;action&#x60; of &#x60;review&#x60; this can be &#x60;incomplete&#x60;, &#x60;approved&#x60;, or &#x60;rejected&#x60;. (optional)
         * @return UpdateStateAssignedToUserRequestBuilder
         */
        public UpdateStateAssignedToUserRequestBuilder resolutionState(String resolutionState) {
            this.resolutionState = resolutionState;
            return this;
        }
        
        /**
         * Build call for updateStateAssignedToUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated task assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TaskAssignmentsUpdateStateAssignedToUserRequest taskAssignmentsUpdateStateAssignedToUserRequest = buildBodyParams();
            return updateStateAssignedToUserCall(taskAssignmentId, taskAssignmentsUpdateStateAssignedToUserRequest, _callback);
        }

        private TaskAssignmentsUpdateStateAssignedToUserRequest buildBodyParams() {
            TaskAssignmentsUpdateStateAssignedToUserRequest taskAssignmentsUpdateStateAssignedToUserRequest = new TaskAssignmentsUpdateStateAssignedToUserRequest();
            taskAssignmentsUpdateStateAssignedToUserRequest.message(this.message);
            if (this.resolutionState != null)
            taskAssignmentsUpdateStateAssignedToUserRequest.resolutionState(TaskAssignmentsUpdateStateAssignedToUserRequest.ResolutionStateEnum.fromValue(this.resolutionState));
            return taskAssignmentsUpdateStateAssignedToUserRequest;
        }

        /**
         * Execute updateStateAssignedToUser request
         * @return TaskAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated task assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public TaskAssignment execute() throws ApiException {
            TaskAssignmentsUpdateStateAssignedToUserRequest taskAssignmentsUpdateStateAssignedToUserRequest = buildBodyParams();
            ApiResponse<TaskAssignment> localVarResp = updateStateAssignedToUserWithHttpInfo(taskAssignmentId, taskAssignmentsUpdateStateAssignedToUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateStateAssignedToUser request with HTTP info returned
         * @return ApiResponse&lt;TaskAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated task assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskAssignment> executeWithHttpInfo() throws ApiException {
            TaskAssignmentsUpdateStateAssignedToUserRequest taskAssignmentsUpdateStateAssignedToUserRequest = buildBodyParams();
            return updateStateAssignedToUserWithHttpInfo(taskAssignmentId, taskAssignmentsUpdateStateAssignedToUserRequest);
        }

        /**
         * Execute updateStateAssignedToUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated task assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskAssignment> _callback) throws ApiException {
            TaskAssignmentsUpdateStateAssignedToUserRequest taskAssignmentsUpdateStateAssignedToUserRequest = buildBodyParams();
            return updateStateAssignedToUserAsync(taskAssignmentId, taskAssignmentsUpdateStateAssignedToUserRequest, _callback);
        }
    }

    /**
     * Update task assignment
     * Updates a task assignment. This endpoint can be used to update the state of a task assigned to a user.
     * @param taskAssignmentId The ID of the task assignment. (required)
     * @return UpdateStateAssignedToUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated task assignment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStateAssignedToUserRequestBuilder updateStateAssignedToUser(String taskAssignmentId) throws IllegalArgumentException {
        if (taskAssignmentId == null) throw new IllegalArgumentException("\"taskAssignmentId\" is required but got null");
            

        return new UpdateStateAssignedToUserRequestBuilder(taskAssignmentId);
    }
}
