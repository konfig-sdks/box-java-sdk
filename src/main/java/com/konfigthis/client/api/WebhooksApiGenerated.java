/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.PostWebhooksRequest;
import com.konfigthis.client.model.PostWebhooksRequestTarget;
import com.konfigthis.client.model.Webhook;
import com.konfigthis.client.model.Webhooks;
import com.konfigthis.client.model.WebhooksUpdateWebhookRequest;
import com.konfigthis.client.model.WebhooksUpdateWebhookRequestTarget;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebhooksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getSpecificWebhookCall(String webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhook_id}"
            .replace("{" + "webhook_id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificWebhookValidateBeforeCall(String webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling getSpecificWebhook(Async)");
        }

        return getSpecificWebhookCall(webhookId, _callback);

    }


    private ApiResponse<Webhook> getSpecificWebhookWithHttpInfo(String webhookId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificWebhookValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificWebhookAsync(String webhookId, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificWebhookValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificWebhookRequestBuilder {
        private final String webhookId;

        private GetSpecificWebhookRequestBuilder(String webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Build call for getSpecificWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a webhook object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificWebhookCall(webhookId, _callback);
        }


        /**
         * Execute getSpecificWebhook request
         * @return Webhook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a webhook object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Webhook execute() throws ApiException {
            ApiResponse<Webhook> localVarResp = getSpecificWebhookWithHttpInfo(webhookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificWebhook request with HTTP info returned
         * @return ApiResponse&lt;Webhook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a webhook object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Webhook> executeWithHttpInfo() throws ApiException {
            return getSpecificWebhookWithHttpInfo(webhookId);
        }

        /**
         * Execute getSpecificWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a webhook object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Webhook> _callback) throws ApiException {
            return getSpecificWebhookAsync(webhookId, _callback);
        }
    }

    /**
     * Get webhook
     * Retrieves a specific webhook
     * @param webhookId The ID of the webhook. (required)
     * @return GetSpecificWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a webhook object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificWebhookRequestBuilder getSpecificWebhook(String webhookId) throws IllegalArgumentException {
        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
            

        return new GetSpecificWebhookRequestBuilder(webhookId);
    }
    private okhttp3.Call removeCall(String webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhook_id}"
            .replace("{" + "webhook_id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeValidateBeforeCall(String webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling remove(Async)");
        }

        return removeCall(webhookId, _callback);

    }


    private ApiResponse<Void> removeWithHttpInfo(String webhookId) throws ApiException {
        okhttp3.Call localVarCall = removeValidateBeforeCall(webhookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAsync(String webhookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeValidateBeforeCall(webhookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveRequestBuilder {
        private final String webhookId;

        private RemoveRequestBuilder(String webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Build call for remove
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> An empty response will be returned when the webhook was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCall(webhookId, _callback);
        }


        /**
         * Execute remove request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> An empty response will be returned when the webhook was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeWithHttpInfo(webhookId);
        }

        /**
         * Execute remove request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> An empty response will be returned when the webhook was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeWithHttpInfo(webhookId);
        }

        /**
         * Execute remove request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> An empty response will be returned when the webhook was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAsync(webhookId, _callback);
        }
    }

    /**
     * Remove webhook
     * Deletes a webhook.
     * @param webhookId The ID of the webhook. (required)
     * @return RemoveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response will be returned when the webhook was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveRequestBuilder remove(String webhookId) throws IllegalArgumentException {
        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
            

        return new RemoveRequestBuilder(webhookId);
    }
    private okhttp3.Call updateWebhookCall(String webhookId, WebhooksUpdateWebhookRequest webhooksUpdateWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksUpdateWebhookRequest;

        // create path and map variables
        String localVarPath = "/webhooks/{webhook_id}"
            .replace("{" + "webhook_id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebhookValidateBeforeCall(String webhookId, WebhooksUpdateWebhookRequest webhooksUpdateWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling updateWebhook(Async)");
        }

        return updateWebhookCall(webhookId, webhooksUpdateWebhookRequest, _callback);

    }


    private ApiResponse<Webhook> updateWebhookWithHttpInfo(String webhookId, WebhooksUpdateWebhookRequest webhooksUpdateWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(webhookId, webhooksUpdateWebhookRequest, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWebhookAsync(String webhookId, WebhooksUpdateWebhookRequest webhooksUpdateWebhookRequest, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(webhookId, webhooksUpdateWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWebhookRequestBuilder {
        private final String webhookId;
        private WebhooksUpdateWebhookRequestTarget target;
        private String address;
        private List<String> triggers;

        private UpdateWebhookRequestBuilder(String webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Set target
         * @param target  (optional)
         * @return UpdateWebhookRequestBuilder
         */
        public UpdateWebhookRequestBuilder target(WebhooksUpdateWebhookRequestTarget target) {
            this.target = target;
            return this;
        }
        
        /**
         * Set address
         * @param address The URL that is notified by this webhook (optional)
         * @return UpdateWebhookRequestBuilder
         */
        public UpdateWebhookRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set triggers
         * @param triggers An array of event names that this webhook is to be triggered for (optional)
         * @return UpdateWebhookRequestBuilder
         */
        public UpdateWebhookRequestBuilder triggers(List<String> triggers) {
            this.triggers = triggers;
            return this;
        }
        
        /**
         * Build call for updateWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the new webhook object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksUpdateWebhookRequest webhooksUpdateWebhookRequest = buildBodyParams();
            return updateWebhookCall(webhookId, webhooksUpdateWebhookRequest, _callback);
        }

        private WebhooksUpdateWebhookRequest buildBodyParams() {
            WebhooksUpdateWebhookRequest webhooksUpdateWebhookRequest = new WebhooksUpdateWebhookRequest();
            webhooksUpdateWebhookRequest.target(this.target);
            webhooksUpdateWebhookRequest.address(this.address);
            if (this.triggers != null)
            webhooksUpdateWebhookRequest.triggers(WebhooksUpdateWebhookRequest.TriggersEnum.fromValue(this.triggers));
            return webhooksUpdateWebhookRequest;
        }

        /**
         * Execute updateWebhook request
         * @return Webhook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the new webhook object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Webhook execute() throws ApiException {
            WebhooksUpdateWebhookRequest webhooksUpdateWebhookRequest = buildBodyParams();
            ApiResponse<Webhook> localVarResp = updateWebhookWithHttpInfo(webhookId, webhooksUpdateWebhookRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWebhook request with HTTP info returned
         * @return ApiResponse&lt;Webhook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the new webhook object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Webhook> executeWithHttpInfo() throws ApiException {
            WebhooksUpdateWebhookRequest webhooksUpdateWebhookRequest = buildBodyParams();
            return updateWebhookWithHttpInfo(webhookId, webhooksUpdateWebhookRequest);
        }

        /**
         * Execute updateWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the new webhook object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Webhook> _callback) throws ApiException {
            WebhooksUpdateWebhookRequest webhooksUpdateWebhookRequest = buildBodyParams();
            return updateWebhookAsync(webhookId, webhooksUpdateWebhookRequest, _callback);
        }
    }

    /**
     * Update webhook
     * Updates a webhook.
     * @param webhookId The ID of the webhook. (required)
     * @return UpdateWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the new webhook object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWebhookRequestBuilder updateWebhook(String webhookId) throws IllegalArgumentException {
        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
            

        return new UpdateWebhookRequestBuilder(webhookId);
    }
    private okhttp3.Call webhooksCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksValidateBeforeCall(String marker, Long limit, final ApiCallback _callback) throws ApiException {
        return webhooksCall(marker, limit, _callback);

    }


    private ApiResponse<Webhooks> webhooksWithHttpInfo(String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = webhooksValidateBeforeCall(marker, limit, null);
        Type localVarReturnType = new TypeToken<Webhooks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call webhooksAsync(String marker, Long limit, final ApiCallback<Webhooks> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksValidateBeforeCall(marker, limit, _callback);
        Type localVarReturnType = new TypeToken<Webhooks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class WebhooksRequestBuilder {
        private String marker;
        private Long limit;

        private WebhooksRequestBuilder() {
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return WebhooksRequestBuilder
         */
        public WebhooksRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return WebhooksRequestBuilder
         */
        public WebhooksRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for webhooks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of webhooks. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return webhooksCall(marker, limit, _callback);
        }


        /**
         * Execute webhooks request
         * @return Webhooks
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of webhooks. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Webhooks execute() throws ApiException {
            ApiResponse<Webhooks> localVarResp = webhooksWithHttpInfo(marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute webhooks request with HTTP info returned
         * @return ApiResponse&lt;Webhooks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of webhooks. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Webhooks> executeWithHttpInfo() throws ApiException {
            return webhooksWithHttpInfo(marker, limit);
        }

        /**
         * Execute webhooks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of webhooks. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Webhooks> _callback) throws ApiException {
            return webhooksAsync(marker, limit, _callback);
        }
    }

    /**
     * List all webhooks
     * Returns all defined webhooks for the requesting application.  This API only returns webhooks that are applied to files or folders that are owned by the authenticated user. This means that an admin can not see webhooks created by a service account unless the admin has access to those folders, and vice versa.
     * @return WebhooksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of webhooks. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public WebhooksRequestBuilder webhooks() throws IllegalArgumentException {
        return new WebhooksRequestBuilder();
    }
    private okhttp3.Call webhooks_0Call(PostWebhooksRequest postWebhooksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postWebhooksRequest;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooks_0ValidateBeforeCall(PostWebhooksRequest postWebhooksRequest, final ApiCallback _callback) throws ApiException {
        return webhooks_0Call(postWebhooksRequest, _callback);

    }


    private ApiResponse<Webhook> webhooks_0WithHttpInfo(PostWebhooksRequest postWebhooksRequest) throws ApiException {
        okhttp3.Call localVarCall = webhooks_0ValidateBeforeCall(postWebhooksRequest, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call webhooks_0Async(PostWebhooksRequest postWebhooksRequest, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooks_0ValidateBeforeCall(postWebhooksRequest, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Webhooks0RequestBuilder {
        private final PostWebhooksRequestTarget target;
        private final String address;
        private final List<String> triggers;

        private Webhooks0RequestBuilder(PostWebhooksRequestTarget target, String address, List<String> triggers) {
            this.target = target;
            this.address = address;
            this.triggers = triggers;
        }

        /**
         * Build call for webhooks_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the new webhook object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostWebhooksRequest postWebhooksRequest = buildBodyParams();
            return webhooks_0Call(postWebhooksRequest, _callback);
        }

        private PostWebhooksRequest buildBodyParams() {
            PostWebhooksRequest postWebhooksRequest = new PostWebhooksRequest();
            postWebhooksRequest.target(this.target);
            postWebhooksRequest.address(this.address);
            if (this.triggers != null)
            postWebhooksRequest.triggers(PostWebhooksRequest.TriggersEnum.fromValue(this.triggers));
            return postWebhooksRequest;
        }

        /**
         * Execute webhooks_0 request
         * @return Webhook
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the new webhook object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Webhook execute() throws ApiException {
            PostWebhooksRequest postWebhooksRequest = buildBodyParams();
            ApiResponse<Webhook> localVarResp = webhooks_0WithHttpInfo(postWebhooksRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute webhooks_0 request with HTTP info returned
         * @return ApiResponse&lt;Webhook&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the new webhook object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Webhook> executeWithHttpInfo() throws ApiException {
            PostWebhooksRequest postWebhooksRequest = buildBodyParams();
            return webhooks_0WithHttpInfo(postWebhooksRequest);
        }

        /**
         * Execute webhooks_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the new webhook object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Webhook> _callback) throws ApiException {
            PostWebhooksRequest postWebhooksRequest = buildBodyParams();
            return webhooks_0Async(postWebhooksRequest, _callback);
        }
    }

    /**
     * Create webhook
     * Creates a webhook.
     * @return Webhooks0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the new webhook object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public Webhooks0RequestBuilder webhooks_0(PostWebhooksRequestTarget target, String address, List<String> triggers) throws IllegalArgumentException {
        if (target == null) throw new IllegalArgumentException("\"target\" is required but got null");
        if (address == null) throw new IllegalArgumentException("\"address\" is required but got null");
            

        if (triggers == null) throw new IllegalArgumentException("\"triggers\" is required but got null");
        return new Webhooks0RequestBuilder(target, address, triggers);
    }
}
