/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FileVersionLegalHolds;
import com.konfigthis.client.model.LegalHoldPolicyAssignment;
import com.konfigthis.client.model.LegalHoldPolicyAssignments;
import com.konfigthis.client.model.LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest;
import com.konfigthis.client.model.LegalHoldPolicyAssignmentsAssignFileLegalHoldRequestAssignTo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LegalHoldPolicyAssignmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LegalHoldPolicyAssignmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LegalHoldPolicyAssignmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignFileLegalHoldCall(LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest legalHoldPolicyAssignmentsAssignFileLegalHoldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = legalHoldPolicyAssignmentsAssignFileLegalHoldRequest;

        // create path and map variables
        String localVarPath = "/legal_hold_policy_assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignFileLegalHoldValidateBeforeCall(LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest legalHoldPolicyAssignmentsAssignFileLegalHoldRequest, final ApiCallback _callback) throws ApiException {
        return assignFileLegalHoldCall(legalHoldPolicyAssignmentsAssignFileLegalHoldRequest, _callback);

    }


    private ApiResponse<LegalHoldPolicyAssignment> assignFileLegalHoldWithHttpInfo(LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest legalHoldPolicyAssignmentsAssignFileLegalHoldRequest) throws ApiException {
        okhttp3.Call localVarCall = assignFileLegalHoldValidateBeforeCall(legalHoldPolicyAssignmentsAssignFileLegalHoldRequest, null);
        Type localVarReturnType = new TypeToken<LegalHoldPolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignFileLegalHoldAsync(LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest legalHoldPolicyAssignmentsAssignFileLegalHoldRequest, final ApiCallback<LegalHoldPolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignFileLegalHoldValidateBeforeCall(legalHoldPolicyAssignmentsAssignFileLegalHoldRequest, _callback);
        Type localVarReturnType = new TypeToken<LegalHoldPolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignFileLegalHoldRequestBuilder {
        private final String policyId;
        private final LegalHoldPolicyAssignmentsAssignFileLegalHoldRequestAssignTo assignTo;

        private AssignFileLegalHoldRequestBuilder(String policyId, LegalHoldPolicyAssignmentsAssignFileLegalHoldRequestAssignTo assignTo) {
            this.policyId = policyId;
            this.assignTo = assignTo;
        }

        /**
         * Build call for assignFileLegalHold
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new legal hold policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest legalHoldPolicyAssignmentsAssignFileLegalHoldRequest = buildBodyParams();
            return assignFileLegalHoldCall(legalHoldPolicyAssignmentsAssignFileLegalHoldRequest, _callback);
        }

        private LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest buildBodyParams() {
            LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest legalHoldPolicyAssignmentsAssignFileLegalHoldRequest = new LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest();
            legalHoldPolicyAssignmentsAssignFileLegalHoldRequest.policyId(this.policyId);
            legalHoldPolicyAssignmentsAssignFileLegalHoldRequest.assignTo(this.assignTo);
            return legalHoldPolicyAssignmentsAssignFileLegalHoldRequest;
        }

        /**
         * Execute assignFileLegalHold request
         * @return LegalHoldPolicyAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new legal hold policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public LegalHoldPolicyAssignment execute() throws ApiException {
            LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest legalHoldPolicyAssignmentsAssignFileLegalHoldRequest = buildBodyParams();
            ApiResponse<LegalHoldPolicyAssignment> localVarResp = assignFileLegalHoldWithHttpInfo(legalHoldPolicyAssignmentsAssignFileLegalHoldRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignFileLegalHold request with HTTP info returned
         * @return ApiResponse&lt;LegalHoldPolicyAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new legal hold policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LegalHoldPolicyAssignment> executeWithHttpInfo() throws ApiException {
            LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest legalHoldPolicyAssignmentsAssignFileLegalHoldRequest = buildBodyParams();
            return assignFileLegalHoldWithHttpInfo(legalHoldPolicyAssignmentsAssignFileLegalHoldRequest);
        }

        /**
         * Execute assignFileLegalHold request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new legal hold policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LegalHoldPolicyAssignment> _callback) throws ApiException {
            LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest legalHoldPolicyAssignmentsAssignFileLegalHoldRequest = buildBodyParams();
            return assignFileLegalHoldAsync(legalHoldPolicyAssignmentsAssignFileLegalHoldRequest, _callback);
        }
    }

    /**
     * Assign legal hold policy
     * Assign a legal hold to a file, file version, folder, or user.
     * @return AssignFileLegalHoldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new legal hold policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public AssignFileLegalHoldRequestBuilder assignFileLegalHold(String policyId, LegalHoldPolicyAssignmentsAssignFileLegalHoldRequestAssignTo assignTo) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        if (assignTo == null) throw new IllegalArgumentException("\"assignTo\" is required but got null");
        return new AssignFileLegalHoldRequestBuilder(policyId, assignTo);
    }
    private okhttp3.Call getAssignmentCall(String legalHoldPolicyAssignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}"
            .replace("{" + "legal_hold_policy_assignment_id" + "}", localVarApiClient.escapeString(legalHoldPolicyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssignmentValidateBeforeCall(String legalHoldPolicyAssignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalHoldPolicyAssignmentId' is set
        if (legalHoldPolicyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'legalHoldPolicyAssignmentId' when calling getAssignment(Async)");
        }

        return getAssignmentCall(legalHoldPolicyAssignmentId, _callback);

    }


    private ApiResponse<LegalHoldPolicyAssignment> getAssignmentWithHttpInfo(String legalHoldPolicyAssignmentId) throws ApiException {
        okhttp3.Call localVarCall = getAssignmentValidateBeforeCall(legalHoldPolicyAssignmentId, null);
        Type localVarReturnType = new TypeToken<LegalHoldPolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssignmentAsync(String legalHoldPolicyAssignmentId, final ApiCallback<LegalHoldPolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssignmentValidateBeforeCall(legalHoldPolicyAssignmentId, _callback);
        Type localVarReturnType = new TypeToken<LegalHoldPolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssignmentRequestBuilder {
        private final String legalHoldPolicyAssignmentId;

        private GetAssignmentRequestBuilder(String legalHoldPolicyAssignmentId) {
            this.legalHoldPolicyAssignmentId = legalHoldPolicyAssignmentId;
        }

        /**
         * Build call for getAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssignmentCall(legalHoldPolicyAssignmentId, _callback);
        }


        /**
         * Execute getAssignment request
         * @return LegalHoldPolicyAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public LegalHoldPolicyAssignment execute() throws ApiException {
            ApiResponse<LegalHoldPolicyAssignment> localVarResp = getAssignmentWithHttpInfo(legalHoldPolicyAssignmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssignment request with HTTP info returned
         * @return ApiResponse&lt;LegalHoldPolicyAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LegalHoldPolicyAssignment> executeWithHttpInfo() throws ApiException {
            return getAssignmentWithHttpInfo(legalHoldPolicyAssignmentId);
        }

        /**
         * Execute getAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a legal hold policy object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LegalHoldPolicyAssignment> _callback) throws ApiException {
            return getAssignmentAsync(legalHoldPolicyAssignmentId, _callback);
        }
    }

    /**
     * Get legal hold policy assignment
     * Retrieve a legal hold policy assignment.
     * @param legalHoldPolicyAssignmentId The ID of the legal hold policy assignment (required)
     * @return GetAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a legal hold policy object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetAssignmentRequestBuilder getAssignment(String legalHoldPolicyAssignmentId) throws IllegalArgumentException {
        if (legalHoldPolicyAssignmentId == null) throw new IllegalArgumentException("\"legalHoldPolicyAssignmentId\" is required but got null");
            

        return new GetAssignmentRequestBuilder(legalHoldPolicyAssignmentId);
    }
    private okhttp3.Call getListItemsCall(String policyId, String assignToType, String assignToId, String marker, Long limit, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legal_hold_policy_assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_id", policyId));
        }

        if (assignToType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assign_to_type", assignToType));
        }

        if (assignToId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assign_to_id", assignToId));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListItemsValidateBeforeCall(String policyId, String assignToType, String assignToId, String marker, Long limit, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling getListItems(Async)");
        }

        return getListItemsCall(policyId, assignToType, assignToId, marker, limit, fields, _callback);

    }


    private ApiResponse<LegalHoldPolicyAssignments> getListItemsWithHttpInfo(String policyId, String assignToType, String assignToId, String marker, Long limit, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getListItemsValidateBeforeCall(policyId, assignToType, assignToId, marker, limit, fields, null);
        Type localVarReturnType = new TypeToken<LegalHoldPolicyAssignments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListItemsAsync(String policyId, String assignToType, String assignToId, String marker, Long limit, List<String> fields, final ApiCallback<LegalHoldPolicyAssignments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListItemsValidateBeforeCall(policyId, assignToType, assignToId, marker, limit, fields, _callback);
        Type localVarReturnType = new TypeToken<LegalHoldPolicyAssignments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListItemsRequestBuilder {
        private final String policyId;
        private String assignToType;
        private String assignToId;
        private String marker;
        private Long limit;
        private List<String> fields;

        private GetListItemsRequestBuilder(String policyId) {
            this.policyId = policyId;
        }

        /**
         * Set assignToType
         * @param assignToType Filters the results by the type of item the policy was applied to. (optional)
         * @return GetListItemsRequestBuilder
         */
        public GetListItemsRequestBuilder assignToType(String assignToType) {
            this.assignToType = assignToType;
            return this;
        }
        
        /**
         * Set assignToId
         * @param assignToId Filters the results by the ID of item the policy was applied to. (optional)
         * @return GetListItemsRequestBuilder
         */
        public GetListItemsRequestBuilder assignToId(String assignToId) {
            this.assignToId = assignToId;
            return this;
        }
        
        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return GetListItemsRequestBuilder
         */
        public GetListItemsRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return GetListItemsRequestBuilder
         */
        public GetListItemsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return GetListItemsRequestBuilder
         */
        public GetListItemsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getListItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of legal hold policy assignments. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListItemsCall(policyId, assignToType, assignToId, marker, limit, fields, _callback);
        }


        /**
         * Execute getListItems request
         * @return LegalHoldPolicyAssignments
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of legal hold policy assignments. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public LegalHoldPolicyAssignments execute() throws ApiException {
            ApiResponse<LegalHoldPolicyAssignments> localVarResp = getListItemsWithHttpInfo(policyId, assignToType, assignToId, marker, limit, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getListItems request with HTTP info returned
         * @return ApiResponse&lt;LegalHoldPolicyAssignments&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of legal hold policy assignments. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LegalHoldPolicyAssignments> executeWithHttpInfo() throws ApiException {
            return getListItemsWithHttpInfo(policyId, assignToType, assignToId, marker, limit, fields);
        }

        /**
         * Execute getListItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of legal hold policy assignments. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LegalHoldPolicyAssignments> _callback) throws ApiException {
            return getListItemsAsync(policyId, assignToType, assignToId, marker, limit, fields, _callback);
        }
    }

    /**
     * List legal hold policy assignments
     * Retrieves a list of items a legal hold policy has been assigned to.
     * @param policyId The ID of the legal hold policy (required)
     * @return GetListItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of legal hold policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetListItemsRequestBuilder getListItems(String policyId) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new GetListItemsRequestBuilder(policyId);
    }
    private okhttp3.Call listFileVersionsCall(String legalHoldPolicyAssignmentId, String marker, Long limit, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}/files_on_hold"
            .replace("{" + "legal_hold_policy_assignment_id" + "}", localVarApiClient.escapeString(legalHoldPolicyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFileVersionsValidateBeforeCall(String legalHoldPolicyAssignmentId, String marker, Long limit, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalHoldPolicyAssignmentId' is set
        if (legalHoldPolicyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'legalHoldPolicyAssignmentId' when calling listFileVersions(Async)");
        }

        return listFileVersionsCall(legalHoldPolicyAssignmentId, marker, limit, fields, _callback);

    }


    private ApiResponse<FileVersionLegalHolds> listFileVersionsWithHttpInfo(String legalHoldPolicyAssignmentId, String marker, Long limit, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = listFileVersionsValidateBeforeCall(legalHoldPolicyAssignmentId, marker, limit, fields, null);
        Type localVarReturnType = new TypeToken<FileVersionLegalHolds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFileVersionsAsync(String legalHoldPolicyAssignmentId, String marker, Long limit, List<String> fields, final ApiCallback<FileVersionLegalHolds> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFileVersionsValidateBeforeCall(legalHoldPolicyAssignmentId, marker, limit, fields, _callback);
        Type localVarReturnType = new TypeToken<FileVersionLegalHolds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFileVersionsRequestBuilder {
        private final String legalHoldPolicyAssignmentId;
        private String marker;
        private Long limit;
        private List<String> fields;

        private ListFileVersionsRequestBuilder(String legalHoldPolicyAssignmentId) {
            this.legalHoldPolicyAssignmentId = legalHoldPolicyAssignmentId;
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListFileVersionsRequestBuilder
         */
        public ListFileVersionsRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListFileVersionsRequestBuilder
         */
        public ListFileVersionsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return ListFileVersionsRequestBuilder
         */
        public ListFileVersionsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for listFileVersions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the list of current file versions held under legal hold for a specific legal hold policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFileVersionsCall(legalHoldPolicyAssignmentId, marker, limit, fields, _callback);
        }


        /**
         * Execute listFileVersions request
         * @return FileVersionLegalHolds
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the list of current file versions held under legal hold for a specific legal hold policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileVersionLegalHolds execute() throws ApiException {
            ApiResponse<FileVersionLegalHolds> localVarResp = listFileVersionsWithHttpInfo(legalHoldPolicyAssignmentId, marker, limit, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFileVersions request with HTTP info returned
         * @return ApiResponse&lt;FileVersionLegalHolds&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the list of current file versions held under legal hold for a specific legal hold policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileVersionLegalHolds> executeWithHttpInfo() throws ApiException {
            return listFileVersionsWithHttpInfo(legalHoldPolicyAssignmentId, marker, limit, fields);
        }

        /**
         * Execute listFileVersions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the list of current file versions held under legal hold for a specific legal hold policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileVersionLegalHolds> _callback) throws ApiException {
            return listFileVersionsAsync(legalHoldPolicyAssignmentId, marker, limit, fields, _callback);
        }
    }

    /**
     * List current file versions for legal hold policy assignment
     * Get a list of current file versions for a legal hold assignment.  In some cases you may want to get previous file versions instead. In these cases, use the &#x60;GET  /legal_hold_policy_assignments/:id/file_versions_on_hold&#x60; API instead to return any previous versions of a file for this legal hold policy assignment.  Due to ongoing re-architecture efforts this API might not return all file versions held for this policy ID. Instead, this API will only return the latest file version held in the newly developed architecture. The &#x60;GET /file_version_legal_holds&#x60; API can be used to fetch current and past versions of files held within the legacy architecture.  The &#x60;GET /legal_hold_policy_assignments?policy_id&#x3D;{id}&#x60; API can be used to find a list of policy assignments for a given policy ID.
     * @param legalHoldPolicyAssignmentId The ID of the legal hold policy assignment (required)
     * @return ListFileVersionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of current file versions held under legal hold for a specific legal hold policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListFileVersionsRequestBuilder listFileVersions(String legalHoldPolicyAssignmentId) throws IllegalArgumentException {
        if (legalHoldPolicyAssignmentId == null) throw new IllegalArgumentException("\"legalHoldPolicyAssignmentId\" is required but got null");
            

        return new ListFileVersionsRequestBuilder(legalHoldPolicyAssignmentId);
    }
    private okhttp3.Call listPreviousFileVersionsCall(String legalHoldPolicyAssignmentId, String marker, Long limit, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}/file_versions_on_hold"
            .replace("{" + "legal_hold_policy_assignment_id" + "}", localVarApiClient.escapeString(legalHoldPolicyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPreviousFileVersionsValidateBeforeCall(String legalHoldPolicyAssignmentId, String marker, Long limit, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalHoldPolicyAssignmentId' is set
        if (legalHoldPolicyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'legalHoldPolicyAssignmentId' when calling listPreviousFileVersions(Async)");
        }

        return listPreviousFileVersionsCall(legalHoldPolicyAssignmentId, marker, limit, fields, _callback);

    }


    private ApiResponse<FileVersionLegalHolds> listPreviousFileVersionsWithHttpInfo(String legalHoldPolicyAssignmentId, String marker, Long limit, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = listPreviousFileVersionsValidateBeforeCall(legalHoldPolicyAssignmentId, marker, limit, fields, null);
        Type localVarReturnType = new TypeToken<FileVersionLegalHolds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPreviousFileVersionsAsync(String legalHoldPolicyAssignmentId, String marker, Long limit, List<String> fields, final ApiCallback<FileVersionLegalHolds> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPreviousFileVersionsValidateBeforeCall(legalHoldPolicyAssignmentId, marker, limit, fields, _callback);
        Type localVarReturnType = new TypeToken<FileVersionLegalHolds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPreviousFileVersionsRequestBuilder {
        private final String legalHoldPolicyAssignmentId;
        private String marker;
        private Long limit;
        private List<String> fields;

        private ListPreviousFileVersionsRequestBuilder(String legalHoldPolicyAssignmentId) {
            this.legalHoldPolicyAssignmentId = legalHoldPolicyAssignmentId;
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListPreviousFileVersionsRequestBuilder
         */
        public ListPreviousFileVersionsRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListPreviousFileVersionsRequestBuilder
         */
        public ListPreviousFileVersionsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return ListPreviousFileVersionsRequestBuilder
         */
        public ListPreviousFileVersionsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for listPreviousFileVersions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the list of previous file versions held under legal hold for a specific legal hold policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPreviousFileVersionsCall(legalHoldPolicyAssignmentId, marker, limit, fields, _callback);
        }


        /**
         * Execute listPreviousFileVersions request
         * @return FileVersionLegalHolds
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the list of previous file versions held under legal hold for a specific legal hold policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileVersionLegalHolds execute() throws ApiException {
            ApiResponse<FileVersionLegalHolds> localVarResp = listPreviousFileVersionsWithHttpInfo(legalHoldPolicyAssignmentId, marker, limit, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPreviousFileVersions request with HTTP info returned
         * @return ApiResponse&lt;FileVersionLegalHolds&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the list of previous file versions held under legal hold for a specific legal hold policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileVersionLegalHolds> executeWithHttpInfo() throws ApiException {
            return listPreviousFileVersionsWithHttpInfo(legalHoldPolicyAssignmentId, marker, limit, fields);
        }

        /**
         * Execute listPreviousFileVersions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the list of previous file versions held under legal hold for a specific legal hold policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileVersionLegalHolds> _callback) throws ApiException {
            return listPreviousFileVersionsAsync(legalHoldPolicyAssignmentId, marker, limit, fields, _callback);
        }
    }

    /**
     * List previous file versions for legal hold policy assignment
     * Get a list of previous file versions for a legal hold assignment.  In some cases you may only need the latest file versions instead. In these cases, use the &#x60;GET  /legal_hold_policy_assignments/:id/files_on_hold&#x60; API instead to return any current (latest) versions of a file for this legal hold policy assignment.  Due to ongoing re-architecture efforts this API might not return all files held for this policy ID. Instead, this API will only return past file versions held in the newly developed architecture. The &#x60;GET /file_version_legal_holds&#x60; API can be used to fetch current and past versions of files held within the legacy architecture.  The &#x60;GET /legal_hold_policy_assignments?policy_id&#x3D;{id}&#x60; API can be used to find a list of policy assignments for a given policy ID.
     * @param legalHoldPolicyAssignmentId The ID of the legal hold policy assignment (required)
     * @return ListPreviousFileVersionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of previous file versions held under legal hold for a specific legal hold policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListPreviousFileVersionsRequestBuilder listPreviousFileVersions(String legalHoldPolicyAssignmentId) throws IllegalArgumentException {
        if (legalHoldPolicyAssignmentId == null) throw new IllegalArgumentException("\"legalHoldPolicyAssignmentId\" is required but got null");
            

        return new ListPreviousFileVersionsRequestBuilder(legalHoldPolicyAssignmentId);
    }
    private okhttp3.Call unassignPolicyCall(String legalHoldPolicyAssignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legal_hold_policy_assignments/{legal_hold_policy_assignment_id}"
            .replace("{" + "legal_hold_policy_assignment_id" + "}", localVarApiClient.escapeString(legalHoldPolicyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignPolicyValidateBeforeCall(String legalHoldPolicyAssignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalHoldPolicyAssignmentId' is set
        if (legalHoldPolicyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'legalHoldPolicyAssignmentId' when calling unassignPolicy(Async)");
        }

        return unassignPolicyCall(legalHoldPolicyAssignmentId, _callback);

    }


    private ApiResponse<Void> unassignPolicyWithHttpInfo(String legalHoldPolicyAssignmentId) throws ApiException {
        okhttp3.Call localVarCall = unassignPolicyValidateBeforeCall(legalHoldPolicyAssignmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unassignPolicyAsync(String legalHoldPolicyAssignmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignPolicyValidateBeforeCall(legalHoldPolicyAssignmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnassignPolicyRequestBuilder {
        private final String legalHoldPolicyAssignmentId;

        private UnassignPolicyRequestBuilder(String legalHoldPolicyAssignmentId) {
            this.legalHoldPolicyAssignmentId = legalHoldPolicyAssignmentId;
        }

        /**
         * Build call for unassignPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A blank response is returned if the assignment was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unassignPolicyCall(legalHoldPolicyAssignmentId, _callback);
        }


        /**
         * Execute unassignPolicy request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A blank response is returned if the assignment was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unassignPolicyWithHttpInfo(legalHoldPolicyAssignmentId);
        }

        /**
         * Execute unassignPolicy request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A blank response is returned if the assignment was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unassignPolicyWithHttpInfo(legalHoldPolicyAssignmentId);
        }

        /**
         * Execute unassignPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A blank response is returned if the assignment was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unassignPolicyAsync(legalHoldPolicyAssignmentId, _callback);
        }
    }

    /**
     * Unassign legal hold policy
     * Remove a legal hold from an item.  This is an asynchronous process. The policy will not be fully removed yet when the response returns.
     * @param legalHoldPolicyAssignmentId The ID of the legal hold policy assignment (required)
     * @return UnassignPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A blank response is returned if the assignment was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UnassignPolicyRequestBuilder unassignPolicy(String legalHoldPolicyAssignmentId) throws IllegalArgumentException {
        if (legalHoldPolicyAssignmentId == null) throw new IllegalArgumentException("\"legalHoldPolicyAssignmentId\" is required but got null");
            

        return new UnassignPolicyRequestBuilder(legalHoldPolicyAssignmentId);
    }
}
