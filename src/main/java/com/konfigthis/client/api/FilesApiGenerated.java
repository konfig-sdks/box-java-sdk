/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import java.io.File;
import com.konfigthis.client.model.FileFull;
import com.konfigthis.client.model.FilesCreateCopyRequest;
import com.konfigthis.client.model.FilesCreateCopyRequestParent;
import com.konfigthis.client.model.FilesPreflightCheckBeforeUploadRequest;
import com.konfigthis.client.model.FilesPreflightCheckBeforeUploadRequestParent;
import com.konfigthis.client.model.FilesUpdateFileRequest;
import com.konfigthis.client.model.FilesUpdateFileRequestLock;
import com.konfigthis.client.model.FilesUpdateFileRequestParent;
import com.konfigthis.client.model.FilesUpdateFileRequestPermissions;
import com.konfigthis.client.model.FilesUpdateFileRequestSharedLink;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Reference1;
import com.konfigthis.client.model.UploadUrl;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FilesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCopyCall(String fileId, List<String> fields, FilesCreateCopyRequest filesCreateCopyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesCreateCopyRequest;

        // create path and map variables
        String localVarPath = "/files/{file_id}/copy"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCopyValidateBeforeCall(String fileId, List<String> fields, FilesCreateCopyRequest filesCreateCopyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling createCopy(Async)");
        }

        return createCopyCall(fileId, fields, filesCreateCopyRequest, _callback);

    }


    private ApiResponse<FileFull> createCopyWithHttpInfo(String fileId, List<String> fields, FilesCreateCopyRequest filesCreateCopyRequest) throws ApiException {
        okhttp3.Call localVarCall = createCopyValidateBeforeCall(fileId, fields, filesCreateCopyRequest, null);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCopyAsync(String fileId, List<String> fields, FilesCreateCopyRequest filesCreateCopyRequest, final ApiCallback<FileFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCopyValidateBeforeCall(fileId, fields, filesCreateCopyRequest, _callback);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCopyRequestBuilder {
        private final FilesCreateCopyRequestParent parent;
        private final String fileId;
        private String version;
        private String name;
        private List<String> fields;

        private CreateCopyRequestBuilder(FilesCreateCopyRequestParent parent, String fileId) {
            this.parent = parent;
            this.fileId = fileId;
        }

        /**
         * Set version
         * @param version An optional ID of the specific file version to copy. (optional)
         * @return CreateCopyRequestBuilder
         */
        public CreateCopyRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set name
         * @param name An optional new name for the copied file.  There are some restrictions to the file name. Names containing non-printable ASCII characters, forward and backward slashes (&#x60;/&#x60;, &#x60;\\\\&#x60;), and protected names like &#x60;.&#x60; and &#x60;..&#x60; are automatically sanitized by removing the non-allowed characters. (optional)
         * @return CreateCopyRequestBuilder
         */
        public CreateCopyRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return CreateCopyRequestBuilder
         */
        public CreateCopyRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for createCopy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new file object representing the copied file.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the file. This indicates that the file has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilesCreateCopyRequest filesCreateCopyRequest = buildBodyParams();
            return createCopyCall(fileId, fields, filesCreateCopyRequest, _callback);
        }

        private FilesCreateCopyRequest buildBodyParams() {
            FilesCreateCopyRequest filesCreateCopyRequest = new FilesCreateCopyRequest();
            filesCreateCopyRequest.version(this.version);
            filesCreateCopyRequest.name(this.name);
            filesCreateCopyRequest.parent(this.parent);
            return filesCreateCopyRequest;
        }

        /**
         * Execute createCopy request
         * @return FileFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new file object representing the copied file.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the file. This indicates that the file has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileFull execute() throws ApiException {
            FilesCreateCopyRequest filesCreateCopyRequest = buildBodyParams();
            ApiResponse<FileFull> localVarResp = createCopyWithHttpInfo(fileId, fields, filesCreateCopyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCopy request with HTTP info returned
         * @return ApiResponse&lt;FileFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new file object representing the copied file.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the file. This indicates that the file has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileFull> executeWithHttpInfo() throws ApiException {
            FilesCreateCopyRequest filesCreateCopyRequest = buildBodyParams();
            return createCopyWithHttpInfo(fileId, fields, filesCreateCopyRequest);
        }

        /**
         * Execute createCopy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new file object representing the copied file.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the file. This indicates that the file has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileFull> _callback) throws ApiException {
            FilesCreateCopyRequest filesCreateCopyRequest = buildBodyParams();
            return createCopyAsync(fileId, fields, filesCreateCopyRequest, _callback);
        }
    }

    /**
     * Copy file
     * Creates a copy of a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return CreateCopyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new file object representing the copied file.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the file. This indicates that the file has not changed since it was last requested. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCopyRequestBuilder createCopy(FilesCreateCopyRequestParent parent, String fileId) throws IllegalArgumentException {
        if (parent == null) throw new IllegalArgumentException("\"parent\" is required but got null");
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new CreateCopyRequestBuilder(parent, fileId);
    }
    private okhttp3.Call deleteFileCall(String fileId, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("if-match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileValidateBeforeCall(String fileId, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFile(Async)");
        }

        return deleteFileCall(fileId, ifMatch, _callback);

    }


    private ApiResponse<Void> deleteFileWithHttpInfo(String fileId, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(fileId, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFileAsync(String fileId, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(fileId, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFileRequestBuilder {
        private final String fileId;
        private String ifMatch;

        private DeleteFileRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Set ifMatch
         * @param ifMatch Ensures this item hasn&#39;t recently changed before making changes.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since. (optional)
         * @return DeleteFileRequestBuilder
         */
        public DeleteFileRequestBuilder ifMatch(String ifMatch) {
            this.ifMatch = ifMatch;
            return this;
        }
        
        /**
         * Build call for deleteFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the file has been successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFileCall(fileId, ifMatch, _callback);
        }


        /**
         * Execute deleteFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the file has been successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFileWithHttpInfo(fileId, ifMatch);
        }

        /**
         * Execute deleteFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the file has been successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFileWithHttpInfo(fileId, ifMatch);
        }

        /**
         * Execute deleteFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the file has been successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFileAsync(fileId, ifMatch, _callback);
        }
    }

    /**
     * Delete file
     * Deletes a file, either permanently or by moving it to the trash.  The the enterprise settings determine whether the item will be permanently deleted from Box or moved to the trash.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return DeleteFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the file has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFileRequestBuilder deleteFile(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new DeleteFileRequestBuilder(fileId);
    }
    private okhttp3.Call getDetailsCall(String fileId, List<String> fields, String ifNoneMatch, String boxapi, String xRepHints, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("if-none-match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (boxapi != null) {
            localVarHeaderParams.put("boxapi", localVarApiClient.parameterToString(boxapi));
        }

        if (xRepHints != null) {
            localVarHeaderParams.put("x-rep-hints", localVarApiClient.parameterToString(xRepHints));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String fileId, List<String> fields, String ifNoneMatch, String boxapi, String xRepHints, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getDetails(Async)");
        }

        return getDetailsCall(fileId, fields, ifNoneMatch, boxapi, xRepHints, _callback);

    }


    private ApiResponse<FileFull> getDetailsWithHttpInfo(String fileId, List<String> fields, String ifNoneMatch, String boxapi, String xRepHints) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(fileId, fields, ifNoneMatch, boxapi, xRepHints, null);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String fileId, List<String> fields, String ifNoneMatch, String boxapi, String xRepHints, final ApiCallback<FileFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(fileId, fields, ifNoneMatch, boxapi, xRepHints, _callback);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String fileId;
        private List<String> fields;
        private String ifNoneMatch;
        private String boxapi;
        private String xRepHints;

        private GetDetailsRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested.  Additionally this field can be used to query any metadata applied to the file by specifying the &#x60;metadata&#x60; field as well as the scope and key of the template to retrieve, for example &#x60;?field&#x3D;metadata.enterprise_12345.contractTemplate&#x60;. (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set ifNoneMatch
         * @param ifNoneMatch Ensures an item is only returned if it has changed.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;304 Not Modified&#x60; if the item has not changed since. (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder ifNoneMatch(String ifNoneMatch) {
            this.ifNoneMatch = ifNoneMatch;
            return this;
        }
        
        /**
         * Set boxapi
         * @param boxapi The URL, and optional password, for the shared link of this item.  This header can be used to access items that have not been explicitly shared with a user.  Use the format &#x60;shared_link&#x3D;[link]&#x60; or if a password is required then use &#x60;shared_link&#x3D;[link]&amp;shared_link_password&#x3D;[password]&#x60;.  This header can be used on the file or folder shared, as well as on any files or folders nested within the item. (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder boxapi(String boxapi) {
            this.boxapi = boxapi;
            return this;
        }
        
        /**
         * Set xRepHints
         * @param xRepHints A header required to request specific &#x60;representations&#x60; of a file. Use this in combination with the &#x60;fields&#x60; query parameter to request a specific file representation.  The general format for these representations is &#x60;X-Rep-Hints: [...]&#x60; where &#x60;[...]&#x60; is one or many hints in the format &#x60;[fileType?query]&#x60;.  For example, to request a &#x60;png&#x60; representation in &#x60;32x32&#x60; as well as &#x60;64x64&#x60; pixel dimensions provide the following hints.  &#x60;x-rep-hints: [jpg?dimensions&#x3D;32x32][jpg?dimensions&#x3D;64x64]&#x60;  Additionally, a &#x60;text&#x60; representation is available for all document file types in Box using the &#x60;[extracted_text]&#x60; representation.  &#x60;x-rep-hints: [extracted_text]&#x60; (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder xRepHints(String xRepHints) {
            this.xRepHints = xRepHints;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(fileId, fields, ifNoneMatch, boxapi, xRepHints, _callback);
        }


        /**
         * Execute getDetails request
         * @return FileFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileFull execute() throws ApiException {
            ApiResponse<FileFull> localVarResp = getDetailsWithHttpInfo(fileId, fields, ifNoneMatch, boxapi, xRepHints);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;FileFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileFull> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(fileId, fields, ifNoneMatch, boxapi, xRepHints);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileFull> _callback) throws ApiException {
            return getDetailsAsync(fileId, fields, ifNoneMatch, boxapi, xRepHints, _callback);
        }
    }

    /**
     * Get file information
     * Retrieves the details about a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a file object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Returns an empty response when the &#x60;If-None-Match&#x60; header matches the current &#x60;etag&#x60; value of the folder. This indicates that the folder has not changed since it was last requested. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new GetDetailsRequestBuilder(fileId);
    }
    private okhttp3.Call getThumbnailCall(String fileId, String extension, Integer minHeight, Integer minWidth, Integer maxHeight, Integer maxWidth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/thumbnail.{extension}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "extension" + "}", localVarApiClient.escapeString(extension.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_height", minHeight));
        }

        if (minWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_width", minWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_height", maxHeight));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_width", maxWidth));
        }

        final String[] localVarAccepts = {
            "image/png",
            "image/jpg",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThumbnailValidateBeforeCall(String fileId, String extension, Integer minHeight, Integer minWidth, Integer maxHeight, Integer maxWidth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getThumbnail(Async)");
        }

        // verify the required parameter 'extension' is set
        if (extension == null) {
            throw new ApiException("Missing the required parameter 'extension' when calling getThumbnail(Async)");
        }

        return getThumbnailCall(fileId, extension, minHeight, minWidth, maxHeight, maxWidth, _callback);

    }


    private ApiResponse<File> getThumbnailWithHttpInfo(String fileId, String extension, Integer minHeight, Integer minWidth, Integer maxHeight, Integer maxWidth) throws ApiException {
        okhttp3.Call localVarCall = getThumbnailValidateBeforeCall(fileId, extension, minHeight, minWidth, maxHeight, maxWidth, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getThumbnailAsync(String fileId, String extension, Integer minHeight, Integer minWidth, Integer maxHeight, Integer maxWidth, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThumbnailValidateBeforeCall(fileId, extension, minHeight, minWidth, maxHeight, maxWidth, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetThumbnailRequestBuilder {
        private final String fileId;
        private final String extension;
        private Integer minHeight;
        private Integer minWidth;
        private Integer maxHeight;
        private Integer maxWidth;

        private GetThumbnailRequestBuilder(String fileId, String extension) {
            this.fileId = fileId;
            this.extension = extension;
        }

        /**
         * Set minHeight
         * @param minHeight The minimum height of the thumbnail (optional)
         * @return GetThumbnailRequestBuilder
         */
        public GetThumbnailRequestBuilder minHeight(Integer minHeight) {
            this.minHeight = minHeight;
            return this;
        }
        
        /**
         * Set minWidth
         * @param minWidth The minimum width of the thumbnail (optional)
         * @return GetThumbnailRequestBuilder
         */
        public GetThumbnailRequestBuilder minWidth(Integer minWidth) {
            this.minWidth = minWidth;
            return this;
        }
        
        /**
         * Set maxHeight
         * @param maxHeight The maximum height of the thumbnail (optional)
         * @return GetThumbnailRequestBuilder
         */
        public GetThumbnailRequestBuilder maxHeight(Integer maxHeight) {
            this.maxHeight = maxHeight;
            return this;
        }
        
        /**
         * Set maxWidth
         * @param maxWidth The maximum width of the thumbnail (optional)
         * @return GetThumbnailRequestBuilder
         */
        public GetThumbnailRequestBuilder maxWidth(Integer maxWidth) {
            this.maxWidth = maxWidth;
            return this;
        }
        
        /**
         * Build call for getThumbnail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> When a thumbnail can be created the thumbnail data will be returned in the body of the response. </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Sometimes generating a thumbnail can take a few seconds. In these situations the API returns a &#x60;Location&#x60;-header pointing to a placeholder graphic for this file type.  The placeholder graphic can be used in a user interface until the thumbnail generation has completed. The &#x60;Retry-After&#x60;-header indicates when to the thumbnail will be ready. At that time, retry this endpoint to retrieve the thumbnail. </td><td>  * Retry-After - The time in seconds after which the thumbnail will be available.  Your application  only attempt to get the thumbnail again after this time. <br>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
            <tr><td> 302 </td><td> Returns an error when Box is not able to create a thumbnail for this file type.  Instead, a &#x60;Location&#x60;-header pointing to a placeholder graphic for this file type will be returned. </td><td>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getThumbnailCall(fileId, extension, minHeight, minWidth, maxHeight, maxWidth, _callback);
        }


        /**
         * Execute getThumbnail request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> When a thumbnail can be created the thumbnail data will be returned in the body of the response. </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Sometimes generating a thumbnail can take a few seconds. In these situations the API returns a &#x60;Location&#x60;-header pointing to a placeholder graphic for this file type.  The placeholder graphic can be used in a user interface until the thumbnail generation has completed. The &#x60;Retry-After&#x60;-header indicates when to the thumbnail will be ready. At that time, retry this endpoint to retrieve the thumbnail. </td><td>  * Retry-After - The time in seconds after which the thumbnail will be available.  Your application  only attempt to get the thumbnail again after this time. <br>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
            <tr><td> 302 </td><td> Returns an error when Box is not able to create a thumbnail for this file type.  Instead, a &#x60;Location&#x60;-header pointing to a placeholder graphic for this file type will be returned. </td><td>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getThumbnailWithHttpInfo(fileId, extension, minHeight, minWidth, maxHeight, maxWidth);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getThumbnail request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> When a thumbnail can be created the thumbnail data will be returned in the body of the response. </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Sometimes generating a thumbnail can take a few seconds. In these situations the API returns a &#x60;Location&#x60;-header pointing to a placeholder graphic for this file type.  The placeholder graphic can be used in a user interface until the thumbnail generation has completed. The &#x60;Retry-After&#x60;-header indicates when to the thumbnail will be ready. At that time, retry this endpoint to retrieve the thumbnail. </td><td>  * Retry-After - The time in seconds after which the thumbnail will be available.  Your application  only attempt to get the thumbnail again after this time. <br>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
            <tr><td> 302 </td><td> Returns an error when Box is not able to create a thumbnail for this file type.  Instead, a &#x60;Location&#x60;-header pointing to a placeholder graphic for this file type will be returned. </td><td>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getThumbnailWithHttpInfo(fileId, extension, minHeight, minWidth, maxHeight, maxWidth);
        }

        /**
         * Execute getThumbnail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> When a thumbnail can be created the thumbnail data will be returned in the body of the response. </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Sometimes generating a thumbnail can take a few seconds. In these situations the API returns a &#x60;Location&#x60;-header pointing to a placeholder graphic for this file type.  The placeholder graphic can be used in a user interface until the thumbnail generation has completed. The &#x60;Retry-After&#x60;-header indicates when to the thumbnail will be ready. At that time, retry this endpoint to retrieve the thumbnail. </td><td>  * Retry-After - The time in seconds after which the thumbnail will be available.  Your application  only attempt to get the thumbnail again after this time. <br>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
            <tr><td> 302 </td><td> Returns an error when Box is not able to create a thumbnail for this file type.  Instead, a &#x60;Location&#x60;-header pointing to a placeholder graphic for this file type will be returned. </td><td>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getThumbnailAsync(fileId, extension, minHeight, minWidth, maxHeight, maxWidth, _callback);
        }
    }

    /**
     * Get file thumbnail
     * Retrieves a thumbnail, or smaller image representation, of a file.  Sizes of &#x60;32x32&#x60;,&#x60;64x64&#x60;, &#x60;128x128&#x60;, and &#x60;256x256&#x60; can be returned in the &#x60;.png&#x60; format and sizes of &#x60;32x32&#x60;, &#x60;160x160&#x60;, and &#x60;320x320&#x60; can be returned in the &#x60;.jpg&#x60; format.  Thumbnails can be generated for the image and video file formats listed [found on our community site][1].  [1]: https://community.box.com/t5/Migrating-and-Previewing-Content/File-Types-and-Fonts-Supported-in-Box-Content-Preview/ta-p/327
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param extension The file format for the thumbnail (required)
     * @return GetThumbnailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When a thumbnail can be created the thumbnail data will be returned in the body of the response. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Sometimes generating a thumbnail can take a few seconds. In these situations the API returns a &#x60;Location&#x60;-header pointing to a placeholder graphic for this file type.  The placeholder graphic can be used in a user interface until the thumbnail generation has completed. The &#x60;Retry-After&#x60;-header indicates when to the thumbnail will be ready. At that time, retry this endpoint to retrieve the thumbnail. </td><td>  * Retry-After - The time in seconds after which the thumbnail will be available.  Your application  only attempt to get the thumbnail again after this time. <br>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
        <tr><td> 302 </td><td> Returns an error when Box is not able to create a thumbnail for this file type.  Instead, a &#x60;Location&#x60;-header pointing to a placeholder graphic for this file type will be returned. </td><td>  * Location - A pointer to a placeholder graphic that can be used for this file type. <br>  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetThumbnailRequestBuilder getThumbnail(String fileId, String extension) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (extension == null) throw new IllegalArgumentException("\"extension\" is required but got null");
            

        return new GetThumbnailRequestBuilder(fileId, extension);
    }
    private okhttp3.Call preflightCheckBeforeUploadCall(FilesPreflightCheckBeforeUploadRequest filesPreflightCheckBeforeUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesPreflightCheckBeforeUploadRequest;

        // create path and map variables
        String localVarPath = "/files/content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preflightCheckBeforeUploadValidateBeforeCall(FilesPreflightCheckBeforeUploadRequest filesPreflightCheckBeforeUploadRequest, final ApiCallback _callback) throws ApiException {
        return preflightCheckBeforeUploadCall(filesPreflightCheckBeforeUploadRequest, _callback);

    }


    private ApiResponse<UploadUrl> preflightCheckBeforeUploadWithHttpInfo(FilesPreflightCheckBeforeUploadRequest filesPreflightCheckBeforeUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = preflightCheckBeforeUploadValidateBeforeCall(filesPreflightCheckBeforeUploadRequest, null);
        Type localVarReturnType = new TypeToken<UploadUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call preflightCheckBeforeUploadAsync(FilesPreflightCheckBeforeUploadRequest filesPreflightCheckBeforeUploadRequest, final ApiCallback<UploadUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = preflightCheckBeforeUploadValidateBeforeCall(filesPreflightCheckBeforeUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PreflightCheckBeforeUploadRequestBuilder {
        private String name;
        private Integer size;
        private FilesPreflightCheckBeforeUploadRequestParent parent;

        private PreflightCheckBeforeUploadRequestBuilder() {
        }

        /**
         * Set name
         * @param name The name for the file (optional)
         * @return PreflightCheckBeforeUploadRequestBuilder
         */
        public PreflightCheckBeforeUploadRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set size
         * @param size The size of the file in bytes (optional)
         * @return PreflightCheckBeforeUploadRequestBuilder
         */
        public PreflightCheckBeforeUploadRequestBuilder size(Integer size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set parent
         * @param parent  (optional)
         * @return PreflightCheckBeforeUploadRequestBuilder
         */
        public PreflightCheckBeforeUploadRequestBuilder parent(FilesPreflightCheckBeforeUploadRequestParent parent) {
            this.parent = parent;
            return this;
        }
        
        /**
         * Build call for preflightCheckBeforeUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> If the check passed, the response will include a session URL that can be used to upload the file to. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilesPreflightCheckBeforeUploadRequest filesPreflightCheckBeforeUploadRequest = buildBodyParams();
            return preflightCheckBeforeUploadCall(filesPreflightCheckBeforeUploadRequest, _callback);
        }

        private FilesPreflightCheckBeforeUploadRequest buildBodyParams() {
            FilesPreflightCheckBeforeUploadRequest filesPreflightCheckBeforeUploadRequest = new FilesPreflightCheckBeforeUploadRequest();
            filesPreflightCheckBeforeUploadRequest.name(this.name);
            filesPreflightCheckBeforeUploadRequest.size(this.size);
            filesPreflightCheckBeforeUploadRequest.parent(this.parent);
            return filesPreflightCheckBeforeUploadRequest;
        }

        /**
         * Execute preflightCheckBeforeUpload request
         * @return UploadUrl
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> If the check passed, the response will include a session URL that can be used to upload the file to. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public UploadUrl execute() throws ApiException {
            FilesPreflightCheckBeforeUploadRequest filesPreflightCheckBeforeUploadRequest = buildBodyParams();
            ApiResponse<UploadUrl> localVarResp = preflightCheckBeforeUploadWithHttpInfo(filesPreflightCheckBeforeUploadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute preflightCheckBeforeUpload request with HTTP info returned
         * @return ApiResponse&lt;UploadUrl&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> If the check passed, the response will include a session URL that can be used to upload the file to. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadUrl> executeWithHttpInfo() throws ApiException {
            FilesPreflightCheckBeforeUploadRequest filesPreflightCheckBeforeUploadRequest = buildBodyParams();
            return preflightCheckBeforeUploadWithHttpInfo(filesPreflightCheckBeforeUploadRequest);
        }

        /**
         * Execute preflightCheckBeforeUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> If the check passed, the response will include a session URL that can be used to upload the file to. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadUrl> _callback) throws ApiException {
            FilesPreflightCheckBeforeUploadRequest filesPreflightCheckBeforeUploadRequest = buildBodyParams();
            return preflightCheckBeforeUploadAsync(filesPreflightCheckBeforeUploadRequest, _callback);
        }
    }

    /**
     * Preflight check before upload
     * Performs a check to verify that a file will be accepted by Box before you upload the entire file.
     * @return PreflightCheckBeforeUploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the check passed, the response will include a session URL that can be used to upload the file to. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public PreflightCheckBeforeUploadRequestBuilder preflightCheckBeforeUpload() throws IllegalArgumentException {
        return new PreflightCheckBeforeUploadRequestBuilder();
    }
    private okhttp3.Call updateFileCall(String fileId, List<String> fields, String ifMatch, FilesUpdateFileRequest filesUpdateFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesUpdateFileRequest;

        // create path and map variables
        String localVarPath = "/files/{file_id}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("if-match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFileValidateBeforeCall(String fileId, List<String> fields, String ifMatch, FilesUpdateFileRequest filesUpdateFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling updateFile(Async)");
        }

        return updateFileCall(fileId, fields, ifMatch, filesUpdateFileRequest, _callback);

    }


    private ApiResponse<FileFull> updateFileWithHttpInfo(String fileId, List<String> fields, String ifMatch, FilesUpdateFileRequest filesUpdateFileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFileValidateBeforeCall(fileId, fields, ifMatch, filesUpdateFileRequest, null);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFileAsync(String fileId, List<String> fields, String ifMatch, FilesUpdateFileRequest filesUpdateFileRequest, final ApiCallback<FileFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFileValidateBeforeCall(fileId, fields, ifMatch, filesUpdateFileRequest, _callback);
        Type localVarReturnType = new TypeToken<FileFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFileRequestBuilder {
        private final String fileId;
        private List<String> tags;
        private String description;
        private String name;
        private FilesUpdateFileRequestParent parent;
        private FilesUpdateFileRequestSharedLink sharedLink;
        private FilesUpdateFileRequestLock lock;
        private OffsetDateTime dispositionAt;
        private FilesUpdateFileRequestPermissions permissions;
        private List<Reference1> collections;
        private List<String> fields;
        private String ifMatch;

        private UpdateFileRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Set tags
         * @param tags The tags for this item. These tags are shown in the Box web app and mobile apps next to an item.  To add or remove a tag, retrieve the item&#39;s current tags, modify them, and then update this field.  There is a limit of 100 tags per item, and 10,000 unique tags per enterprise. (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set description
         * @param description The description for a file. This can be seen in the right-hand sidebar panel when viewing a file in the Box web app. Additionally, this index is used in the search index of the file, allowing users to find the file by the content in the description. (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name An optional different name for the file. This can be used to rename the file. (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set parent
         * @param parent  (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder parent(FilesUpdateFileRequestParent parent) {
            this.parent = parent;
            return this;
        }
        
        /**
         * Set sharedLink
         * @param sharedLink  (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder sharedLink(FilesUpdateFileRequestSharedLink sharedLink) {
            this.sharedLink = sharedLink;
            return this;
        }
        
        /**
         * Set lock
         * @param lock  (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder lock(FilesUpdateFileRequestLock lock) {
            this.lock = lock;
            return this;
        }
        
        /**
         * Set dispositionAt
         * @param dispositionAt The retention expiration timestamp for the given file. This date cannot be shortened once set on a file. (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder dispositionAt(OffsetDateTime dispositionAt) {
            this.dispositionAt = dispositionAt;
            return this;
        }
        
        /**
         * Set permissions
         * @param permissions  (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder permissions(FilesUpdateFileRequestPermissions permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Set collections
         * @param collections An array of collections to make this file a member of. Currently we only support the &#x60;favorites&#x60; collection.  To get the ID for a collection, use the [List all collections][1] endpoint.  Passing an empty array &#x60;[]&#x60; or &#x60;null&#x60; will remove the file from all collections.  [1]: e://get-collections (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder collections(List<Reference1> collections) {
            this.collections = collections;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set ifMatch
         * @param ifMatch Ensures this item hasn&#39;t recently changed before making changes.  Pass in the item&#39;s last observed &#x60;etag&#x60; value into this header and the endpoint will fail with a &#x60;412 Precondition Failed&#x60; if it has changed since. (optional)
         * @return UpdateFileRequestBuilder
         */
        public UpdateFileRequestBuilder ifMatch(String ifMatch) {
            this.ifMatch = ifMatch;
            return this;
        }
        
        /**
         * Build call for updateFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilesUpdateFileRequest filesUpdateFileRequest = buildBodyParams();
            return updateFileCall(fileId, fields, ifMatch, filesUpdateFileRequest, _callback);
        }

        private FilesUpdateFileRequest buildBodyParams() {
            FilesUpdateFileRequest filesUpdateFileRequest = new FilesUpdateFileRequest();
            filesUpdateFileRequest.tags(this.tags);
            filesUpdateFileRequest.description(this.description);
            filesUpdateFileRequest.name(this.name);
            filesUpdateFileRequest.parent(this.parent);
            filesUpdateFileRequest.sharedLink(this.sharedLink);
            filesUpdateFileRequest.lock(this.lock);
            filesUpdateFileRequest.dispositionAt(this.dispositionAt);
            filesUpdateFileRequest.permissions(this.permissions);
            filesUpdateFileRequest.collections(this.collections);
            return filesUpdateFileRequest;
        }

        /**
         * Execute updateFile request
         * @return FileFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FileFull execute() throws ApiException {
            FilesUpdateFileRequest filesUpdateFileRequest = buildBodyParams();
            ApiResponse<FileFull> localVarResp = updateFileWithHttpInfo(fileId, fields, ifMatch, filesUpdateFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFile request with HTTP info returned
         * @return ApiResponse&lt;FileFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileFull> executeWithHttpInfo() throws ApiException {
            FilesUpdateFileRequest filesUpdateFileRequest = buildBodyParams();
            return updateFileWithHttpInfo(fileId, fields, ifMatch, filesUpdateFileRequest);
        }

        /**
         * Execute updateFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a file object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileFull> _callback) throws ApiException {
            FilesUpdateFileRequest filesUpdateFileRequest = buildBodyParams();
            return updateFileAsync(fileId, fields, ifMatch, filesUpdateFileRequest, _callback);
        }
    }

    /**
     * Update file
     * Updates a file. This can be used to rename or move a file, create a shared link, or lock a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return UpdateFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a file object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFileRequestBuilder updateFile(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new UpdateFileRequestBuilder(fileId);
    }
}
