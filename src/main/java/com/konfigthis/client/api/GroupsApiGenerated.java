/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.GroupFull;
import com.konfigthis.client.model.Groups;
import com.konfigthis.client.model.GroupsUpdateGroupRequest;
import com.konfigthis.client.model.PostGroupsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GroupsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getInfoCall(String groupId, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String groupId, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getInfo(Async)");
        }

        return getInfoCall(groupId, fields, _callback);

    }


    private ApiResponse<GroupFull> getInfoWithHttpInfo(String groupId, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(groupId, fields, null);
        Type localVarReturnType = new TypeToken<GroupFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String groupId, List<String> fields, final ApiCallback<GroupFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(groupId, fields, _callback);
        Type localVarReturnType = new TypeToken<GroupFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String groupId;
        private List<String> fields;

        private GetInfoRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the group object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(groupId, fields, _callback);
        }


        /**
         * Execute getInfo request
         * @return GroupFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the group object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public GroupFull execute() throws ApiException {
            ApiResponse<GroupFull> localVarResp = getInfoWithHttpInfo(groupId, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;GroupFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the group object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupFull> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(groupId, fields);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the group object </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupFull> _callback) throws ApiException {
            return getInfoAsync(groupId, fields, _callback);
        }
    }

    /**
     * Get group
     * Retrieves information about a group. Only members of this group or users with admin-level permissions will be able to use this API.
     * @param groupId The ID of the group. (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the group object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetInfoRequestBuilder getInfo(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new GetInfoRequestBuilder(groupId);
    }
    private okhttp3.Call groupsCall(String filterTerm, List<String> fields, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_term", filterTerm));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsValidateBeforeCall(String filterTerm, List<String> fields, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return groupsCall(filterTerm, fields, limit, offset, _callback);

    }


    private ApiResponse<Groups> groupsWithHttpInfo(String filterTerm, List<String> fields, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = groupsValidateBeforeCall(filterTerm, fields, limit, offset, null);
        Type localVarReturnType = new TypeToken<Groups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call groupsAsync(String filterTerm, List<String> fields, Long limit, Long offset, final ApiCallback<Groups> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsValidateBeforeCall(filterTerm, fields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Groups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GroupsRequestBuilder {
        private String filterTerm;
        private List<String> fields;
        private Long limit;
        private Long offset;

        private GroupsRequestBuilder() {
        }

        /**
         * Set filterTerm
         * @param filterTerm Limits the results to only groups whose &#x60;name&#x60; starts with the search term. (optional)
         * @return GroupsRequestBuilder
         */
        public GroupsRequestBuilder filterTerm(String filterTerm) {
            this.filterTerm = filterTerm;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return GroupsRequestBuilder
         */
        public GroupsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return GroupsRequestBuilder
         */
        public GroupsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response. (optional, default to 0)
         * @return GroupsRequestBuilder
         */
        public GroupsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for groups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of group objects. If there are no groups, an empty collection will be returned. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return groupsCall(filterTerm, fields, limit, offset, _callback);
        }


        /**
         * Execute groups request
         * @return Groups
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of group objects. If there are no groups, an empty collection will be returned. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Groups execute() throws ApiException {
            ApiResponse<Groups> localVarResp = groupsWithHttpInfo(filterTerm, fields, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute groups request with HTTP info returned
         * @return ApiResponse&lt;Groups&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of group objects. If there are no groups, an empty collection will be returned. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Groups> executeWithHttpInfo() throws ApiException {
            return groupsWithHttpInfo(filterTerm, fields, limit, offset);
        }

        /**
         * Execute groups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of group objects. If there are no groups, an empty collection will be returned. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Groups> _callback) throws ApiException {
            return groupsAsync(filterTerm, fields, limit, offset, _callback);
        }
    }

    /**
     * List groups for enterprise
     * Retrieves all of the groups for a given enterprise. The user must have admin permissions to inspect enterprise&#39;s groups.
     * @return GroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of group objects. If there are no groups, an empty collection will be returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GroupsRequestBuilder groups() throws IllegalArgumentException {
        return new GroupsRequestBuilder();
    }
    private okhttp3.Call groups_0Call(List<String> fields, PostGroupsRequest postGroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postGroupsRequest;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groups_0ValidateBeforeCall(List<String> fields, PostGroupsRequest postGroupsRequest, final ApiCallback _callback) throws ApiException {
        return groups_0Call(fields, postGroupsRequest, _callback);

    }


    private ApiResponse<GroupFull> groups_0WithHttpInfo(List<String> fields, PostGroupsRequest postGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = groups_0ValidateBeforeCall(fields, postGroupsRequest, null);
        Type localVarReturnType = new TypeToken<GroupFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call groups_0Async(List<String> fields, PostGroupsRequest postGroupsRequest, final ApiCallback<GroupFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = groups_0ValidateBeforeCall(fields, postGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Groups0RequestBuilder {
        private final String name;
        private String description;
        private String provenance;
        private String externalSyncIdentifier;
        private String invitabilityLevel;
        private String memberViewabilityLevel;
        private List<String> fields;

        private Groups0RequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description A human readable description of the group. (optional)
         * @return Groups0RequestBuilder
         */
        public Groups0RequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set provenance
         * @param provenance Keeps track of which external source this group is coming, for example &#x60;Active Directory&#x60;, or &#x60;Okta&#x60;.  Setting this will also prevent Box admins from editing the group name and its members directly via the Box web application.  This is desirable for one-way syncing of groups. (optional)
         * @return Groups0RequestBuilder
         */
        public Groups0RequestBuilder provenance(String provenance) {
            this.provenance = provenance;
            return this;
        }
        
        /**
         * Set externalSyncIdentifier
         * @param externalSyncIdentifier An arbitrary identifier that can be used by external group sync tools to link this Box Group to an external group.  Example values of this field could be an **Active Directory Object ID** or a **Google Group ID**.  We recommend you use of this field in order to avoid issues when group names are updated in either Box or external systems. (optional)
         * @return Groups0RequestBuilder
         */
        public Groups0RequestBuilder externalSyncIdentifier(String externalSyncIdentifier) {
            this.externalSyncIdentifier = externalSyncIdentifier;
            return this;
        }
        
        /**
         * Set invitabilityLevel
         * @param invitabilityLevel Specifies who can invite the group to collaborate on folders.  When set to &#x60;admins_only&#x60; the enterprise admin, co-admins, and the group&#39;s admin can invite the group.  When set to &#x60;admins_and_members&#x60; all the admins listed above and group members can invite the group.  When set to &#x60;all_managed_users&#x60; all managed users in the enterprise can invite the group. (optional)
         * @return Groups0RequestBuilder
         */
        public Groups0RequestBuilder invitabilityLevel(String invitabilityLevel) {
            this.invitabilityLevel = invitabilityLevel;
            return this;
        }
        
        /**
         * Set memberViewabilityLevel
         * @param memberViewabilityLevel Specifies who can see the members of the group.  * &#x60;admins_only&#x60; - the enterprise admin, co-admins, group&#39;s   group admin * &#x60;admins_and_members&#x60; - all admins and group members * &#x60;all_managed_users&#x60; - all managed users in the   enterprise (optional)
         * @return Groups0RequestBuilder
         */
        public Groups0RequestBuilder memberViewabilityLevel(String memberViewabilityLevel) {
            this.memberViewabilityLevel = memberViewabilityLevel;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return Groups0RequestBuilder
         */
        public Groups0RequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for groups_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the new group object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostGroupsRequest postGroupsRequest = buildBodyParams();
            return groups_0Call(fields, postGroupsRequest, _callback);
        }

        private PostGroupsRequest buildBodyParams() {
            PostGroupsRequest postGroupsRequest = new PostGroupsRequest();
            postGroupsRequest.description(this.description);
            postGroupsRequest.name(this.name);
            postGroupsRequest.provenance(this.provenance);
            postGroupsRequest.externalSyncIdentifier(this.externalSyncIdentifier);
            if (this.invitabilityLevel != null)
            postGroupsRequest.invitabilityLevel(PostGroupsRequest.InvitabilityLevelEnum.fromValue(this.invitabilityLevel));
            if (this.memberViewabilityLevel != null)
            postGroupsRequest.memberViewabilityLevel(PostGroupsRequest.MemberViewabilityLevelEnum.fromValue(this.memberViewabilityLevel));
            return postGroupsRequest;
        }

        /**
         * Execute groups_0 request
         * @return GroupFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the new group object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public GroupFull execute() throws ApiException {
            PostGroupsRequest postGroupsRequest = buildBodyParams();
            ApiResponse<GroupFull> localVarResp = groups_0WithHttpInfo(fields, postGroupsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute groups_0 request with HTTP info returned
         * @return ApiResponse&lt;GroupFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the new group object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupFull> executeWithHttpInfo() throws ApiException {
            PostGroupsRequest postGroupsRequest = buildBodyParams();
            return groups_0WithHttpInfo(fields, postGroupsRequest);
        }

        /**
         * Execute groups_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the new group object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupFull> _callback) throws ApiException {
            PostGroupsRequest postGroupsRequest = buildBodyParams();
            return groups_0Async(fields, postGroupsRequest, _callback);
        }
    }

    /**
     * Create group
     * Creates a new group of users in an enterprise. Only users with admin permissions can create new groups.
     * @return Groups0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the new group object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public Groups0RequestBuilder groups_0(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new Groups0RequestBuilder(name);
    }
    private okhttp3.Call removeCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling remove(Async)");
        }

        return removeCall(groupId, _callback);

    }


    private ApiResponse<Void> removeWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = removeValidateBeforeCall(groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAsync(String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeValidateBeforeCall(groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveRequestBuilder {
        private final String groupId;

        private RemoveRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Build call for remove
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the group was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCall(groupId, _callback);
        }


        /**
         * Execute remove request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the group was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeWithHttpInfo(groupId);
        }

        /**
         * Execute remove request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the group was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeWithHttpInfo(groupId);
        }

        /**
         * Execute remove request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the group was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAsync(groupId, _callback);
        }
    }

    /**
     * Remove group
     * Permanently deletes a group. Only users with admin-level permissions will be able to use this API.
     * @param groupId The ID of the group. (required)
     * @return RemoveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A blank response is returned if the group was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveRequestBuilder remove(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new RemoveRequestBuilder(groupId);
    }
    private okhttp3.Call updateGroupCall(String groupId, List<String> fields, GroupsUpdateGroupRequest groupsUpdateGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupsUpdateGroupRequest;

        // create path and map variables
        String localVarPath = "/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupValidateBeforeCall(String groupId, List<String> fields, GroupsUpdateGroupRequest groupsUpdateGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroup(Async)");
        }

        return updateGroupCall(groupId, fields, groupsUpdateGroupRequest, _callback);

    }


    private ApiResponse<GroupFull> updateGroupWithHttpInfo(String groupId, List<String> fields, GroupsUpdateGroupRequest groupsUpdateGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(groupId, fields, groupsUpdateGroupRequest, null);
        Type localVarReturnType = new TypeToken<GroupFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGroupAsync(String groupId, List<String> fields, GroupsUpdateGroupRequest groupsUpdateGroupRequest, final ApiCallback<GroupFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(groupId, fields, groupsUpdateGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateGroupRequestBuilder {
        private final String groupId;
        private String description;
        private String name;
        private String provenance;
        private String externalSyncIdentifier;
        private String invitabilityLevel;
        private String memberViewabilityLevel;
        private List<String> fields;

        private UpdateGroupRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Set description
         * @param description A human readable description of the group. (optional)
         * @return UpdateGroupRequestBuilder
         */
        public UpdateGroupRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the new group to be created. Must be unique within the enterprise. (optional)
         * @return UpdateGroupRequestBuilder
         */
        public UpdateGroupRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set provenance
         * @param provenance Keeps track of which external source this group is coming, for example &#x60;Active Directory&#x60;, or &#x60;Okta&#x60;.  Setting this will also prevent Box admins from editing the group name and its members directly via the Box web application.  This is desirable for one-way syncing of groups. (optional)
         * @return UpdateGroupRequestBuilder
         */
        public UpdateGroupRequestBuilder provenance(String provenance) {
            this.provenance = provenance;
            return this;
        }
        
        /**
         * Set externalSyncIdentifier
         * @param externalSyncIdentifier An arbitrary identifier that can be used by external group sync tools to link this Box Group to an external group.  Example values of this field could be an **Active Directory Object ID** or a **Google Group ID**.  We recommend you use of this field in order to avoid issues when group names are updated in either Box or external systems. (optional)
         * @return UpdateGroupRequestBuilder
         */
        public UpdateGroupRequestBuilder externalSyncIdentifier(String externalSyncIdentifier) {
            this.externalSyncIdentifier = externalSyncIdentifier;
            return this;
        }
        
        /**
         * Set invitabilityLevel
         * @param invitabilityLevel Specifies who can invite the group to collaborate on folders.  When set to &#x60;admins_only&#x60; the enterprise admin, co-admins, and the group&#39;s admin can invite the group.  When set to &#x60;admins_and_members&#x60; all the admins listed above and group members can invite the group.  When set to &#x60;all_managed_users&#x60; all managed users in the enterprise can invite the group. (optional)
         * @return UpdateGroupRequestBuilder
         */
        public UpdateGroupRequestBuilder invitabilityLevel(String invitabilityLevel) {
            this.invitabilityLevel = invitabilityLevel;
            return this;
        }
        
        /**
         * Set memberViewabilityLevel
         * @param memberViewabilityLevel Specifies who can see the members of the group.  * &#x60;admins_only&#x60; - the enterprise admin, co-admins, group&#39;s   group admin * &#x60;admins_and_members&#x60; - all admins and group members * &#x60;all_managed_users&#x60; - all managed users in the   enterprise (optional)
         * @return UpdateGroupRequestBuilder
         */
        public UpdateGroupRequestBuilder memberViewabilityLevel(String memberViewabilityLevel) {
            this.memberViewabilityLevel = memberViewabilityLevel;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return UpdateGroupRequestBuilder
         */
        public UpdateGroupRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for updateGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated group object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupsUpdateGroupRequest groupsUpdateGroupRequest = buildBodyParams();
            return updateGroupCall(groupId, fields, groupsUpdateGroupRequest, _callback);
        }

        private GroupsUpdateGroupRequest buildBodyParams() {
            GroupsUpdateGroupRequest groupsUpdateGroupRequest = new GroupsUpdateGroupRequest();
            groupsUpdateGroupRequest.description(this.description);
            groupsUpdateGroupRequest.name(this.name);
            groupsUpdateGroupRequest.provenance(this.provenance);
            groupsUpdateGroupRequest.externalSyncIdentifier(this.externalSyncIdentifier);
            if (this.invitabilityLevel != null)
            groupsUpdateGroupRequest.invitabilityLevel(GroupsUpdateGroupRequest.InvitabilityLevelEnum.fromValue(this.invitabilityLevel));
            if (this.memberViewabilityLevel != null)
            groupsUpdateGroupRequest.memberViewabilityLevel(GroupsUpdateGroupRequest.MemberViewabilityLevelEnum.fromValue(this.memberViewabilityLevel));
            return groupsUpdateGroupRequest;
        }

        /**
         * Execute updateGroup request
         * @return GroupFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated group object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public GroupFull execute() throws ApiException {
            GroupsUpdateGroupRequest groupsUpdateGroupRequest = buildBodyParams();
            ApiResponse<GroupFull> localVarResp = updateGroupWithHttpInfo(groupId, fields, groupsUpdateGroupRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateGroup request with HTTP info returned
         * @return ApiResponse&lt;GroupFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated group object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupFull> executeWithHttpInfo() throws ApiException {
            GroupsUpdateGroupRequest groupsUpdateGroupRequest = buildBodyParams();
            return updateGroupWithHttpInfo(groupId, fields, groupsUpdateGroupRequest);
        }

        /**
         * Execute updateGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated group object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupFull> _callback) throws ApiException {
            GroupsUpdateGroupRequest groupsUpdateGroupRequest = buildBodyParams();
            return updateGroupAsync(groupId, fields, groupsUpdateGroupRequest, _callback);
        }
    }

    /**
     * Update group
     * Updates a specific group. Only admins of this group or users with admin-level permissions will be able to use this API.
     * @param groupId The ID of the group. (required)
     * @return UpdateGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated group object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGroupRequestBuilder updateGroup(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new UpdateGroupRequestBuilder(groupId);
    }
}
