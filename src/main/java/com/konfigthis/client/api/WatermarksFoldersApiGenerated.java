/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.Watermark;
import com.konfigthis.client.model.WatermarksFoldersApplyToFolderRequest;
import com.konfigthis.client.model.WatermarksFoldersApplyToFolderRequestWatermark;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WatermarksFoldersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WatermarksFoldersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WatermarksFoldersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call applyToFolderCall(String folderId, WatermarksFoldersApplyToFolderRequest watermarksFoldersApplyToFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watermarksFoldersApplyToFolderRequest;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/watermark"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyToFolderValidateBeforeCall(String folderId, WatermarksFoldersApplyToFolderRequest watermarksFoldersApplyToFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling applyToFolder(Async)");
        }

        return applyToFolderCall(folderId, watermarksFoldersApplyToFolderRequest, _callback);

    }


    private ApiResponse<Watermark> applyToFolderWithHttpInfo(String folderId, WatermarksFoldersApplyToFolderRequest watermarksFoldersApplyToFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = applyToFolderValidateBeforeCall(folderId, watermarksFoldersApplyToFolderRequest, null);
        Type localVarReturnType = new TypeToken<Watermark>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call applyToFolderAsync(String folderId, WatermarksFoldersApplyToFolderRequest watermarksFoldersApplyToFolderRequest, final ApiCallback<Watermark> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyToFolderValidateBeforeCall(folderId, watermarksFoldersApplyToFolderRequest, _callback);
        Type localVarReturnType = new TypeToken<Watermark>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApplyToFolderRequestBuilder {
        private final WatermarksFoldersApplyToFolderRequestWatermark watermark;
        private final String folderId;

        private ApplyToFolderRequestBuilder(WatermarksFoldersApplyToFolderRequestWatermark watermark, String folderId) {
            this.watermark = watermark;
            this.folderId = folderId;
        }

        /**
         * Build call for applyToFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated watermark if a watermark already existed on this folder. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returns a new watermark if no watermark existed on this folder yet. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WatermarksFoldersApplyToFolderRequest watermarksFoldersApplyToFolderRequest = buildBodyParams();
            return applyToFolderCall(folderId, watermarksFoldersApplyToFolderRequest, _callback);
        }

        private WatermarksFoldersApplyToFolderRequest buildBodyParams() {
            WatermarksFoldersApplyToFolderRequest watermarksFoldersApplyToFolderRequest = new WatermarksFoldersApplyToFolderRequest();
            watermarksFoldersApplyToFolderRequest.watermark(this.watermark);
            return watermarksFoldersApplyToFolderRequest;
        }

        /**
         * Execute applyToFolder request
         * @return Watermark
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated watermark if a watermark already existed on this folder. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returns a new watermark if no watermark existed on this folder yet. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Watermark execute() throws ApiException {
            WatermarksFoldersApplyToFolderRequest watermarksFoldersApplyToFolderRequest = buildBodyParams();
            ApiResponse<Watermark> localVarResp = applyToFolderWithHttpInfo(folderId, watermarksFoldersApplyToFolderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute applyToFolder request with HTTP info returned
         * @return ApiResponse&lt;Watermark&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated watermark if a watermark already existed on this folder. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returns a new watermark if no watermark existed on this folder yet. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Watermark> executeWithHttpInfo() throws ApiException {
            WatermarksFoldersApplyToFolderRequest watermarksFoldersApplyToFolderRequest = buildBodyParams();
            return applyToFolderWithHttpInfo(folderId, watermarksFoldersApplyToFolderRequest);
        }

        /**
         * Execute applyToFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated watermark if a watermark already existed on this folder. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returns a new watermark if no watermark existed on this folder yet. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Watermark> _callback) throws ApiException {
            WatermarksFoldersApplyToFolderRequest watermarksFoldersApplyToFolderRequest = buildBodyParams();
            return applyToFolderAsync(folderId, watermarksFoldersApplyToFolderRequest, _callback);
        }
    }

    /**
     * Apply watermark to folder
     * Applies or update a watermark on a folder.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return ApplyToFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an updated watermark if a watermark already existed on this folder. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returns a new watermark if no watermark existed on this folder yet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ApplyToFolderRequestBuilder applyToFolder(WatermarksFoldersApplyToFolderRequestWatermark watermark, String folderId) throws IllegalArgumentException {
        if (watermark == null) throw new IllegalArgumentException("\"watermark\" is required but got null");
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new ApplyToFolderRequestBuilder(watermark, folderId);
    }
    private okhttp3.Call getFolderWatermarkCall(String folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/watermark"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderWatermarkValidateBeforeCall(String folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getFolderWatermark(Async)");
        }

        return getFolderWatermarkCall(folderId, _callback);

    }


    private ApiResponse<Watermark> getFolderWatermarkWithHttpInfo(String folderId) throws ApiException {
        okhttp3.Call localVarCall = getFolderWatermarkValidateBeforeCall(folderId, null);
        Type localVarReturnType = new TypeToken<Watermark>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFolderWatermarkAsync(String folderId, final ApiCallback<Watermark> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderWatermarkValidateBeforeCall(folderId, _callback);
        Type localVarReturnType = new TypeToken<Watermark>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFolderWatermarkRequestBuilder {
        private final String folderId;

        private GetFolderWatermarkRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Build call for getFolderWatermark
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an object containing information about the watermark associated for to this folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFolderWatermarkCall(folderId, _callback);
        }


        /**
         * Execute getFolderWatermark request
         * @return Watermark
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an object containing information about the watermark associated for to this folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Watermark execute() throws ApiException {
            ApiResponse<Watermark> localVarResp = getFolderWatermarkWithHttpInfo(folderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFolderWatermark request with HTTP info returned
         * @return ApiResponse&lt;Watermark&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an object containing information about the watermark associated for to this folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Watermark> executeWithHttpInfo() throws ApiException {
            return getFolderWatermarkWithHttpInfo(folderId);
        }

        /**
         * Execute getFolderWatermark request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an object containing information about the watermark associated for to this folder. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Watermark> _callback) throws ApiException {
            return getFolderWatermarkAsync(folderId, _callback);
        }
    }

    /**
     * Get watermark for folder
     * Retrieve the watermark for a folder.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return GetFolderWatermarkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object containing information about the watermark associated for to this folder. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderWatermarkRequestBuilder getFolderWatermark(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new GetFolderWatermarkRequestBuilder(folderId);
    }
    private okhttp3.Call removeFolderWatermarkCall(String folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{folder_id}/watermark"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFolderWatermarkValidateBeforeCall(String folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling removeFolderWatermark(Async)");
        }

        return removeFolderWatermarkCall(folderId, _callback);

    }


    private ApiResponse<Void> removeFolderWatermarkWithHttpInfo(String folderId) throws ApiException {
        okhttp3.Call localVarCall = removeFolderWatermarkValidateBeforeCall(folderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFolderWatermarkAsync(String folderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFolderWatermarkValidateBeforeCall(folderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFolderWatermarkRequestBuilder {
        private final String folderId;

        private RemoveFolderWatermarkRequestBuilder(String folderId) {
            this.folderId = folderId;
        }

        /**
         * Build call for removeFolderWatermark
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> An empty response will be returned when the watermark was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFolderWatermarkCall(folderId, _callback);
        }


        /**
         * Execute removeFolderWatermark request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> An empty response will be returned when the watermark was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFolderWatermarkWithHttpInfo(folderId);
        }

        /**
         * Execute removeFolderWatermark request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> An empty response will be returned when the watermark was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFolderWatermarkWithHttpInfo(folderId);
        }

        /**
         * Execute removeFolderWatermark request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> An empty response will be returned when the watermark was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFolderWatermarkAsync(folderId, _callback);
        }
    }

    /**
     * Remove watermark from folder
     * Removes the watermark from a folder.
     * @param folderId The unique identifier that represent a folder.  The ID for any folder can be determined by visiting this folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folder/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.  The root folder of a Box account is always represented by the ID &#x60;0&#x60;. (required)
     * @return RemoveFolderWatermarkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response will be returned when the watermark was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFolderWatermarkRequestBuilder removeFolderWatermark(String folderId) throws IllegalArgumentException {
        if (folderId == null) throw new IllegalArgumentException("\"folderId\" is required but got null");
            

        return new RemoveFolderWatermarkRequestBuilder(folderId);
    }
}
