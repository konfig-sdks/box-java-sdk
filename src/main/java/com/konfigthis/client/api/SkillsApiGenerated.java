/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.SkillCardsMetadata;
import com.konfigthis.client.model.SkillsApplyBoxSkillCardsRequest;
import com.konfigthis.client.model.SkillsUpdateAllBoxSkillCardsRequest;
import com.konfigthis.client.model.SkillsUpdateAllBoxSkillCardsRequestFile;
import com.konfigthis.client.model.SkillsUpdateAllBoxSkillCardsRequestFileVersion;
import com.konfigthis.client.model.SkillsUpdateAllBoxSkillCardsRequestMetadata;
import com.konfigthis.client.model.SkillsUpdateAllBoxSkillCardsRequestUsage;
import com.konfigthis.client.model.SkillsUpdateBoxSkillCardsOnFileRequestInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SkillsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SkillsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SkillsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call applyBoxSkillCardsCall(String fileId, SkillsApplyBoxSkillCardsRequest skillsApplyBoxSkillCardsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skillsApplyBoxSkillCardsRequest;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata/global/boxSkillsCards"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyBoxSkillCardsValidateBeforeCall(String fileId, SkillsApplyBoxSkillCardsRequest skillsApplyBoxSkillCardsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling applyBoxSkillCards(Async)");
        }

        return applyBoxSkillCardsCall(fileId, skillsApplyBoxSkillCardsRequest, _callback);

    }


    private ApiResponse<SkillCardsMetadata> applyBoxSkillCardsWithHttpInfo(String fileId, SkillsApplyBoxSkillCardsRequest skillsApplyBoxSkillCardsRequest) throws ApiException {
        okhttp3.Call localVarCall = applyBoxSkillCardsValidateBeforeCall(fileId, skillsApplyBoxSkillCardsRequest, null);
        Type localVarReturnType = new TypeToken<SkillCardsMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call applyBoxSkillCardsAsync(String fileId, SkillsApplyBoxSkillCardsRequest skillsApplyBoxSkillCardsRequest, final ApiCallback<SkillCardsMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyBoxSkillCardsValidateBeforeCall(fileId, skillsApplyBoxSkillCardsRequest, _callback);
        Type localVarReturnType = new TypeToken<SkillCardsMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApplyBoxSkillCardsRequestBuilder {
        private final List<Object> cards;
        private final String fileId;

        private ApplyBoxSkillCardsRequestBuilder(List<Object> cards, String fileId) {
            this.cards = cards;
            this.fileId = fileId;
        }

        /**
         * Build call for applyBoxSkillCards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the instance of the template that was applied to the file, including the data that was applied to the template. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SkillsApplyBoxSkillCardsRequest skillsApplyBoxSkillCardsRequest = buildBodyParams();
            return applyBoxSkillCardsCall(fileId, skillsApplyBoxSkillCardsRequest, _callback);
        }

        private SkillsApplyBoxSkillCardsRequest buildBodyParams() {
            SkillsApplyBoxSkillCardsRequest skillsApplyBoxSkillCardsRequest = new SkillsApplyBoxSkillCardsRequest();
            skillsApplyBoxSkillCardsRequest.cards(this.cards);
            return skillsApplyBoxSkillCardsRequest;
        }

        /**
         * Execute applyBoxSkillCards request
         * @return SkillCardsMetadata
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the instance of the template that was applied to the file, including the data that was applied to the template. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public SkillCardsMetadata execute() throws ApiException {
            SkillsApplyBoxSkillCardsRequest skillsApplyBoxSkillCardsRequest = buildBodyParams();
            ApiResponse<SkillCardsMetadata> localVarResp = applyBoxSkillCardsWithHttpInfo(fileId, skillsApplyBoxSkillCardsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute applyBoxSkillCards request with HTTP info returned
         * @return ApiResponse&lt;SkillCardsMetadata&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the instance of the template that was applied to the file, including the data that was applied to the template. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SkillCardsMetadata> executeWithHttpInfo() throws ApiException {
            SkillsApplyBoxSkillCardsRequest skillsApplyBoxSkillCardsRequest = buildBodyParams();
            return applyBoxSkillCardsWithHttpInfo(fileId, skillsApplyBoxSkillCardsRequest);
        }

        /**
         * Execute applyBoxSkillCards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the instance of the template that was applied to the file, including the data that was applied to the template. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SkillCardsMetadata> _callback) throws ApiException {
            SkillsApplyBoxSkillCardsRequest skillsApplyBoxSkillCardsRequest = buildBodyParams();
            return applyBoxSkillCardsAsync(fileId, skillsApplyBoxSkillCardsRequest, _callback);
        }
    }

    /**
     * Create Box Skill cards on file
     * Applies one or more Box Skills metadata cards to a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return ApplyBoxSkillCardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the instance of the template that was applied to the file, including the data that was applied to the template. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ApplyBoxSkillCardsRequestBuilder applyBoxSkillCards(List<Object> cards, String fileId) throws IllegalArgumentException {
        if (cards == null) throw new IllegalArgumentException("\"cards\" is required but got null");
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new ApplyBoxSkillCardsRequestBuilder(cards, fileId);
    }
    private okhttp3.Call listBoxSkillCardsCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata/global/boxSkillsCards"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBoxSkillCardsValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling listBoxSkillCards(Async)");
        }

        return listBoxSkillCardsCall(fileId, _callback);

    }


    private ApiResponse<SkillCardsMetadata> listBoxSkillCardsWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = listBoxSkillCardsValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<SkillCardsMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listBoxSkillCardsAsync(String fileId, final ApiCallback<SkillCardsMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBoxSkillCardsValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<SkillCardsMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListBoxSkillCardsRequestBuilder {
        private final String fileId;

        private ListBoxSkillCardsRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Build call for listBoxSkillCards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all the metadata associated with a file.  This API does not support pagination and will therefore always return all of the metadata associated to the file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listBoxSkillCardsCall(fileId, _callback);
        }


        /**
         * Execute listBoxSkillCards request
         * @return SkillCardsMetadata
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all the metadata associated with a file.  This API does not support pagination and will therefore always return all of the metadata associated to the file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public SkillCardsMetadata execute() throws ApiException {
            ApiResponse<SkillCardsMetadata> localVarResp = listBoxSkillCardsWithHttpInfo(fileId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listBoxSkillCards request with HTTP info returned
         * @return ApiResponse&lt;SkillCardsMetadata&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all the metadata associated with a file.  This API does not support pagination and will therefore always return all of the metadata associated to the file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SkillCardsMetadata> executeWithHttpInfo() throws ApiException {
            return listBoxSkillCardsWithHttpInfo(fileId);
        }

        /**
         * Execute listBoxSkillCards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all the metadata associated with a file.  This API does not support pagination and will therefore always return all of the metadata associated to the file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SkillCardsMetadata> _callback) throws ApiException {
            return listBoxSkillCardsAsync(fileId, _callback);
        }
    }

    /**
     * List Box Skill cards on file
     * List the Box Skills metadata cards that are attached to a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return ListBoxSkillCardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all the metadata associated with a file.  This API does not support pagination and will therefore always return all of the metadata associated to the file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListBoxSkillCardsRequestBuilder listBoxSkillCards(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new ListBoxSkillCardsRequestBuilder(fileId);
    }
    private okhttp3.Call removeBoxSkillCardsCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata/global/boxSkillsCards"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeBoxSkillCardsValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling removeBoxSkillCards(Async)");
        }

        return removeBoxSkillCardsCall(fileId, _callback);

    }


    private ApiResponse<Void> removeBoxSkillCardsWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = removeBoxSkillCardsValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeBoxSkillCardsAsync(String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeBoxSkillCardsValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveBoxSkillCardsRequestBuilder {
        private final String fileId;

        private RemoveBoxSkillCardsRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Build call for removeBoxSkillCards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the cards are successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeBoxSkillCardsCall(fileId, _callback);
        }


        /**
         * Execute removeBoxSkillCards request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the cards are successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeBoxSkillCardsWithHttpInfo(fileId);
        }

        /**
         * Execute removeBoxSkillCards request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the cards are successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeBoxSkillCardsWithHttpInfo(fileId);
        }

        /**
         * Execute removeBoxSkillCards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the cards are successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeBoxSkillCardsAsync(fileId, _callback);
        }
    }

    /**
     * Remove Box Skill cards from file
     * Removes any Box Skills cards metadata from a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return RemoveBoxSkillCardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the cards are successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveBoxSkillCardsRequestBuilder removeBoxSkillCards(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new RemoveBoxSkillCardsRequestBuilder(fileId);
    }
    private okhttp3.Call updateAllBoxSkillCardsCall(String skillId, SkillsUpdateAllBoxSkillCardsRequest skillsUpdateAllBoxSkillCardsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skillsUpdateAllBoxSkillCardsRequest;

        // create path and map variables
        String localVarPath = "/skill_invocations/{skill_id}"
            .replace("{" + "skill_id" + "}", localVarApiClient.escapeString(skillId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAllBoxSkillCardsValidateBeforeCall(String skillId, SkillsUpdateAllBoxSkillCardsRequest skillsUpdateAllBoxSkillCardsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'skillId' is set
        if (skillId == null) {
            throw new ApiException("Missing the required parameter 'skillId' when calling updateAllBoxSkillCards(Async)");
        }

        return updateAllBoxSkillCardsCall(skillId, skillsUpdateAllBoxSkillCardsRequest, _callback);

    }


    private ApiResponse<Void> updateAllBoxSkillCardsWithHttpInfo(String skillId, SkillsUpdateAllBoxSkillCardsRequest skillsUpdateAllBoxSkillCardsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAllBoxSkillCardsValidateBeforeCall(skillId, skillsUpdateAllBoxSkillCardsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateAllBoxSkillCardsAsync(String skillId, SkillsUpdateAllBoxSkillCardsRequest skillsUpdateAllBoxSkillCardsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAllBoxSkillCardsValidateBeforeCall(skillId, skillsUpdateAllBoxSkillCardsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateAllBoxSkillCardsRequestBuilder {
        private final String status;
        private final SkillsUpdateAllBoxSkillCardsRequestMetadata metadata;
        private final SkillsUpdateAllBoxSkillCardsRequestFile _file;
        private final String skillId;
        private SkillsUpdateAllBoxSkillCardsRequestFileVersion fileVersion;
        private SkillsUpdateAllBoxSkillCardsRequestUsage usage;

        private UpdateAllBoxSkillCardsRequestBuilder(String status, SkillsUpdateAllBoxSkillCardsRequestMetadata metadata, SkillsUpdateAllBoxSkillCardsRequestFile _file, String skillId) {
            this.status = status;
            this.metadata = metadata;
            this._file = _file;
            this.skillId = skillId;
        }

        /**
         * Set fileVersion
         * @param fileVersion  (optional)
         * @return UpdateAllBoxSkillCardsRequestBuilder
         */
        public UpdateAllBoxSkillCardsRequestBuilder fileVersion(SkillsUpdateAllBoxSkillCardsRequestFileVersion fileVersion) {
            this.fileVersion = fileVersion;
            return this;
        }
        
        /**
         * Set usage
         * @param usage  (optional)
         * @return UpdateAllBoxSkillCardsRequestBuilder
         */
        public UpdateAllBoxSkillCardsRequestBuilder usage(SkillsUpdateAllBoxSkillCardsRequestUsage usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Build call for updateAllBoxSkillCards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an empty response when the card has been successfully updated. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SkillsUpdateAllBoxSkillCardsRequest skillsUpdateAllBoxSkillCardsRequest = buildBodyParams();
            return updateAllBoxSkillCardsCall(skillId, skillsUpdateAllBoxSkillCardsRequest, _callback);
        }

        private SkillsUpdateAllBoxSkillCardsRequest buildBodyParams() {
            SkillsUpdateAllBoxSkillCardsRequest skillsUpdateAllBoxSkillCardsRequest = new SkillsUpdateAllBoxSkillCardsRequest();
            if (this.status != null)
            skillsUpdateAllBoxSkillCardsRequest.status(SkillsUpdateAllBoxSkillCardsRequest.StatusEnum.fromValue(this.status));
            skillsUpdateAllBoxSkillCardsRequest.metadata(this.metadata);
            skillsUpdateAllBoxSkillCardsRequest._file(this._file);
            skillsUpdateAllBoxSkillCardsRequest.fileVersion(this.fileVersion);
            skillsUpdateAllBoxSkillCardsRequest.usage(this.usage);
            return skillsUpdateAllBoxSkillCardsRequest;
        }

        /**
         * Execute updateAllBoxSkillCards request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an empty response when the card has been successfully updated. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SkillsUpdateAllBoxSkillCardsRequest skillsUpdateAllBoxSkillCardsRequest = buildBodyParams();
            updateAllBoxSkillCardsWithHttpInfo(skillId, skillsUpdateAllBoxSkillCardsRequest);
        }

        /**
         * Execute updateAllBoxSkillCards request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an empty response when the card has been successfully updated. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SkillsUpdateAllBoxSkillCardsRequest skillsUpdateAllBoxSkillCardsRequest = buildBodyParams();
            return updateAllBoxSkillCardsWithHttpInfo(skillId, skillsUpdateAllBoxSkillCardsRequest);
        }

        /**
         * Execute updateAllBoxSkillCards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an empty response when the card has been successfully updated. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SkillsUpdateAllBoxSkillCardsRequest skillsUpdateAllBoxSkillCardsRequest = buildBodyParams();
            return updateAllBoxSkillCardsAsync(skillId, skillsUpdateAllBoxSkillCardsRequest, _callback);
        }
    }

    /**
     * Update all Box Skill cards on file
     * An alternative method that can be used to overwrite and update all Box Skill metadata cards on a file.
     * @param skillId The ID of the skill to apply this metadata for. (required)
     * @return UpdateAllBoxSkillCardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an empty response when the card has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAllBoxSkillCardsRequestBuilder updateAllBoxSkillCards(String status, SkillsUpdateAllBoxSkillCardsRequestMetadata metadata, SkillsUpdateAllBoxSkillCardsRequestFile _file, String skillId) throws IllegalArgumentException {
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (metadata == null) throw new IllegalArgumentException("\"metadata\" is required but got null");
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        if (skillId == null) throw new IllegalArgumentException("\"skillId\" is required but got null");
            

        return new UpdateAllBoxSkillCardsRequestBuilder(status, metadata, _file, skillId);
    }
    private okhttp3.Call updateBoxSkillCardsOnFileCall(String fileId, List<SkillsUpdateBoxSkillCardsOnFileRequestInner> skillsUpdateBoxSkillCardsOnFileRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skillsUpdateBoxSkillCardsOnFileRequestInner;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata/global/boxSkillsCards"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBoxSkillCardsOnFileValidateBeforeCall(String fileId, List<SkillsUpdateBoxSkillCardsOnFileRequestInner> skillsUpdateBoxSkillCardsOnFileRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling updateBoxSkillCardsOnFile(Async)");
        }

        return updateBoxSkillCardsOnFileCall(fileId, skillsUpdateBoxSkillCardsOnFileRequestInner, _callback);

    }


    private ApiResponse<SkillCardsMetadata> updateBoxSkillCardsOnFileWithHttpInfo(String fileId, List<SkillsUpdateBoxSkillCardsOnFileRequestInner> skillsUpdateBoxSkillCardsOnFileRequestInner) throws ApiException {
        okhttp3.Call localVarCall = updateBoxSkillCardsOnFileValidateBeforeCall(fileId, skillsUpdateBoxSkillCardsOnFileRequestInner, null);
        Type localVarReturnType = new TypeToken<SkillCardsMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBoxSkillCardsOnFileAsync(String fileId, List<SkillsUpdateBoxSkillCardsOnFileRequestInner> skillsUpdateBoxSkillCardsOnFileRequestInner, final ApiCallback<SkillCardsMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBoxSkillCardsOnFileValidateBeforeCall(fileId, skillsUpdateBoxSkillCardsOnFileRequestInner, _callback);
        Type localVarReturnType = new TypeToken<SkillCardsMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBoxSkillCardsOnFileRequestBuilder {
        private final String fileId;
        private List<SkillsUpdateBoxSkillCardsOnFileRequestInner> skillsUpdateBoxSkillCardsOnFileRequestInner;

        private UpdateBoxSkillCardsOnFileRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Set skillsUpdateBoxSkillCardsOnFileRequestInner
         * @param skillsUpdateBoxSkillCardsOnFileRequestInner  (optional)
         * @return UpdateBoxSkillCardsOnFileRequestBuilder
         */
        public UpdateBoxSkillCardsOnFileRequestBuilder skillsUpdateBoxSkillCardsOnFileRequestInner(List<SkillsUpdateBoxSkillCardsOnFileRequestInner> skillsUpdateBoxSkillCardsOnFileRequestInner) {
            this.skillsUpdateBoxSkillCardsOnFileRequestInner = skillsUpdateBoxSkillCardsOnFileRequestInner;
            return this;
        }

        /**
         * Build call for updateBoxSkillCardsOnFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<SkillsUpdateBoxSkillCardsOnFileRequestInner> skillsUpdateBoxSkillCardsOnFileRequestInner = buildBodyParams();
            return updateBoxSkillCardsOnFileCall(fileId, skillsUpdateBoxSkillCardsOnFileRequestInner, _callback);
        }

        private List<SkillsUpdateBoxSkillCardsOnFileRequestInner> buildBodyParams() {
            return this.skillsUpdateBoxSkillCardsOnFileRequestInner;
        }

        /**
         * Execute updateBoxSkillCardsOnFile request
         * @return SkillCardsMetadata
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public SkillCardsMetadata execute() throws ApiException {
            List<SkillsUpdateBoxSkillCardsOnFileRequestInner> skillsUpdateBoxSkillCardsOnFileRequestInner = buildBodyParams();
            ApiResponse<SkillCardsMetadata> localVarResp = updateBoxSkillCardsOnFileWithHttpInfo(fileId, skillsUpdateBoxSkillCardsOnFileRequestInner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBoxSkillCardsOnFile request with HTTP info returned
         * @return ApiResponse&lt;SkillCardsMetadata&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SkillCardsMetadata> executeWithHttpInfo() throws ApiException {
            List<SkillsUpdateBoxSkillCardsOnFileRequestInner> skillsUpdateBoxSkillCardsOnFileRequestInner = buildBodyParams();
            return updateBoxSkillCardsOnFileWithHttpInfo(fileId, skillsUpdateBoxSkillCardsOnFileRequestInner);
        }

        /**
         * Execute updateBoxSkillCardsOnFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SkillCardsMetadata> _callback) throws ApiException {
            List<SkillsUpdateBoxSkillCardsOnFileRequestInner> skillsUpdateBoxSkillCardsOnFileRequestInner = buildBodyParams();
            return updateBoxSkillCardsOnFileAsync(fileId, skillsUpdateBoxSkillCardsOnFileRequestInner, _callback);
        }
    }

    /**
     * Update Box Skill cards on file
     * Updates one or more Box Skills metadata cards to a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return UpdateBoxSkillCardsOnFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated metadata template, with the custom template data included. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBoxSkillCardsOnFileRequestBuilder updateBoxSkillCardsOnFile(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new UpdateBoxSkillCardsOnFileRequestBuilder(fileId);
    }
}
