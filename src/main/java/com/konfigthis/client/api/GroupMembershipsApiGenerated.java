/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.GroupMembership;
import com.konfigthis.client.model.GroupMemberships;
import com.konfigthis.client.model.GroupMembershipsCreateMembershipRequest;
import com.konfigthis.client.model.GroupMembershipsCreateMembershipRequestGroup;
import com.konfigthis.client.model.GroupMembershipsCreateMembershipRequestUser;
import com.konfigthis.client.model.GroupMembershipsUpdateMembershipRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GroupMembershipsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupMembershipsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GroupMembershipsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createMembershipCall(List<String> fields, GroupMembershipsCreateMembershipRequest groupMembershipsCreateMembershipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupMembershipsCreateMembershipRequest;

        // create path and map variables
        String localVarPath = "/group_memberships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMembershipValidateBeforeCall(List<String> fields, GroupMembershipsCreateMembershipRequest groupMembershipsCreateMembershipRequest, final ApiCallback _callback) throws ApiException {
        return createMembershipCall(fields, groupMembershipsCreateMembershipRequest, _callback);

    }


    private ApiResponse<GroupMembership> createMembershipWithHttpInfo(List<String> fields, GroupMembershipsCreateMembershipRequest groupMembershipsCreateMembershipRequest) throws ApiException {
        okhttp3.Call localVarCall = createMembershipValidateBeforeCall(fields, groupMembershipsCreateMembershipRequest, null);
        Type localVarReturnType = new TypeToken<GroupMembership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMembershipAsync(List<String> fields, GroupMembershipsCreateMembershipRequest groupMembershipsCreateMembershipRequest, final ApiCallback<GroupMembership> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMembershipValidateBeforeCall(fields, groupMembershipsCreateMembershipRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupMembership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMembershipRequestBuilder {
        private final GroupMembershipsCreateMembershipRequestUser user;
        private final GroupMembershipsCreateMembershipRequestGroup group;
        private String role;
        private Map<String, Boolean> configurablePermissions;
        private List<String> fields;

        private CreateMembershipRequestBuilder(GroupMembershipsCreateMembershipRequestUser user, GroupMembershipsCreateMembershipRequestGroup group) {
            this.user = user;
            this.group = group;
        }

        /**
         * Set role
         * @param role The role of the user in the group. (optional)
         * @return CreateMembershipRequestBuilder
         */
        public CreateMembershipRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Set configurablePermissions
         * @param configurablePermissions Custom configuration for the permissions an admin if a group will receive. This option has no effect on members with a role of &#x60;member&#x60;.  Setting these permissions overwrites the default access levels of an admin.  Specifying a value of \\\&quot;null\\\&quot; for this object will disable all configurable permissions. Specifying permissions will set them accordingly, omitted permissions will be enabled by default. (optional)
         * @return CreateMembershipRequestBuilder
         */
        public CreateMembershipRequestBuilder configurablePermissions(Map<String, Boolean> configurablePermissions) {
            this.configurablePermissions = configurablePermissions;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return CreateMembershipRequestBuilder
         */
        public CreateMembershipRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for createMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new group membership object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupMembershipsCreateMembershipRequest groupMembershipsCreateMembershipRequest = buildBodyParams();
            return createMembershipCall(fields, groupMembershipsCreateMembershipRequest, _callback);
        }

        private GroupMembershipsCreateMembershipRequest buildBodyParams() {
            GroupMembershipsCreateMembershipRequest groupMembershipsCreateMembershipRequest = new GroupMembershipsCreateMembershipRequest();
            groupMembershipsCreateMembershipRequest.user(this.user);
            groupMembershipsCreateMembershipRequest.group(this.group);
            if (this.role != null)
            groupMembershipsCreateMembershipRequest.role(GroupMembershipsCreateMembershipRequest.RoleEnum.fromValue(this.role));
            groupMembershipsCreateMembershipRequest.configurablePermissions(this.configurablePermissions);
            return groupMembershipsCreateMembershipRequest;
        }

        /**
         * Execute createMembership request
         * @return GroupMembership
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new group membership object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public GroupMembership execute() throws ApiException {
            GroupMembershipsCreateMembershipRequest groupMembershipsCreateMembershipRequest = buildBodyParams();
            ApiResponse<GroupMembership> localVarResp = createMembershipWithHttpInfo(fields, groupMembershipsCreateMembershipRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMembership request with HTTP info returned
         * @return ApiResponse&lt;GroupMembership&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new group membership object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupMembership> executeWithHttpInfo() throws ApiException {
            GroupMembershipsCreateMembershipRequest groupMembershipsCreateMembershipRequest = buildBodyParams();
            return createMembershipWithHttpInfo(fields, groupMembershipsCreateMembershipRequest);
        }

        /**
         * Execute createMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new group membership object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupMembership> _callback) throws ApiException {
            GroupMembershipsCreateMembershipRequest groupMembershipsCreateMembershipRequest = buildBodyParams();
            return createMembershipAsync(fields, groupMembershipsCreateMembershipRequest, _callback);
        }
    }

    /**
     * Add user to group
     * Creates a group membership. Only users with admin-level permissions will be able to use this API.
     * @return CreateMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new group membership object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateMembershipRequestBuilder createMembership(GroupMembershipsCreateMembershipRequestUser user, GroupMembershipsCreateMembershipRequestGroup group) throws IllegalArgumentException {
        if (user == null) throw new IllegalArgumentException("\"user\" is required but got null");
        if (group == null) throw new IllegalArgumentException("\"group\" is required but got null");
        return new CreateMembershipRequestBuilder(user, group);
    }
    private okhttp3.Call getAllCall(String userId, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/memberships"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String userId, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAll(Async)");
        }

        return getAllCall(userId, limit, offset, _callback);

    }


    private ApiResponse<GroupMemberships> getAllWithHttpInfo(String userId, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(userId, limit, offset, null);
        Type localVarReturnType = new TypeToken<GroupMemberships>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String userId, Long limit, Long offset, final ApiCallback<GroupMemberships> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(userId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GroupMemberships>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final String userId;
        private Long limit;
        private Long offset;

        private GetAllRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response. (optional, default to 0)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of membership objects. If there are no memberships, an empty collection will be returned. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(userId, limit, offset, _callback);
        }


        /**
         * Execute getAll request
         * @return GroupMemberships
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of membership objects. If there are no memberships, an empty collection will be returned. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public GroupMemberships execute() throws ApiException {
            ApiResponse<GroupMemberships> localVarResp = getAllWithHttpInfo(userId, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;GroupMemberships&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of membership objects. If there are no memberships, an empty collection will be returned. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupMemberships> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(userId, limit, offset);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of membership objects. If there are no memberships, an empty collection will be returned. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupMemberships> _callback) throws ApiException {
            return getAllAsync(userId, limit, offset, _callback);
        }
    }

    /**
     * List user&#39;s groups
     * Retrieves all the groups for a user. Only members of this group or users with admin-level permissions will be able to use this API.
     * @param userId The ID of the user. (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of membership objects. If there are no memberships, an empty collection will be returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetAllRequestBuilder(userId);
    }
    private okhttp3.Call getSpecificMembershipCall(String groupMembershipId, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/group_memberships/{group_membership_id}"
            .replace("{" + "group_membership_id" + "}", localVarApiClient.escapeString(groupMembershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificMembershipValidateBeforeCall(String groupMembershipId, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupMembershipId' is set
        if (groupMembershipId == null) {
            throw new ApiException("Missing the required parameter 'groupMembershipId' when calling getSpecificMembership(Async)");
        }

        return getSpecificMembershipCall(groupMembershipId, fields, _callback);

    }


    private ApiResponse<GroupMembership> getSpecificMembershipWithHttpInfo(String groupMembershipId, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getSpecificMembershipValidateBeforeCall(groupMembershipId, fields, null);
        Type localVarReturnType = new TypeToken<GroupMembership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificMembershipAsync(String groupMembershipId, List<String> fields, final ApiCallback<GroupMembership> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificMembershipValidateBeforeCall(groupMembershipId, fields, _callback);
        Type localVarReturnType = new TypeToken<GroupMembership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificMembershipRequestBuilder {
        private final String groupMembershipId;
        private List<String> fields;

        private GetSpecificMembershipRequestBuilder(String groupMembershipId) {
            this.groupMembershipId = groupMembershipId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return GetSpecificMembershipRequestBuilder
         */
        public GetSpecificMembershipRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getSpecificMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the group membership object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificMembershipCall(groupMembershipId, fields, _callback);
        }


        /**
         * Execute getSpecificMembership request
         * @return GroupMembership
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the group membership object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public GroupMembership execute() throws ApiException {
            ApiResponse<GroupMembership> localVarResp = getSpecificMembershipWithHttpInfo(groupMembershipId, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificMembership request with HTTP info returned
         * @return ApiResponse&lt;GroupMembership&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the group membership object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupMembership> executeWithHttpInfo() throws ApiException {
            return getSpecificMembershipWithHttpInfo(groupMembershipId, fields);
        }

        /**
         * Execute getSpecificMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the group membership object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupMembership> _callback) throws ApiException {
            return getSpecificMembershipAsync(groupMembershipId, fields, _callback);
        }
    }

    /**
     * Get group membership
     * Retrieves a specific group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
     * @param groupMembershipId The ID of the group membership. (required)
     * @return GetSpecificMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the group membership object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificMembershipRequestBuilder getSpecificMembership(String groupMembershipId) throws IllegalArgumentException {
        if (groupMembershipId == null) throw new IllegalArgumentException("\"groupMembershipId\" is required but got null");
            

        return new GetSpecificMembershipRequestBuilder(groupMembershipId);
    }
    private okhttp3.Call listMembersOfGroupCall(String groupId, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/memberships"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMembersOfGroupValidateBeforeCall(String groupId, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling listMembersOfGroup(Async)");
        }

        return listMembersOfGroupCall(groupId, limit, offset, _callback);

    }


    private ApiResponse<GroupMemberships> listMembersOfGroupWithHttpInfo(String groupId, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = listMembersOfGroupValidateBeforeCall(groupId, limit, offset, null);
        Type localVarReturnType = new TypeToken<GroupMemberships>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMembersOfGroupAsync(String groupId, Long limit, Long offset, final ApiCallback<GroupMemberships> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMembersOfGroupValidateBeforeCall(groupId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GroupMemberships>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMembersOfGroupRequestBuilder {
        private final String groupId;
        private Long limit;
        private Long offset;

        private ListMembersOfGroupRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListMembersOfGroupRequestBuilder
         */
        public ListMembersOfGroupRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response. (optional, default to 0)
         * @return ListMembersOfGroupRequestBuilder
         */
        public ListMembersOfGroupRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listMembersOfGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of membership objects. If there are no memberships, an empty collection will be returned. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMembersOfGroupCall(groupId, limit, offset, _callback);
        }


        /**
         * Execute listMembersOfGroup request
         * @return GroupMemberships
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of membership objects. If there are no memberships, an empty collection will be returned. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public GroupMemberships execute() throws ApiException {
            ApiResponse<GroupMemberships> localVarResp = listMembersOfGroupWithHttpInfo(groupId, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMembersOfGroup request with HTTP info returned
         * @return ApiResponse&lt;GroupMemberships&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of membership objects. If there are no memberships, an empty collection will be returned. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupMemberships> executeWithHttpInfo() throws ApiException {
            return listMembersOfGroupWithHttpInfo(groupId, limit, offset);
        }

        /**
         * Execute listMembersOfGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of membership objects. If there are no memberships, an empty collection will be returned. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupMemberships> _callback) throws ApiException {
            return listMembersOfGroupAsync(groupId, limit, offset, _callback);
        }
    }

    /**
     * List members of group
     * Retrieves all the members for a group. Only members of this group or users with admin-level permissions will be able to use this API.
     * @param groupId The ID of the group. (required)
     * @return ListMembersOfGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of membership objects. If there are no memberships, an empty collection will be returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListMembersOfGroupRequestBuilder listMembersOfGroup(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new ListMembersOfGroupRequestBuilder(groupId);
    }
    private okhttp3.Call removeUserFromGroupCall(String groupMembershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/group_memberships/{group_membership_id}"
            .replace("{" + "group_membership_id" + "}", localVarApiClient.escapeString(groupMembershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserFromGroupValidateBeforeCall(String groupMembershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupMembershipId' is set
        if (groupMembershipId == null) {
            throw new ApiException("Missing the required parameter 'groupMembershipId' when calling removeUserFromGroup(Async)");
        }

        return removeUserFromGroupCall(groupMembershipId, _callback);

    }


    private ApiResponse<Void> removeUserFromGroupWithHttpInfo(String groupMembershipId) throws ApiException {
        okhttp3.Call localVarCall = removeUserFromGroupValidateBeforeCall(groupMembershipId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeUserFromGroupAsync(String groupMembershipId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserFromGroupValidateBeforeCall(groupMembershipId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveUserFromGroupRequestBuilder {
        private final String groupMembershipId;

        private RemoveUserFromGroupRequestBuilder(String groupMembershipId) {
            this.groupMembershipId = groupMembershipId;
        }

        /**
         * Build call for removeUserFromGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the membership was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeUserFromGroupCall(groupMembershipId, _callback);
        }


        /**
         * Execute removeUserFromGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the membership was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeUserFromGroupWithHttpInfo(groupMembershipId);
        }

        /**
         * Execute removeUserFromGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the membership was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeUserFromGroupWithHttpInfo(groupMembershipId);
        }

        /**
         * Execute removeUserFromGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> A blank response is returned if the membership was successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeUserFromGroupAsync(groupMembershipId, _callback);
        }
    }

    /**
     * Remove user from group
     * Deletes a specific group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
     * @param groupMembershipId The ID of the group membership. (required)
     * @return RemoveUserFromGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A blank response is returned if the membership was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUserFromGroupRequestBuilder removeUserFromGroup(String groupMembershipId) throws IllegalArgumentException {
        if (groupMembershipId == null) throw new IllegalArgumentException("\"groupMembershipId\" is required but got null");
            

        return new RemoveUserFromGroupRequestBuilder(groupMembershipId);
    }
    private okhttp3.Call updateMembershipCall(String groupMembershipId, List<String> fields, GroupMembershipsUpdateMembershipRequest groupMembershipsUpdateMembershipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupMembershipsUpdateMembershipRequest;

        // create path and map variables
        String localVarPath = "/group_memberships/{group_membership_id}"
            .replace("{" + "group_membership_id" + "}", localVarApiClient.escapeString(groupMembershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembershipValidateBeforeCall(String groupMembershipId, List<String> fields, GroupMembershipsUpdateMembershipRequest groupMembershipsUpdateMembershipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupMembershipId' is set
        if (groupMembershipId == null) {
            throw new ApiException("Missing the required parameter 'groupMembershipId' when calling updateMembership(Async)");
        }

        return updateMembershipCall(groupMembershipId, fields, groupMembershipsUpdateMembershipRequest, _callback);

    }


    private ApiResponse<GroupMembership> updateMembershipWithHttpInfo(String groupMembershipId, List<String> fields, GroupMembershipsUpdateMembershipRequest groupMembershipsUpdateMembershipRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMembershipValidateBeforeCall(groupMembershipId, fields, groupMembershipsUpdateMembershipRequest, null);
        Type localVarReturnType = new TypeToken<GroupMembership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMembershipAsync(String groupMembershipId, List<String> fields, GroupMembershipsUpdateMembershipRequest groupMembershipsUpdateMembershipRequest, final ApiCallback<GroupMembership> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembershipValidateBeforeCall(groupMembershipId, fields, groupMembershipsUpdateMembershipRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupMembership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMembershipRequestBuilder {
        private final String groupMembershipId;
        private String role;
        private Map<String, Boolean> configurablePermissions;
        private List<String> fields;

        private UpdateMembershipRequestBuilder(String groupMembershipId) {
            this.groupMembershipId = groupMembershipId;
        }

        /**
         * Set role
         * @param role The role of the user in the group. (optional)
         * @return UpdateMembershipRequestBuilder
         */
        public UpdateMembershipRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Set configurablePermissions
         * @param configurablePermissions Custom configuration for the permissions an admin if a group will receive. This option has no effect on members with a role of &#x60;member&#x60;.  Setting these permissions overwrites the default access levels of an admin.  Specifying a value of \\\&quot;null\\\&quot; for this object will disable all configurable permissions. Specifying permissions will set them accordingly, omitted permissions will be enabled by default. (optional)
         * @return UpdateMembershipRequestBuilder
         */
        public UpdateMembershipRequestBuilder configurablePermissions(Map<String, Boolean> configurablePermissions) {
            this.configurablePermissions = configurablePermissions;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return UpdateMembershipRequestBuilder
         */
        public UpdateMembershipRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for updateMembership
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new group membership object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupMembershipsUpdateMembershipRequest groupMembershipsUpdateMembershipRequest = buildBodyParams();
            return updateMembershipCall(groupMembershipId, fields, groupMembershipsUpdateMembershipRequest, _callback);
        }

        private GroupMembershipsUpdateMembershipRequest buildBodyParams() {
            GroupMembershipsUpdateMembershipRequest groupMembershipsUpdateMembershipRequest = new GroupMembershipsUpdateMembershipRequest();
            if (this.role != null)
            groupMembershipsUpdateMembershipRequest.role(GroupMembershipsUpdateMembershipRequest.RoleEnum.fromValue(this.role));
            groupMembershipsUpdateMembershipRequest.configurablePermissions(this.configurablePermissions);
            return groupMembershipsUpdateMembershipRequest;
        }

        /**
         * Execute updateMembership request
         * @return GroupMembership
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new group membership object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public GroupMembership execute() throws ApiException {
            GroupMembershipsUpdateMembershipRequest groupMembershipsUpdateMembershipRequest = buildBodyParams();
            ApiResponse<GroupMembership> localVarResp = updateMembershipWithHttpInfo(groupMembershipId, fields, groupMembershipsUpdateMembershipRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMembership request with HTTP info returned
         * @return ApiResponse&lt;GroupMembership&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new group membership object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupMembership> executeWithHttpInfo() throws ApiException {
            GroupMembershipsUpdateMembershipRequest groupMembershipsUpdateMembershipRequest = buildBodyParams();
            return updateMembershipWithHttpInfo(groupMembershipId, fields, groupMembershipsUpdateMembershipRequest);
        }

        /**
         * Execute updateMembership request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a new group membership object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupMembership> _callback) throws ApiException {
            GroupMembershipsUpdateMembershipRequest groupMembershipsUpdateMembershipRequest = buildBodyParams();
            return updateMembershipAsync(groupMembershipId, fields, groupMembershipsUpdateMembershipRequest, _callback);
        }
    }

    /**
     * Update group membership
     * Updates a user&#39;s group membership. Only admins of this group or users with admin-level permissions will be able to use this API.
     * @param groupMembershipId The ID of the group membership. (required)
     * @return UpdateMembershipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a new group membership object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMembershipRequestBuilder updateMembership(String groupMembershipId) throws IllegalArgumentException {
        if (groupMembershipId == null) throw new IllegalArgumentException("\"groupMembershipId\" is required but got null");
            

        return new UpdateMembershipRequestBuilder(groupMembershipId);
    }
}
