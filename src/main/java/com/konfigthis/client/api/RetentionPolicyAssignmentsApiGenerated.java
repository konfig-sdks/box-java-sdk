/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FilesUnderRetention;
import com.konfigthis.client.model.RetentionPolicyAssignment;
import com.konfigthis.client.model.RetentionPolicyAssignments;
import com.konfigthis.client.model.RetentionPolicyAssignmentsCreateRetentionAssignmentRequest;
import com.konfigthis.client.model.RetentionPolicyAssignmentsCreateRetentionAssignmentRequestAssignTo;
import com.konfigthis.client.model.RetentionPolicyAssignmentsCreateRetentionAssignmentRequestFilterFieldsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RetentionPolicyAssignmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RetentionPolicyAssignmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RetentionPolicyAssignmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRetentionAssignmentCall(RetentionPolicyAssignmentsCreateRetentionAssignmentRequest retentionPolicyAssignmentsCreateRetentionAssignmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = retentionPolicyAssignmentsCreateRetentionAssignmentRequest;

        // create path and map variables
        String localVarPath = "/retention_policy_assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRetentionAssignmentValidateBeforeCall(RetentionPolicyAssignmentsCreateRetentionAssignmentRequest retentionPolicyAssignmentsCreateRetentionAssignmentRequest, final ApiCallback _callback) throws ApiException {
        return createRetentionAssignmentCall(retentionPolicyAssignmentsCreateRetentionAssignmentRequest, _callback);

    }


    private ApiResponse<RetentionPolicyAssignment> createRetentionAssignmentWithHttpInfo(RetentionPolicyAssignmentsCreateRetentionAssignmentRequest retentionPolicyAssignmentsCreateRetentionAssignmentRequest) throws ApiException {
        okhttp3.Call localVarCall = createRetentionAssignmentValidateBeforeCall(retentionPolicyAssignmentsCreateRetentionAssignmentRequest, null);
        Type localVarReturnType = new TypeToken<RetentionPolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRetentionAssignmentAsync(RetentionPolicyAssignmentsCreateRetentionAssignmentRequest retentionPolicyAssignmentsCreateRetentionAssignmentRequest, final ApiCallback<RetentionPolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRetentionAssignmentValidateBeforeCall(retentionPolicyAssignmentsCreateRetentionAssignmentRequest, _callback);
        Type localVarReturnType = new TypeToken<RetentionPolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRetentionAssignmentRequestBuilder {
        private final String policyId;
        private final RetentionPolicyAssignmentsCreateRetentionAssignmentRequestAssignTo assignTo;
        private List<RetentionPolicyAssignmentsCreateRetentionAssignmentRequestFilterFieldsInner> filterFields;
        private String startDateField;

        private CreateRetentionAssignmentRequestBuilder(String policyId, RetentionPolicyAssignmentsCreateRetentionAssignmentRequestAssignTo assignTo) {
            this.policyId = policyId;
            this.assignTo = assignTo;
        }

        /**
         * Set filterFields
         * @param filterFields If the &#x60;assign_to&#x60; type is &#x60;metadata_template&#x60;, then optionally add the &#x60;filter_fields&#x60; parameter which will require an array of objects with a field entry and a value entry. Currently only one object of &#x60;field&#x60; and &#x60;value&#x60; is supported. (optional)
         * @return CreateRetentionAssignmentRequestBuilder
         */
        public CreateRetentionAssignmentRequestBuilder filterFields(List<RetentionPolicyAssignmentsCreateRetentionAssignmentRequestFilterFieldsInner> filterFields) {
            this.filterFields = filterFields;
            return this;
        }
        
        /**
         * Set startDateField
         * @param startDateField The date the retention policy assignment begins.  If the &#x60;assigned_to&#x60; type is &#x60;metadata_template&#x60;, this field can be a date field&#39;s metadata attribute key id. (optional)
         * @return CreateRetentionAssignmentRequestBuilder
         */
        public CreateRetentionAssignmentRequestBuilder startDateField(String startDateField) {
            this.startDateField = startDateField;
            return this;
        }
        
        /**
         * Build call for createRetentionAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new retention policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RetentionPolicyAssignmentsCreateRetentionAssignmentRequest retentionPolicyAssignmentsCreateRetentionAssignmentRequest = buildBodyParams();
            return createRetentionAssignmentCall(retentionPolicyAssignmentsCreateRetentionAssignmentRequest, _callback);
        }

        private RetentionPolicyAssignmentsCreateRetentionAssignmentRequest buildBodyParams() {
            RetentionPolicyAssignmentsCreateRetentionAssignmentRequest retentionPolicyAssignmentsCreateRetentionAssignmentRequest = new RetentionPolicyAssignmentsCreateRetentionAssignmentRequest();
            retentionPolicyAssignmentsCreateRetentionAssignmentRequest.policyId(this.policyId);
            retentionPolicyAssignmentsCreateRetentionAssignmentRequest.assignTo(this.assignTo);
            retentionPolicyAssignmentsCreateRetentionAssignmentRequest.filterFields(this.filterFields);
            retentionPolicyAssignmentsCreateRetentionAssignmentRequest.startDateField(this.startDateField);
            return retentionPolicyAssignmentsCreateRetentionAssignmentRequest;
        }

        /**
         * Execute createRetentionAssignment request
         * @return RetentionPolicyAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new retention policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public RetentionPolicyAssignment execute() throws ApiException {
            RetentionPolicyAssignmentsCreateRetentionAssignmentRequest retentionPolicyAssignmentsCreateRetentionAssignmentRequest = buildBodyParams();
            ApiResponse<RetentionPolicyAssignment> localVarResp = createRetentionAssignmentWithHttpInfo(retentionPolicyAssignmentsCreateRetentionAssignmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRetentionAssignment request with HTTP info returned
         * @return ApiResponse&lt;RetentionPolicyAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new retention policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RetentionPolicyAssignment> executeWithHttpInfo() throws ApiException {
            RetentionPolicyAssignmentsCreateRetentionAssignmentRequest retentionPolicyAssignmentsCreateRetentionAssignmentRequest = buildBodyParams();
            return createRetentionAssignmentWithHttpInfo(retentionPolicyAssignmentsCreateRetentionAssignmentRequest);
        }

        /**
         * Execute createRetentionAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a new retention policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RetentionPolicyAssignment> _callback) throws ApiException {
            RetentionPolicyAssignmentsCreateRetentionAssignmentRequest retentionPolicyAssignmentsCreateRetentionAssignmentRequest = buildBodyParams();
            return createRetentionAssignmentAsync(retentionPolicyAssignmentsCreateRetentionAssignmentRequest, _callback);
        }
    }

    /**
     * Assign retention policy
     * Assigns a retention policy to an item.
     * @return CreateRetentionAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a new retention policy assignment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRetentionAssignmentRequestBuilder createRetentionAssignment(String policyId, RetentionPolicyAssignmentsCreateRetentionAssignmentRequestAssignTo assignTo) throws IllegalArgumentException {
        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        if (assignTo == null) throw new IllegalArgumentException("\"assignTo\" is required but got null");
        return new CreateRetentionAssignmentRequestBuilder(policyId, assignTo);
    }
    private okhttp3.Call getAssignmentCall(String retentionPolicyAssignmentId, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retention_policy_assignments/{retention_policy_assignment_id}"
            .replace("{" + "retention_policy_assignment_id" + "}", localVarApiClient.escapeString(retentionPolicyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssignmentValidateBeforeCall(String retentionPolicyAssignmentId, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retentionPolicyAssignmentId' is set
        if (retentionPolicyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'retentionPolicyAssignmentId' when calling getAssignment(Async)");
        }

        return getAssignmentCall(retentionPolicyAssignmentId, fields, _callback);

    }


    private ApiResponse<RetentionPolicyAssignment> getAssignmentWithHttpInfo(String retentionPolicyAssignmentId, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getAssignmentValidateBeforeCall(retentionPolicyAssignmentId, fields, null);
        Type localVarReturnType = new TypeToken<RetentionPolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssignmentAsync(String retentionPolicyAssignmentId, List<String> fields, final ApiCallback<RetentionPolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssignmentValidateBeforeCall(retentionPolicyAssignmentId, fields, _callback);
        Type localVarReturnType = new TypeToken<RetentionPolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssignmentRequestBuilder {
        private final String retentionPolicyAssignmentId;
        private List<String> fields;

        private GetAssignmentRequestBuilder(String retentionPolicyAssignmentId) {
            this.retentionPolicyAssignmentId = retentionPolicyAssignmentId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return GetAssignmentRequestBuilder
         */
        public GetAssignmentRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the retention policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssignmentCall(retentionPolicyAssignmentId, fields, _callback);
        }


        /**
         * Execute getAssignment request
         * @return RetentionPolicyAssignment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the retention policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public RetentionPolicyAssignment execute() throws ApiException {
            ApiResponse<RetentionPolicyAssignment> localVarResp = getAssignmentWithHttpInfo(retentionPolicyAssignmentId, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssignment request with HTTP info returned
         * @return ApiResponse&lt;RetentionPolicyAssignment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the retention policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RetentionPolicyAssignment> executeWithHttpInfo() throws ApiException {
            return getAssignmentWithHttpInfo(retentionPolicyAssignmentId, fields);
        }

        /**
         * Execute getAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the retention policy assignment object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RetentionPolicyAssignment> _callback) throws ApiException {
            return getAssignmentAsync(retentionPolicyAssignmentId, fields, _callback);
        }
    }

    /**
     * Get retention policy assignment
     * Retrieves a retention policy assignment
     * @param retentionPolicyAssignmentId The ID of the retention policy assignment. (required)
     * @return GetAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the retention policy assignment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetAssignmentRequestBuilder getAssignment(String retentionPolicyAssignmentId) throws IllegalArgumentException {
        if (retentionPolicyAssignmentId == null) throw new IllegalArgumentException("\"retentionPolicyAssignmentId\" is required but got null");
            

        return new GetAssignmentRequestBuilder(retentionPolicyAssignmentId);
    }
    private okhttp3.Call listAllAssignmentsCall(String retentionPolicyId, String type, List<String> fields, String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retention_policies/{retention_policy_id}/assignments"
            .replace("{" + "retention_policy_id" + "}", localVarApiClient.escapeString(retentionPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllAssignmentsValidateBeforeCall(String retentionPolicyId, String type, List<String> fields, String marker, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retentionPolicyId' is set
        if (retentionPolicyId == null) {
            throw new ApiException("Missing the required parameter 'retentionPolicyId' when calling listAllAssignments(Async)");
        }

        return listAllAssignmentsCall(retentionPolicyId, type, fields, marker, limit, _callback);

    }


    private ApiResponse<RetentionPolicyAssignments> listAllAssignmentsWithHttpInfo(String retentionPolicyId, String type, List<String> fields, String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listAllAssignmentsValidateBeforeCall(retentionPolicyId, type, fields, marker, limit, null);
        Type localVarReturnType = new TypeToken<RetentionPolicyAssignments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAssignmentsAsync(String retentionPolicyId, String type, List<String> fields, String marker, Long limit, final ApiCallback<RetentionPolicyAssignments> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllAssignmentsValidateBeforeCall(retentionPolicyId, type, fields, marker, limit, _callback);
        Type localVarReturnType = new TypeToken<RetentionPolicyAssignments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllAssignmentsRequestBuilder {
        private final String retentionPolicyId;
        private String type;
        private List<String> fields;
        private String marker;
        private Long limit;

        private ListAllAssignmentsRequestBuilder(String retentionPolicyId) {
            this.retentionPolicyId = retentionPolicyId;
        }

        /**
         * Set type
         * @param type The type of the retention policy assignment to retrieve. (optional)
         * @return ListAllAssignmentsRequestBuilder
         */
        public ListAllAssignmentsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return ListAllAssignmentsRequestBuilder
         */
        public ListAllAssignmentsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination. (optional)
         * @return ListAllAssignmentsRequestBuilder
         */
        public ListAllAssignmentsRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListAllAssignmentsRequestBuilder
         */
        public ListAllAssignmentsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listAllAssignments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of the retention policy assignments associated with the specified retention policy. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllAssignmentsCall(retentionPolicyId, type, fields, marker, limit, _callback);
        }


        /**
         * Execute listAllAssignments request
         * @return RetentionPolicyAssignments
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of the retention policy assignments associated with the specified retention policy. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public RetentionPolicyAssignments execute() throws ApiException {
            ApiResponse<RetentionPolicyAssignments> localVarResp = listAllAssignmentsWithHttpInfo(retentionPolicyId, type, fields, marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllAssignments request with HTTP info returned
         * @return ApiResponse&lt;RetentionPolicyAssignments&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of the retention policy assignments associated with the specified retention policy. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RetentionPolicyAssignments> executeWithHttpInfo() throws ApiException {
            return listAllAssignmentsWithHttpInfo(retentionPolicyId, type, fields, marker, limit);
        }

        /**
         * Execute listAllAssignments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of the retention policy assignments associated with the specified retention policy. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RetentionPolicyAssignments> _callback) throws ApiException {
            return listAllAssignmentsAsync(retentionPolicyId, type, fields, marker, limit, _callback);
        }
    }

    /**
     * List retention policy assignments
     * Returns a list of all retention policy assignments associated with a specified retention policy.
     * @param retentionPolicyId The ID of the retention policy. (required)
     * @return ListAllAssignmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of the retention policy assignments associated with the specified retention policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllAssignmentsRequestBuilder listAllAssignments(String retentionPolicyId) throws IllegalArgumentException {
        if (retentionPolicyId == null) throw new IllegalArgumentException("\"retentionPolicyId\" is required but got null");
            

        return new ListAllAssignmentsRequestBuilder(retentionPolicyId);
    }
    private okhttp3.Call listFileVersionsUnderRetentionCall(String retentionPolicyAssignmentId, String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retention_policy_assignments/{retention_policy_assignment_id}/file_versions_under_retention"
            .replace("{" + "retention_policy_assignment_id" + "}", localVarApiClient.escapeString(retentionPolicyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFileVersionsUnderRetentionValidateBeforeCall(String retentionPolicyAssignmentId, String marker, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retentionPolicyAssignmentId' is set
        if (retentionPolicyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'retentionPolicyAssignmentId' when calling listFileVersionsUnderRetention(Async)");
        }

        return listFileVersionsUnderRetentionCall(retentionPolicyAssignmentId, marker, limit, _callback);

    }


    private ApiResponse<FilesUnderRetention> listFileVersionsUnderRetentionWithHttpInfo(String retentionPolicyAssignmentId, String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listFileVersionsUnderRetentionValidateBeforeCall(retentionPolicyAssignmentId, marker, limit, null);
        Type localVarReturnType = new TypeToken<FilesUnderRetention>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFileVersionsUnderRetentionAsync(String retentionPolicyAssignmentId, String marker, Long limit, final ApiCallback<FilesUnderRetention> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFileVersionsUnderRetentionValidateBeforeCall(retentionPolicyAssignmentId, marker, limit, _callback);
        Type localVarReturnType = new TypeToken<FilesUnderRetention>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFileVersionsUnderRetentionRequestBuilder {
        private final String retentionPolicyAssignmentId;
        private String marker;
        private Long limit;

        private ListFileVersionsUnderRetentionRequestBuilder(String retentionPolicyAssignmentId) {
            this.retentionPolicyAssignmentId = retentionPolicyAssignmentId;
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListFileVersionsUnderRetentionRequestBuilder
         */
        public ListFileVersionsUnderRetentionRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListFileVersionsUnderRetentionRequestBuilder
         */
        public ListFileVersionsUnderRetentionRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listFileVersionsUnderRetention
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of file versions under retention that are associated with the specified retention policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFileVersionsUnderRetentionCall(retentionPolicyAssignmentId, marker, limit, _callback);
        }


        /**
         * Execute listFileVersionsUnderRetention request
         * @return FilesUnderRetention
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of file versions under retention that are associated with the specified retention policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FilesUnderRetention execute() throws ApiException {
            ApiResponse<FilesUnderRetention> localVarResp = listFileVersionsUnderRetentionWithHttpInfo(retentionPolicyAssignmentId, marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFileVersionsUnderRetention request with HTTP info returned
         * @return ApiResponse&lt;FilesUnderRetention&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of file versions under retention that are associated with the specified retention policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesUnderRetention> executeWithHttpInfo() throws ApiException {
            return listFileVersionsUnderRetentionWithHttpInfo(retentionPolicyAssignmentId, marker, limit);
        }

        /**
         * Execute listFileVersionsUnderRetention request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of file versions under retention that are associated with the specified retention policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesUnderRetention> _callback) throws ApiException {
            return listFileVersionsUnderRetentionAsync(retentionPolicyAssignmentId, marker, limit, _callback);
        }
    }

    /**
     * Get file versions under retention
     * Returns a list of file versions under retention for a retention policy assignment.
     * @param retentionPolicyAssignmentId The ID of the retention policy assignment. (required)
     * @return ListFileVersionsUnderRetentionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of file versions under retention that are associated with the specified retention policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListFileVersionsUnderRetentionRequestBuilder listFileVersionsUnderRetention(String retentionPolicyAssignmentId) throws IllegalArgumentException {
        if (retentionPolicyAssignmentId == null) throw new IllegalArgumentException("\"retentionPolicyAssignmentId\" is required but got null");
            

        return new ListFileVersionsUnderRetentionRequestBuilder(retentionPolicyAssignmentId);
    }
    private okhttp3.Call listFilesUnderRetentionCall(String retentionPolicyAssignmentId, String marker, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retention_policy_assignments/{retention_policy_assignment_id}/files_under_retention"
            .replace("{" + "retention_policy_assignment_id" + "}", localVarApiClient.escapeString(retentionPolicyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFilesUnderRetentionValidateBeforeCall(String retentionPolicyAssignmentId, String marker, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retentionPolicyAssignmentId' is set
        if (retentionPolicyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'retentionPolicyAssignmentId' when calling listFilesUnderRetention(Async)");
        }

        return listFilesUnderRetentionCall(retentionPolicyAssignmentId, marker, limit, _callback);

    }


    private ApiResponse<FilesUnderRetention> listFilesUnderRetentionWithHttpInfo(String retentionPolicyAssignmentId, String marker, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listFilesUnderRetentionValidateBeforeCall(retentionPolicyAssignmentId, marker, limit, null);
        Type localVarReturnType = new TypeToken<FilesUnderRetention>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFilesUnderRetentionAsync(String retentionPolicyAssignmentId, String marker, Long limit, final ApiCallback<FilesUnderRetention> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFilesUnderRetentionValidateBeforeCall(retentionPolicyAssignmentId, marker, limit, _callback);
        Type localVarReturnType = new TypeToken<FilesUnderRetention>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFilesUnderRetentionRequestBuilder {
        private final String retentionPolicyAssignmentId;
        private String marker;
        private Long limit;

        private ListFilesUnderRetentionRequestBuilder(String retentionPolicyAssignmentId) {
            this.retentionPolicyAssignmentId = retentionPolicyAssignmentId;
        }

        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return ListFilesUnderRetentionRequestBuilder
         */
        public ListFilesUnderRetentionRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return ListFilesUnderRetentionRequestBuilder
         */
        public ListFilesUnderRetentionRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listFilesUnderRetention
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of files under retention that are associated with the specified retention policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFilesUnderRetentionCall(retentionPolicyAssignmentId, marker, limit, _callback);
        }


        /**
         * Execute listFilesUnderRetention request
         * @return FilesUnderRetention
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of files under retention that are associated with the specified retention policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public FilesUnderRetention execute() throws ApiException {
            ApiResponse<FilesUnderRetention> localVarResp = listFilesUnderRetentionWithHttpInfo(retentionPolicyAssignmentId, marker, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFilesUnderRetention request with HTTP info returned
         * @return ApiResponse&lt;FilesUnderRetention&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of files under retention that are associated with the specified retention policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesUnderRetention> executeWithHttpInfo() throws ApiException {
            return listFilesUnderRetentionWithHttpInfo(retentionPolicyAssignmentId, marker, limit);
        }

        /**
         * Execute listFilesUnderRetention request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of files under retention that are associated with the specified retention policy assignment. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesUnderRetention> _callback) throws ApiException {
            return listFilesUnderRetentionAsync(retentionPolicyAssignmentId, marker, limit, _callback);
        }
    }

    /**
     * Get files under retention
     * Returns a list of files under retention for a retention policy assignment.
     * @param retentionPolicyAssignmentId The ID of the retention policy assignment. (required)
     * @return ListFilesUnderRetentionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of files under retention that are associated with the specified retention policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListFilesUnderRetentionRequestBuilder listFilesUnderRetention(String retentionPolicyAssignmentId) throws IllegalArgumentException {
        if (retentionPolicyAssignmentId == null) throw new IllegalArgumentException("\"retentionPolicyAssignmentId\" is required but got null");
            

        return new ListFilesUnderRetentionRequestBuilder(retentionPolicyAssignmentId);
    }
    private okhttp3.Call removeAssignmentCall(String retentionPolicyAssignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retention_policy_assignments/{retention_policy_assignment_id}"
            .replace("{" + "retention_policy_assignment_id" + "}", localVarApiClient.escapeString(retentionPolicyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAssignmentValidateBeforeCall(String retentionPolicyAssignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'retentionPolicyAssignmentId' is set
        if (retentionPolicyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'retentionPolicyAssignmentId' when calling removeAssignment(Async)");
        }

        return removeAssignmentCall(retentionPolicyAssignmentId, _callback);

    }


    private ApiResponse<Void> removeAssignmentWithHttpInfo(String retentionPolicyAssignmentId) throws ApiException {
        okhttp3.Call localVarCall = removeAssignmentValidateBeforeCall(retentionPolicyAssignmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAssignmentAsync(String retentionPolicyAssignmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAssignmentValidateBeforeCall(retentionPolicyAssignmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveAssignmentRequestBuilder {
        private final String retentionPolicyAssignmentId;

        private RemoveAssignmentRequestBuilder(String retentionPolicyAssignmentId) {
            this.retentionPolicyAssignmentId = retentionPolicyAssignmentId;
        }

        /**
         * Build call for removeAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the policy assignment is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeAssignmentCall(retentionPolicyAssignmentId, _callback);
        }


        /**
         * Execute removeAssignment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the policy assignment is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeAssignmentWithHttpInfo(retentionPolicyAssignmentId);
        }

        /**
         * Execute removeAssignment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the policy assignment is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeAssignmentWithHttpInfo(retentionPolicyAssignmentId);
        }

        /**
         * Execute removeAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the policy assignment is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAssignmentAsync(retentionPolicyAssignmentId, _callback);
        }
    }

    /**
     * Remove retention policy assignment
     * Removes a retention policy assignment applied to content.
     * @param retentionPolicyAssignmentId The ID of the retention policy assignment. (required)
     * @return RemoveAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the policy assignment is successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAssignmentRequestBuilder removeAssignment(String retentionPolicyAssignmentId) throws IllegalArgumentException {
        if (retentionPolicyAssignmentId == null) throw new IllegalArgumentException("\"retentionPolicyAssignmentId\" is required but got null");
            

        return new RemoveAssignmentRequestBuilder(retentionPolicyAssignmentId);
    }
}
