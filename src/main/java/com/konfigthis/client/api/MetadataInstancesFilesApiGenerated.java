/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AMetadataInstanceUpdateOperation;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.MetadataFull;
import com.konfigthis.client.model.Metadatas;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MetadataInstancesFilesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetadataInstancesFilesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MetadataInstancesFilesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call applyTemplateCall(String fileId, String scope, String templateKey, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata/{scope}/{template_key}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "template_key" + "}", localVarApiClient.escapeString(templateKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyTemplateValidateBeforeCall(String fileId, String scope, String templateKey, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling applyTemplate(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling applyTemplate(Async)");
        }

        // verify the required parameter 'templateKey' is set
        if (templateKey == null) {
            throw new ApiException("Missing the required parameter 'templateKey' when calling applyTemplate(Async)");
        }

        return applyTemplateCall(fileId, scope, templateKey, requestBody, _callback);

    }


    private ApiResponse<MetadataFull> applyTemplateWithHttpInfo(String fileId, String scope, String templateKey, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = applyTemplateValidateBeforeCall(fileId, scope, templateKey, requestBody, null);
        Type localVarReturnType = new TypeToken<MetadataFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call applyTemplateAsync(String fileId, String scope, String templateKey, Map<String, Object> requestBody, final ApiCallback<MetadataFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyTemplateValidateBeforeCall(fileId, scope, templateKey, requestBody, _callback);
        Type localVarReturnType = new TypeToken<MetadataFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApplyTemplateRequestBuilder {
        private final String fileId;
        private final String scope;
        private final String templateKey;

        private ApplyTemplateRequestBuilder(String fileId, String scope, String templateKey) {
            this.fileId = fileId;
            this.scope = scope;
            this.templateKey = templateKey;
        }

        /**
         * Build call for applyTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the instance of the template that was applied to the file, including the data that was applied to the template. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return applyTemplateCall(fileId, scope, templateKey, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute applyTemplate request
         * @return MetadataFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the instance of the template that was applied to the file, including the data that was applied to the template. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataFull execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<MetadataFull> localVarResp = applyTemplateWithHttpInfo(fileId, scope, templateKey, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute applyTemplate request with HTTP info returned
         * @return ApiResponse&lt;MetadataFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the instance of the template that was applied to the file, including the data that was applied to the template. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataFull> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return applyTemplateWithHttpInfo(fileId, scope, templateKey, requestBody);
        }

        /**
         * Execute applyTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the instance of the template that was applied to the file, including the data that was applied to the template. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataFull> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return applyTemplateAsync(fileId, scope, templateKey, requestBody, _callback);
        }
    }

    /**
     * Create metadata instance on file
     * Applies an instance of a metadata template to a file.  In most cases only values that are present in the metadata template will be accepted, except for the &#x60;global.properties&#x60; template which accepts any key-value pair.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param scope The scope of the metadata template (required)
     * @param templateKey The name of the metadata template (required)
     * @return ApplyTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the instance of the template that was applied to the file, including the data that was applied to the template. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ApplyTemplateRequestBuilder applyTemplate(String fileId, String scope, String templateKey) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (templateKey == null) throw new IllegalArgumentException("\"templateKey\" is required but got null");
            

        return new ApplyTemplateRequestBuilder(fileId, scope, templateKey);
    }
    private okhttp3.Call getInstanceCall(String fileId, String scope, String templateKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata/{scope}/{template_key}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "template_key" + "}", localVarApiClient.escapeString(templateKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstanceValidateBeforeCall(String fileId, String scope, String templateKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getInstance(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getInstance(Async)");
        }

        // verify the required parameter 'templateKey' is set
        if (templateKey == null) {
            throw new ApiException("Missing the required parameter 'templateKey' when calling getInstance(Async)");
        }

        return getInstanceCall(fileId, scope, templateKey, _callback);

    }


    private ApiResponse<MetadataFull> getInstanceWithHttpInfo(String fileId, String scope, String templateKey) throws ApiException {
        okhttp3.Call localVarCall = getInstanceValidateBeforeCall(fileId, scope, templateKey, null);
        Type localVarReturnType = new TypeToken<MetadataFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstanceAsync(String fileId, String scope, String templateKey, final ApiCallback<MetadataFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstanceValidateBeforeCall(fileId, scope, templateKey, _callback);
        Type localVarReturnType = new TypeToken<MetadataFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstanceRequestBuilder {
        private final String fileId;
        private final String scope;
        private final String templateKey;

        private GetInstanceRequestBuilder(String fileId, String scope, String templateKey) {
            this.fileId = fileId;
            this.scope = scope;
            this.templateKey = templateKey;
        }

        /**
         * Build call for getInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An instance of the metadata template that includes additional \&quot;key:value\&quot; pairs defined by the user or an application. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstanceCall(fileId, scope, templateKey, _callback);
        }


        /**
         * Execute getInstance request
         * @return MetadataFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An instance of the metadata template that includes additional \&quot;key:value\&quot; pairs defined by the user or an application. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataFull execute() throws ApiException {
            ApiResponse<MetadataFull> localVarResp = getInstanceWithHttpInfo(fileId, scope, templateKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstance request with HTTP info returned
         * @return ApiResponse&lt;MetadataFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An instance of the metadata template that includes additional \&quot;key:value\&quot; pairs defined by the user or an application. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataFull> executeWithHttpInfo() throws ApiException {
            return getInstanceWithHttpInfo(fileId, scope, templateKey);
        }

        /**
         * Execute getInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An instance of the metadata template that includes additional \&quot;key:value\&quot; pairs defined by the user or an application. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataFull> _callback) throws ApiException {
            return getInstanceAsync(fileId, scope, templateKey, _callback);
        }
    }

    /**
     * Get metadata instance on file
     * Retrieves the instance of a metadata template that has been applied to a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param scope The scope of the metadata template (required)
     * @param templateKey The name of the metadata template (required)
     * @return GetInstanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An instance of the metadata template that includes additional \&quot;key:value\&quot; pairs defined by the user or an application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstanceRequestBuilder getInstance(String fileId, String scope, String templateKey) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (templateKey == null) throw new IllegalArgumentException("\"templateKey\" is required but got null");
            

        return new GetInstanceRequestBuilder(fileId, scope, templateKey);
    }
    private okhttp3.Call listFileMetadataCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFileMetadataValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling listFileMetadata(Async)");
        }

        return listFileMetadataCall(fileId, _callback);

    }


    private ApiResponse<Metadatas> listFileMetadataWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = listFileMetadataValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<Metadatas>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFileMetadataAsync(String fileId, final ApiCallback<Metadatas> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFileMetadataValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<Metadatas>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFileMetadataRequestBuilder {
        private final String fileId;

        private ListFileMetadataRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Build call for listFileMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all the metadata associated with a file.  This API does not support pagination and will therefore always return all of the metadata associated to the file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFileMetadataCall(fileId, _callback);
        }


        /**
         * Execute listFileMetadata request
         * @return Metadatas
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all the metadata associated with a file.  This API does not support pagination and will therefore always return all of the metadata associated to the file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Metadatas execute() throws ApiException {
            ApiResponse<Metadatas> localVarResp = listFileMetadataWithHttpInfo(fileId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFileMetadata request with HTTP info returned
         * @return ApiResponse&lt;Metadatas&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all the metadata associated with a file.  This API does not support pagination and will therefore always return all of the metadata associated to the file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Metadatas> executeWithHttpInfo() throws ApiException {
            return listFileMetadataWithHttpInfo(fileId);
        }

        /**
         * Execute listFileMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all the metadata associated with a file.  This API does not support pagination and will therefore always return all of the metadata associated to the file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Metadatas> _callback) throws ApiException {
            return listFileMetadataAsync(fileId, _callback);
        }
    }

    /**
     * List metadata instances on file
     * Retrieves all metadata for a given file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return ListFileMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all the metadata associated with a file.  This API does not support pagination and will therefore always return all of the metadata associated to the file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ListFileMetadataRequestBuilder listFileMetadata(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new ListFileMetadataRequestBuilder(fileId);
    }
    private okhttp3.Call removeInstanceCall(String fileId, String scope, String templateKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata/{scope}/{template_key}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "template_key" + "}", localVarApiClient.escapeString(templateKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeInstanceValidateBeforeCall(String fileId, String scope, String templateKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling removeInstance(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling removeInstance(Async)");
        }

        // verify the required parameter 'templateKey' is set
        if (templateKey == null) {
            throw new ApiException("Missing the required parameter 'templateKey' when calling removeInstance(Async)");
        }

        return removeInstanceCall(fileId, scope, templateKey, _callback);

    }


    private ApiResponse<Void> removeInstanceWithHttpInfo(String fileId, String scope, String templateKey) throws ApiException {
        okhttp3.Call localVarCall = removeInstanceValidateBeforeCall(fileId, scope, templateKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeInstanceAsync(String fileId, String scope, String templateKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeInstanceValidateBeforeCall(fileId, scope, templateKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveInstanceRequestBuilder {
        private final String fileId;
        private final String scope;
        private final String templateKey;

        private RemoveInstanceRequestBuilder(String fileId, String scope, String templateKey) {
            this.fileId = fileId;
            this.scope = scope;
            this.templateKey = templateKey;
        }

        /**
         * Build call for removeInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the metadata is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeInstanceCall(fileId, scope, templateKey, _callback);
        }


        /**
         * Execute removeInstance request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the metadata is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeInstanceWithHttpInfo(fileId, scope, templateKey);
        }

        /**
         * Execute removeInstance request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the metadata is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeInstanceWithHttpInfo(fileId, scope, templateKey);
        }

        /**
         * Execute removeInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the metadata is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeInstanceAsync(fileId, scope, templateKey, _callback);
        }
    }

    /**
     * Remove metadata instance from file
     * Deletes a piece of file metadata.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param scope The scope of the metadata template (required)
     * @param templateKey The name of the metadata template (required)
     * @return RemoveInstanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the metadata is successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveInstanceRequestBuilder removeInstance(String fileId, String scope, String templateKey) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (templateKey == null) throw new IllegalArgumentException("\"templateKey\" is required but got null");
            

        return new RemoveInstanceRequestBuilder(fileId, scope, templateKey);
    }
    private okhttp3.Call updateInstanceOnFileCall(String fileId, String scope, String templateKey, List<AMetadataInstanceUpdateOperation> ametadataInstanceUpdateOperation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ametadataInstanceUpdateOperation;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata/{scope}/{template_key}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "template_key" + "}", localVarApiClient.escapeString(templateKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInstanceOnFileValidateBeforeCall(String fileId, String scope, String templateKey, List<AMetadataInstanceUpdateOperation> ametadataInstanceUpdateOperation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling updateInstanceOnFile(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateInstanceOnFile(Async)");
        }

        // verify the required parameter 'templateKey' is set
        if (templateKey == null) {
            throw new ApiException("Missing the required parameter 'templateKey' when calling updateInstanceOnFile(Async)");
        }

        return updateInstanceOnFileCall(fileId, scope, templateKey, ametadataInstanceUpdateOperation, _callback);

    }


    private ApiResponse<MetadataFull> updateInstanceOnFileWithHttpInfo(String fileId, String scope, String templateKey, List<AMetadataInstanceUpdateOperation> ametadataInstanceUpdateOperation) throws ApiException {
        okhttp3.Call localVarCall = updateInstanceOnFileValidateBeforeCall(fileId, scope, templateKey, ametadataInstanceUpdateOperation, null);
        Type localVarReturnType = new TypeToken<MetadataFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInstanceOnFileAsync(String fileId, String scope, String templateKey, List<AMetadataInstanceUpdateOperation> ametadataInstanceUpdateOperation, final ApiCallback<MetadataFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInstanceOnFileValidateBeforeCall(fileId, scope, templateKey, ametadataInstanceUpdateOperation, _callback);
        Type localVarReturnType = new TypeToken<MetadataFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateInstanceOnFileRequestBuilder {
        private final String fileId;
        private final String scope;
        private final String templateKey;
        private List<AMetadataInstanceUpdateOperation> ametadataInstanceUpdateOperation;

        private UpdateInstanceOnFileRequestBuilder(String fileId, String scope, String templateKey) {
            this.fileId = fileId;
            this.scope = scope;
            this.templateKey = templateKey;
        }

        /**
         * Set ametadataInstanceUpdateOperation
         * @param ametadataInstanceUpdateOperation  (optional)
         * @return UpdateInstanceOnFileRequestBuilder
         */
        public UpdateInstanceOnFileRequestBuilder ametadataInstanceUpdateOperation(List<AMetadataInstanceUpdateOperation> ametadataInstanceUpdateOperation) {
            this.ametadataInstanceUpdateOperation = ametadataInstanceUpdateOperation;
            return this;
        }

        /**
         * Build call for updateInstanceOnFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template instance, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<AMetadataInstanceUpdateOperation> ametadataInstanceUpdateOperation = buildBodyParams();
            return updateInstanceOnFileCall(fileId, scope, templateKey, ametadataInstanceUpdateOperation, _callback);
        }

        private List<AMetadataInstanceUpdateOperation> buildBodyParams() {
            return this.ametadataInstanceUpdateOperation;
        }

        /**
         * Execute updateInstanceOnFile request
         * @return MetadataFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template instance, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public MetadataFull execute() throws ApiException {
            List<AMetadataInstanceUpdateOperation> ametadataInstanceUpdateOperation = buildBodyParams();
            ApiResponse<MetadataFull> localVarResp = updateInstanceOnFileWithHttpInfo(fileId, scope, templateKey, ametadataInstanceUpdateOperation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateInstanceOnFile request with HTTP info returned
         * @return ApiResponse&lt;MetadataFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template instance, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MetadataFull> executeWithHttpInfo() throws ApiException {
            List<AMetadataInstanceUpdateOperation> ametadataInstanceUpdateOperation = buildBodyParams();
            return updateInstanceOnFileWithHttpInfo(fileId, scope, templateKey, ametadataInstanceUpdateOperation);
        }

        /**
         * Execute updateInstanceOnFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated metadata template instance, with the custom template data included. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MetadataFull> _callback) throws ApiException {
            List<AMetadataInstanceUpdateOperation> ametadataInstanceUpdateOperation = buildBodyParams();
            return updateInstanceOnFileAsync(fileId, scope, templateKey, ametadataInstanceUpdateOperation, _callback);
        }
    }

    /**
     * Update metadata instance on file
     * Updates a piece of metadata on a file.  The metadata instance can only be updated if the template has already been applied to the file before. When editing metadata, only values that match the metadata template schema will be accepted.  The update is applied atomically. If any errors occur during the application of the operations, the metadata instance will not be changed.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @param scope The scope of the metadata template (required)
     * @param templateKey The name of the metadata template (required)
     * @return UpdateInstanceOnFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated metadata template instance, with the custom template data included. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInstanceOnFileRequestBuilder updateInstanceOnFile(String fileId, String scope, String templateKey) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (templateKey == null) throw new IllegalArgumentException("\"templateKey\" is required but got null");
            

        return new UpdateInstanceOnFileRequestBuilder(fileId, scope, templateKey);
    }
}
