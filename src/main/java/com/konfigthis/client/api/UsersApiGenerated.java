/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.PostUsersRequest;
import com.konfigthis.client.model.TrackingCode;
import com.konfigthis.client.model.UserFull;
import com.konfigthis.client.model.Users;
import com.konfigthis.client.model.UsersUpdateManagedUserRequest;
import com.konfigthis.client.model.UsersUpdateManagedUserRequestNotificationEmail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteUserCall(String userId, Boolean notify, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notify", notify));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String userId, Boolean notify, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser(Async)");
        }

        return deleteUserCall(userId, notify, force, _callback);

    }


    private ApiResponse<Void> deleteUserWithHttpInfo(String userId, Boolean notify, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, notify, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteUserAsync(String userId, Boolean notify, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, notify, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteUserRequestBuilder {
        private final String userId;
        private Boolean notify;
        private Boolean force;

        private DeleteUserRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set notify
         * @param notify Whether the user will receive email notification of the deletion (optional)
         * @return DeleteUserRequestBuilder
         */
        public DeleteUserRequestBuilder notify(Boolean notify) {
            this.notify = notify;
            return this;
        }
        
        /**
         * Set force
         * @param force Whether the user should be deleted even if this user still own files (optional)
         * @return DeleteUserRequestBuilder
         */
        public DeleteUserRequestBuilder force(Boolean force) {
            this.force = force;
            return this;
        }
        
        /**
         * Build call for deleteUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes the user and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserCall(userId, notify, force, _callback);
        }


        /**
         * Execute deleteUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes the user and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteUserWithHttpInfo(userId, notify, force);
        }

        /**
         * Execute deleteUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes the user and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteUserWithHttpInfo(userId, notify, force);
        }

        /**
         * Execute deleteUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes the user and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteUserAsync(userId, notify, force, _callback);
        }
    }

    /**
     * Delete user
     * Deletes a user. By default this will fail if the user still owns any content. Move their owned content first before proceeding, or use the &#x60;force&#x60; field to delete the user and their files.
     * @param userId The ID of the user. (required)
     * @return DeleteUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes the user and returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserRequestBuilder deleteUser(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new DeleteUserRequestBuilder(userId);
    }
    private okhttp3.Call getCurrentUserCall(List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentUserValidateBeforeCall(List<String> fields, final ApiCallback _callback) throws ApiException {
        return getCurrentUserCall(fields, _callback);

    }


    private ApiResponse<UserFull> getCurrentUserWithHttpInfo(List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getCurrentUserValidateBeforeCall(fields, null);
        Type localVarReturnType = new TypeToken<UserFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentUserAsync(List<String> fields, final ApiCallback<UserFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentUserValidateBeforeCall(fields, _callback);
        Type localVarReturnType = new TypeToken<UserFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentUserRequestBuilder {
        private List<String> fields;

        private GetCurrentUserRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return GetCurrentUserRequestBuilder
         */
        public GetCurrentUserRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getCurrentUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single user object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentUserCall(fields, _callback);
        }


        /**
         * Execute getCurrentUser request
         * @return UserFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single user object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public UserFull execute() throws ApiException {
            ApiResponse<UserFull> localVarResp = getCurrentUserWithHttpInfo(fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentUser request with HTTP info returned
         * @return ApiResponse&lt;UserFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single user object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserFull> executeWithHttpInfo() throws ApiException {
            return getCurrentUserWithHttpInfo(fields);
        }

        /**
         * Execute getCurrentUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single user object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserFull> _callback) throws ApiException {
            return getCurrentUserAsync(fields, _callback);
        }
    }

    /**
     * Get current user
     * Retrieves information about the user who is currently authenticated.  In the case of a client-side authenticated OAuth 2.0 application this will be the user who authorized the app.  In the case of a JWT, server-side authenticated application this will be the service account that belongs to the application by default.  Use the &#x60;As-User&#x60; header to change who this API call is made on behalf of.
     * @return GetCurrentUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single user object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentUserRequestBuilder getCurrentUser() throws IllegalArgumentException {
        return new GetCurrentUserRequestBuilder();
    }
    private okhttp3.Call getUserInfoCall(String userId, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserInfoValidateBeforeCall(String userId, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserInfo(Async)");
        }

        return getUserInfoCall(userId, fields, _callback);

    }


    private ApiResponse<UserFull> getUserInfoWithHttpInfo(String userId, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getUserInfoValidateBeforeCall(userId, fields, null);
        Type localVarReturnType = new TypeToken<UserFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserInfoAsync(String userId, List<String> fields, final ApiCallback<UserFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserInfoValidateBeforeCall(userId, fields, _callback);
        Type localVarReturnType = new TypeToken<UserFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserInfoRequestBuilder {
        private final String userId;
        private List<String> fields;

        private GetUserInfoRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return GetUserInfoRequestBuilder
         */
        public GetUserInfoRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getUserInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single user object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields using the [fields](https://raw.githubusercontent.com) parameter. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserInfoCall(userId, fields, _callback);
        }


        /**
         * Execute getUserInfo request
         * @return UserFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single user object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields using the [fields](https://raw.githubusercontent.com) parameter. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public UserFull execute() throws ApiException {
            ApiResponse<UserFull> localVarResp = getUserInfoWithHttpInfo(userId, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserInfo request with HTTP info returned
         * @return ApiResponse&lt;UserFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single user object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields using the [fields](https://raw.githubusercontent.com) parameter. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserFull> executeWithHttpInfo() throws ApiException {
            return getUserInfoWithHttpInfo(userId, fields);
        }

        /**
         * Execute getUserInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single user object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields using the [fields](https://raw.githubusercontent.com) parameter. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserFull> _callback) throws ApiException {
            return getUserInfoAsync(userId, fields, _callback);
        }
    }

    /**
     * Get user
     * Retrieves information about a user in the enterprise.  The application and the authenticated user need to have the permission to look up users in the entire enterprise.  This endpoint also returns a limited set of information for external users who are collaborated on content owned by the enterprise for authenticated users with the right scopes. In this case, disallowed fields will return null instead.
     * @param userId The ID of the user. (required)
     * @return GetUserInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single user object.  Not all available fields are returned by default. Use the [fields](https://raw.githubusercontent.com) query parameter to explicitly request any specific fields using the [fields](https://raw.githubusercontent.com) parameter. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserInfoRequestBuilder getUserInfo(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetUserInfoRequestBuilder(userId);
    }
    private okhttp3.Call updateManagedUserCall(String userId, List<String> fields, UsersUpdateManagedUserRequest usersUpdateManagedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUpdateManagedUserRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateManagedUserValidateBeforeCall(String userId, List<String> fields, UsersUpdateManagedUserRequest usersUpdateManagedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateManagedUser(Async)");
        }

        return updateManagedUserCall(userId, fields, usersUpdateManagedUserRequest, _callback);

    }


    private ApiResponse<UserFull> updateManagedUserWithHttpInfo(String userId, List<String> fields, UsersUpdateManagedUserRequest usersUpdateManagedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = updateManagedUserValidateBeforeCall(userId, fields, usersUpdateManagedUserRequest, null);
        Type localVarReturnType = new TypeToken<UserFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateManagedUserAsync(String userId, List<String> fields, UsersUpdateManagedUserRequest usersUpdateManagedUserRequest, final ApiCallback<UserFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateManagedUserValidateBeforeCall(userId, fields, usersUpdateManagedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<UserFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateManagedUserRequestBuilder {
        private final String userId;
        private String enterprise;
        private Boolean notify;
        private String name;
        private String login;
        private String role;
        private String language;
        private Boolean isSyncEnabled;
        private String jobTitle;
        private String phone;
        private String address;
        private List<TrackingCode> trackingCodes;
        private Boolean canSeeManagedUsers;
        private String timezone;
        private Boolean isExternalCollabRestricted;
        private Boolean isExemptFromDeviceLimits;
        private Boolean isExemptFromLoginVerification;
        private Boolean isPasswordResetRequired;
        private String status;
        private Long spaceAmount;
        private UsersUpdateManagedUserRequestNotificationEmail notificationEmail;
        private String externalAppUserId;
        private List<String> fields;

        private UpdateManagedUserRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set enterprise
         * @param enterprise Set this to &#x60;null&#x60; to roll the user out of the enterprise and make them a free user (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder enterprise(String enterprise) {
            this.enterprise = enterprise;
            return this;
        }
        
        /**
         * Set notify
         * @param notify Whether the user should receive an email when they are rolled out of an enterprise (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder notify(Boolean notify) {
            this.notify = notify;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the user (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set login
         * @param login The email address the user uses to log in  Note: If the target user&#39;s email is not confirmed, then the primary login address cannot be changed. (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder login(String login) {
            this.login = login;
            return this;
        }
        
        /**
         * Set role
         * @param role The user’s enterprise role (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Set language
         * @param language The language of the user, formatted in modified version of the [ISO 639-1](https://raw.githubusercontent.com) format. (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set isSyncEnabled
         * @param isSyncEnabled Whether the user can use Box Sync (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder isSyncEnabled(Boolean isSyncEnabled) {
            this.isSyncEnabled = isSyncEnabled;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle The user’s job title (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set phone
         * @param phone The user’s phone number (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set address
         * @param address The user’s address (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set trackingCodes
         * @param trackingCodes Tracking codes allow an admin to generate reports from the admin console and assign an attribute to a specific group of users. This setting must be enabled for an enterprise before it can be used. (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder trackingCodes(List<TrackingCode> trackingCodes) {
            this.trackingCodes = trackingCodes;
            return this;
        }
        
        /**
         * Set canSeeManagedUsers
         * @param canSeeManagedUsers Whether the user can see other enterprise users in their contact list (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder canSeeManagedUsers(Boolean canSeeManagedUsers) {
            this.canSeeManagedUsers = canSeeManagedUsers;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone The user&#39;s timezone (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set isExternalCollabRestricted
         * @param isExternalCollabRestricted Whether the user is allowed to collaborate with users outside their enterprise (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder isExternalCollabRestricted(Boolean isExternalCollabRestricted) {
            this.isExternalCollabRestricted = isExternalCollabRestricted;
            return this;
        }
        
        /**
         * Set isExemptFromDeviceLimits
         * @param isExemptFromDeviceLimits Whether to exempt the user from enterprise device limits (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder isExemptFromDeviceLimits(Boolean isExemptFromDeviceLimits) {
            this.isExemptFromDeviceLimits = isExemptFromDeviceLimits;
            return this;
        }
        
        /**
         * Set isExemptFromLoginVerification
         * @param isExemptFromLoginVerification Whether the user must use two-factor authentication (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder isExemptFromLoginVerification(Boolean isExemptFromLoginVerification) {
            this.isExemptFromLoginVerification = isExemptFromLoginVerification;
            return this;
        }
        
        /**
         * Set isPasswordResetRequired
         * @param isPasswordResetRequired Whether the user is required to reset their password (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder isPasswordResetRequired(Boolean isPasswordResetRequired) {
            this.isPasswordResetRequired = isPasswordResetRequired;
            return this;
        }
        
        /**
         * Set status
         * @param status The user&#39;s account status (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set spaceAmount
         * @param spaceAmount The user’s total available space in bytes. Set this to &#x60;-1&#x60; to indicate unlimited storage. (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder spaceAmount(Long spaceAmount) {
            this.spaceAmount = spaceAmount;
            return this;
        }
        
        /**
         * Set notificationEmail
         * @param notificationEmail  (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder notificationEmail(UsersUpdateManagedUserRequestNotificationEmail notificationEmail) {
            this.notificationEmail = notificationEmail;
            return this;
        }
        
        /**
         * Set externalAppUserId
         * @param externalAppUserId An external identifier for an app user, which can be used to look up the user. This can be used to tie user IDs from external identity providers to Box users.  Note: In order to update this field, you need to request a token using the application that created the app user. (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder externalAppUserId(String externalAppUserId) {
            this.externalAppUserId = externalAppUserId;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return UpdateManagedUserRequestBuilder
         */
        public UpdateManagedUserRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for updateManagedUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated user object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersUpdateManagedUserRequest usersUpdateManagedUserRequest = buildBodyParams();
            return updateManagedUserCall(userId, fields, usersUpdateManagedUserRequest, _callback);
        }

        private UsersUpdateManagedUserRequest buildBodyParams() {
            UsersUpdateManagedUserRequest usersUpdateManagedUserRequest = new UsersUpdateManagedUserRequest();
            usersUpdateManagedUserRequest.enterprise(this.enterprise);
            usersUpdateManagedUserRequest.notify(this.notify);
            usersUpdateManagedUserRequest.name(this.name);
            usersUpdateManagedUserRequest.login(this.login);
            if (this.role != null)
            usersUpdateManagedUserRequest.role(UsersUpdateManagedUserRequest.RoleEnum.fromValue(this.role));
            usersUpdateManagedUserRequest.language(this.language);
            usersUpdateManagedUserRequest.isSyncEnabled(this.isSyncEnabled);
            usersUpdateManagedUserRequest.jobTitle(this.jobTitle);
            usersUpdateManagedUserRequest.phone(this.phone);
            usersUpdateManagedUserRequest.address(this.address);
            usersUpdateManagedUserRequest.trackingCodes(this.trackingCodes);
            usersUpdateManagedUserRequest.canSeeManagedUsers(this.canSeeManagedUsers);
            usersUpdateManagedUserRequest.timezone(this.timezone);
            usersUpdateManagedUserRequest.isExternalCollabRestricted(this.isExternalCollabRestricted);
            usersUpdateManagedUserRequest.isExemptFromDeviceLimits(this.isExemptFromDeviceLimits);
            usersUpdateManagedUserRequest.isExemptFromLoginVerification(this.isExemptFromLoginVerification);
            usersUpdateManagedUserRequest.isPasswordResetRequired(this.isPasswordResetRequired);
            if (this.status != null)
            usersUpdateManagedUserRequest.status(UsersUpdateManagedUserRequest.StatusEnum.fromValue(this.status));
            usersUpdateManagedUserRequest.spaceAmount(this.spaceAmount);
            usersUpdateManagedUserRequest.notificationEmail(this.notificationEmail);
            usersUpdateManagedUserRequest.externalAppUserId(this.externalAppUserId);
            return usersUpdateManagedUserRequest;
        }

        /**
         * Execute updateManagedUser request
         * @return UserFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated user object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public UserFull execute() throws ApiException {
            UsersUpdateManagedUserRequest usersUpdateManagedUserRequest = buildBodyParams();
            ApiResponse<UserFull> localVarResp = updateManagedUserWithHttpInfo(userId, fields, usersUpdateManagedUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateManagedUser request with HTTP info returned
         * @return ApiResponse&lt;UserFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated user object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserFull> executeWithHttpInfo() throws ApiException {
            UsersUpdateManagedUserRequest usersUpdateManagedUserRequest = buildBodyParams();
            return updateManagedUserWithHttpInfo(userId, fields, usersUpdateManagedUserRequest);
        }

        /**
         * Execute updateManagedUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated user object. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserFull> _callback) throws ApiException {
            UsersUpdateManagedUserRequest usersUpdateManagedUserRequest = buildBodyParams();
            return updateManagedUserAsync(userId, fields, usersUpdateManagedUserRequest, _callback);
        }
    }

    /**
     * Update user
     * Updates a managed or app user in an enterprise. This endpoint is only available to users and applications with the right admin permissions.
     * @param userId The ID of the user. (required)
     * @return UpdateManagedUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated user object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateManagedUserRequestBuilder updateManagedUser(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new UpdateManagedUserRequestBuilder(userId);
    }
    private okhttp3.Call usersCall(String filterTerm, String userType, String externalAppUserId, List<String> fields, Long offset, Long limit, Boolean usemarker, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_term", filterTerm));
        }

        if (userType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_type", userType));
        }

        if (externalAppUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_app_user_id", externalAppUserId));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (usemarker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usemarker", usemarker));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersValidateBeforeCall(String filterTerm, String userType, String externalAppUserId, List<String> fields, Long offset, Long limit, Boolean usemarker, String marker, final ApiCallback _callback) throws ApiException {
        return usersCall(filterTerm, userType, externalAppUserId, fields, offset, limit, usemarker, marker, _callback);

    }


    private ApiResponse<Users> usersWithHttpInfo(String filterTerm, String userType, String externalAppUserId, List<String> fields, Long offset, Long limit, Boolean usemarker, String marker) throws ApiException {
        okhttp3.Call localVarCall = usersValidateBeforeCall(filterTerm, userType, externalAppUserId, fields, offset, limit, usemarker, marker, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call usersAsync(String filterTerm, String userType, String externalAppUserId, List<String> fields, Long offset, Long limit, Boolean usemarker, String marker, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersValidateBeforeCall(filterTerm, userType, externalAppUserId, fields, offset, limit, usemarker, marker, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UsersRequestBuilder {
        private String filterTerm;
        private String userType;
        private String externalAppUserId;
        private List<String> fields;
        private Long offset;
        private Long limit;
        private Boolean usemarker;
        private String marker;

        private UsersRequestBuilder() {
        }

        /**
         * Set filterTerm
         * @param filterTerm Limits the results to only users who&#39;s &#x60;name&#x60; or &#x60;login&#x60; start with the search term.  For externally managed users, the search term needs to completely match the in order to find the user, and it will only return one user at a time. (optional)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder filterTerm(String filterTerm) {
            this.filterTerm = filterTerm;
            return this;
        }
        
        /**
         * Set userType
         * @param userType Limits the results to the kind of user specified.  * &#x60;all&#x60; returns every kind of user for whom the   &#x60;login&#x60; or &#x60;name&#x60; partially matches the   &#x60;filter_term&#x60;. It will only return an external user   if the login matches the &#x60;filter_term&#x60; completely,   and in that case it will only return that user. * &#x60;managed&#x60; returns all managed and app users for whom   the &#x60;login&#x60; or &#x60;name&#x60; partially matches the   &#x60;filter_term&#x60;. * &#x60;external&#x60; returns all external users for whom the   &#x60;login&#x60; matches the &#x60;filter_term&#x60; exactly. (optional)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder userType(String userType) {
            this.userType = userType;
            return this;
        }
        
        /**
         * Set externalAppUserId
         * @param externalAppUserId Limits the results to app users with the given &#x60;external_app_user_id&#x60; value.  When creating an app user, an &#x60;external_app_user_id&#x60; value can be set. This value can then be used in this endpoint to find any users that match that &#x60;external_app_user_id&#x60; value. (optional)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder externalAppUserId(String externalAppUserId) {
            this.externalAppUserId = externalAppUserId;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The offset of the item at which to begin the response.  Queries with offset parameter value exceeding 10000 will be rejected with a 400 response. (optional, default to 0)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return per page. (optional)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set usemarker
         * @param usemarker Specifies whether to use marker-based pagination instead of offset-based pagination. Only one pagination method can be used at a time.  By setting this value to true, the API will return a &#x60;marker&#x60; field that can be passed as a parameter to this endpoint to get the next page of the response. (optional)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder usemarker(Boolean usemarker) {
            this.usemarker = usemarker;
            return this;
        }
        
        /**
         * Set marker
         * @param marker Defines the position marker at which to begin returning results. This is used when paginating using marker-based pagination.  This requires &#x60;usemarker&#x60; to be set to &#x60;true&#x60;. (optional)
         * @return UsersRequestBuilder
         */
        public UsersRequestBuilder marker(String marker) {
            this.marker = marker;
            return this;
        }
        
        /**
         * Build call for users
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all of the users in the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return usersCall(filterTerm, userType, externalAppUserId, fields, offset, limit, usemarker, marker, _callback);
        }


        /**
         * Execute users request
         * @return Users
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all of the users in the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Users execute() throws ApiException {
            ApiResponse<Users> localVarResp = usersWithHttpInfo(filterTerm, userType, externalAppUserId, fields, offset, limit, usemarker, marker);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute users request with HTTP info returned
         * @return ApiResponse&lt;Users&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all of the users in the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Users> executeWithHttpInfo() throws ApiException {
            return usersWithHttpInfo(filterTerm, userType, externalAppUserId, fields, offset, limit, usemarker, marker);
        }

        /**
         * Execute users request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns all of the users in the enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Users> _callback) throws ApiException {
            return usersAsync(filterTerm, userType, externalAppUserId, fields, offset, limit, usemarker, marker, _callback);
        }
    }

    /**
     * List enterprise users
     * Returns a list of all users for the Enterprise along with their &#x60;user_id&#x60;, &#x60;public_name&#x60;, and &#x60;login&#x60;.  The application and the authenticated user need to have the permission to look up users in the entire enterprise.
     * @return UsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all of the users in the enterprise. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UsersRequestBuilder users() throws IllegalArgumentException {
        return new UsersRequestBuilder();
    }
    private okhttp3.Call users_0Call(List<String> fields, PostUsersRequest postUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postUsersRequest;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call users_0ValidateBeforeCall(List<String> fields, PostUsersRequest postUsersRequest, final ApiCallback _callback) throws ApiException {
        return users_0Call(fields, postUsersRequest, _callback);

    }


    private ApiResponse<UserFull> users_0WithHttpInfo(List<String> fields, PostUsersRequest postUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = users_0ValidateBeforeCall(fields, postUsersRequest, null);
        Type localVarReturnType = new TypeToken<UserFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call users_0Async(List<String> fields, PostUsersRequest postUsersRequest, final ApiCallback<UserFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = users_0ValidateBeforeCall(fields, postUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<UserFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Users0RequestBuilder {
        private final String name;
        private String login;
        private Boolean isPlatformAccessOnly;
        private String role;
        private String language;
        private Boolean isSyncEnabled;
        private String jobTitle;
        private String phone;
        private String address;
        private Long spaceAmount;
        private List<TrackingCode> trackingCodes;
        private Boolean canSeeManagedUsers;
        private String timezone;
        private Boolean isExternalCollabRestricted;
        private Boolean isExemptFromDeviceLimits;
        private Boolean isExemptFromLoginVerification;
        private String status;
        private String externalAppUserId;
        private List<String> fields;

        private Users0RequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set login
         * @param login The email address the user uses to log in  Required, unless &#x60;is_platform_access_only&#x60; is set to &#x60;true&#x60;. (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder login(String login) {
            this.login = login;
            return this;
        }
        
        /**
         * Set isPlatformAccessOnly
         * @param isPlatformAccessOnly Specifies that the user is an app user. (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder isPlatformAccessOnly(Boolean isPlatformAccessOnly) {
            this.isPlatformAccessOnly = isPlatformAccessOnly;
            return this;
        }
        
        /**
         * Set role
         * @param role The user’s enterprise role (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Set language
         * @param language The language of the user, formatted in modified version of the [ISO 639-1](https://raw.githubusercontent.com) format. (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set isSyncEnabled
         * @param isSyncEnabled Whether the user can use Box Sync (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder isSyncEnabled(Boolean isSyncEnabled) {
            this.isSyncEnabled = isSyncEnabled;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle The user’s job title (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set phone
         * @param phone The user’s phone number (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set address
         * @param address The user’s address (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set spaceAmount
         * @param spaceAmount The user’s total available space in bytes. Set this to &#x60;-1&#x60; to indicate unlimited storage. (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder spaceAmount(Long spaceAmount) {
            this.spaceAmount = spaceAmount;
            return this;
        }
        
        /**
         * Set trackingCodes
         * @param trackingCodes Tracking codes allow an admin to generate reports from the admin console and assign an attribute to a specific group of users. This setting must be enabled for an enterprise before it can be used. (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder trackingCodes(List<TrackingCode> trackingCodes) {
            this.trackingCodes = trackingCodes;
            return this;
        }
        
        /**
         * Set canSeeManagedUsers
         * @param canSeeManagedUsers Whether the user can see other enterprise users in their contact list (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder canSeeManagedUsers(Boolean canSeeManagedUsers) {
            this.canSeeManagedUsers = canSeeManagedUsers;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone The user&#39;s timezone (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set isExternalCollabRestricted
         * @param isExternalCollabRestricted Whether the user is allowed to collaborate with users outside their enterprise (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder isExternalCollabRestricted(Boolean isExternalCollabRestricted) {
            this.isExternalCollabRestricted = isExternalCollabRestricted;
            return this;
        }
        
        /**
         * Set isExemptFromDeviceLimits
         * @param isExemptFromDeviceLimits Whether to exempt the user from enterprise device limits (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder isExemptFromDeviceLimits(Boolean isExemptFromDeviceLimits) {
            this.isExemptFromDeviceLimits = isExemptFromDeviceLimits;
            return this;
        }
        
        /**
         * Set isExemptFromLoginVerification
         * @param isExemptFromLoginVerification Whether the user must use two-factor authentication (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder isExemptFromLoginVerification(Boolean isExemptFromLoginVerification) {
            this.isExemptFromLoginVerification = isExemptFromLoginVerification;
            return this;
        }
        
        /**
         * Set status
         * @param status The user&#39;s account status (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set externalAppUserId
         * @param externalAppUserId An external identifier for an app user, which can be used to look up the user. This can be used to tie user IDs from external identity providers to Box users. (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder externalAppUserId(String externalAppUserId) {
            this.externalAppUserId = externalAppUserId;
            return this;
        }
        
        /**
         * Set fields
         * @param fields A comma-separated list of attributes to include in the response. This can be used to request fields that are not normally returned in a standard response.  Be aware that specifying this parameter will have the effect that none of the standard fields are returned in the response unless explicitly specified, instead only fields for the mini representation are returned, additional to the fields requested. (optional)
         * @return Users0RequestBuilder
         */
        public Users0RequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for users_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a user object for the newly created user. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostUsersRequest postUsersRequest = buildBodyParams();
            return users_0Call(fields, postUsersRequest, _callback);
        }

        private PostUsersRequest buildBodyParams() {
            PostUsersRequest postUsersRequest = new PostUsersRequest();
            postUsersRequest.name(this.name);
            postUsersRequest.login(this.login);
            postUsersRequest.isPlatformAccessOnly(this.isPlatformAccessOnly);
            if (this.role != null)
            postUsersRequest.role(PostUsersRequest.RoleEnum.fromValue(this.role));
            postUsersRequest.language(this.language);
            postUsersRequest.isSyncEnabled(this.isSyncEnabled);
            postUsersRequest.jobTitle(this.jobTitle);
            postUsersRequest.phone(this.phone);
            postUsersRequest.address(this.address);
            postUsersRequest.spaceAmount(this.spaceAmount);
            postUsersRequest.trackingCodes(this.trackingCodes);
            postUsersRequest.canSeeManagedUsers(this.canSeeManagedUsers);
            postUsersRequest.timezone(this.timezone);
            postUsersRequest.isExternalCollabRestricted(this.isExternalCollabRestricted);
            postUsersRequest.isExemptFromDeviceLimits(this.isExemptFromDeviceLimits);
            postUsersRequest.isExemptFromLoginVerification(this.isExemptFromLoginVerification);
            if (this.status != null)
            postUsersRequest.status(PostUsersRequest.StatusEnum.fromValue(this.status));
            postUsersRequest.externalAppUserId(this.externalAppUserId);
            return postUsersRequest;
        }

        /**
         * Execute users_0 request
         * @return UserFull
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a user object for the newly created user. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public UserFull execute() throws ApiException {
            PostUsersRequest postUsersRequest = buildBodyParams();
            ApiResponse<UserFull> localVarResp = users_0WithHttpInfo(fields, postUsersRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute users_0 request with HTTP info returned
         * @return ApiResponse&lt;UserFull&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a user object for the newly created user. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserFull> executeWithHttpInfo() throws ApiException {
            PostUsersRequest postUsersRequest = buildBodyParams();
            return users_0WithHttpInfo(fields, postUsersRequest);
        }

        /**
         * Execute users_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a user object for the newly created user. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserFull> _callback) throws ApiException {
            PostUsersRequest postUsersRequest = buildBodyParams();
            return users_0Async(fields, postUsersRequest, _callback);
        }
    }

    /**
     * Create user
     * Creates a new managed user in an enterprise. This endpoint is only available to users and applications with the right admin permissions.
     * @return Users0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a user object for the newly created user. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public Users0RequestBuilder users_0(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new Users0RequestBuilder(name);
    }
}
