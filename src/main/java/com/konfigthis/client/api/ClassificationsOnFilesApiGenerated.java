/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Classification;
import com.konfigthis.client.model.ClassificationsOnFilesAddClassificationRequest;
import com.konfigthis.client.model.ClassificationsOnFilesUpdateClassificationMetadataInstanceRequestInner;
import com.konfigthis.client.model.ClientError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ClassificationsOnFilesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClassificationsOnFilesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ClassificationsOnFilesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addClassificationCall(String fileId, ClassificationsOnFilesAddClassificationRequest classificationsOnFilesAddClassificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = classificationsOnFilesAddClassificationRequest;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata/enterprise/securityClassification-6VMVochwUWo"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addClassificationValidateBeforeCall(String fileId, ClassificationsOnFilesAddClassificationRequest classificationsOnFilesAddClassificationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling addClassification(Async)");
        }

        return addClassificationCall(fileId, classificationsOnFilesAddClassificationRequest, _callback);

    }


    private ApiResponse<Classification> addClassificationWithHttpInfo(String fileId, ClassificationsOnFilesAddClassificationRequest classificationsOnFilesAddClassificationRequest) throws ApiException {
        okhttp3.Call localVarCall = addClassificationValidateBeforeCall(fileId, classificationsOnFilesAddClassificationRequest, null);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addClassificationAsync(String fileId, ClassificationsOnFilesAddClassificationRequest classificationsOnFilesAddClassificationRequest, final ApiCallback<Classification> _callback) throws ApiException {

        okhttp3.Call localVarCall = addClassificationValidateBeforeCall(fileId, classificationsOnFilesAddClassificationRequest, _callback);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddClassificationRequestBuilder {
        private final String fileId;
        private String boxSecurityClassificationKey;

        private AddClassificationRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Set boxSecurityClassificationKey
         * @param boxSecurityClassificationKey The name of the classification to apply to this file.  To list the available classifications in an enterprise, use the classification API to retrieve the [classification template](e://get_metadata_templates_enterprise_securityClassification-6VMVochwUWo_schema) which lists all available classification keys. (optional)
         * @return AddClassificationRequestBuilder
         */
        public AddClassificationRequestBuilder boxSecurityClassificationKey(String boxSecurityClassificationKey) {
            this.boxSecurityClassificationKey = boxSecurityClassificationKey;
            return this;
        }
        
        /**
         * Build call for addClassification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the classification template instance that was applied to the file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ClassificationsOnFilesAddClassificationRequest classificationsOnFilesAddClassificationRequest = buildBodyParams();
            return addClassificationCall(fileId, classificationsOnFilesAddClassificationRequest, _callback);
        }

        private ClassificationsOnFilesAddClassificationRequest buildBodyParams() {
            ClassificationsOnFilesAddClassificationRequest classificationsOnFilesAddClassificationRequest = new ClassificationsOnFilesAddClassificationRequest();
            classificationsOnFilesAddClassificationRequest.boxSecurityClassificationKey(this.boxSecurityClassificationKey);
            return classificationsOnFilesAddClassificationRequest;
        }

        /**
         * Execute addClassification request
         * @return Classification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the classification template instance that was applied to the file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Classification execute() throws ApiException {
            ClassificationsOnFilesAddClassificationRequest classificationsOnFilesAddClassificationRequest = buildBodyParams();
            ApiResponse<Classification> localVarResp = addClassificationWithHttpInfo(fileId, classificationsOnFilesAddClassificationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addClassification request with HTTP info returned
         * @return ApiResponse&lt;Classification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the classification template instance that was applied to the file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Classification> executeWithHttpInfo() throws ApiException {
            ClassificationsOnFilesAddClassificationRequest classificationsOnFilesAddClassificationRequest = buildBodyParams();
            return addClassificationWithHttpInfo(fileId, classificationsOnFilesAddClassificationRequest);
        }

        /**
         * Execute addClassification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns the classification template instance that was applied to the file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Classification> _callback) throws ApiException {
            ClassificationsOnFilesAddClassificationRequest classificationsOnFilesAddClassificationRequest = buildBodyParams();
            return addClassificationAsync(fileId, classificationsOnFilesAddClassificationRequest, _callback);
        }
    }

    /**
     * Add classification to file
     * Adds a classification to a file by specifying the label of the classification to add.  This API can also be called by including the enterprise ID in the URL explicitly, for example &#x60;/files/:id//enterprise_12345/securityClassification-6VMVochwUWo&#x60;.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return AddClassificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the classification template instance that was applied to the file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public AddClassificationRequestBuilder addClassification(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new AddClassificationRequestBuilder(fileId);
    }
    private okhttp3.Call getClassificationMetadataInstanceCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata/enterprise/securityClassification-6VMVochwUWo"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassificationMetadataInstanceValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getClassificationMetadataInstance(Async)");
        }

        return getClassificationMetadataInstanceCall(fileId, _callback);

    }


    private ApiResponse<Classification> getClassificationMetadataInstanceWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = getClassificationMetadataInstanceValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClassificationMetadataInstanceAsync(String fileId, final ApiCallback<Classification> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassificationMetadataInstanceValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClassificationMetadataInstanceRequestBuilder {
        private final String fileId;

        private GetClassificationMetadataInstanceRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Build call for getClassificationMetadataInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns an instance of the &#x60;securityClassification&#x60; metadata template, which contains a &#x60;Box__Security__Classification__Key&#x60; field that lists all the classifications available to this enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClassificationMetadataInstanceCall(fileId, _callback);
        }


        /**
         * Execute getClassificationMetadataInstance request
         * @return Classification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns an instance of the &#x60;securityClassification&#x60; metadata template, which contains a &#x60;Box__Security__Classification__Key&#x60; field that lists all the classifications available to this enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Classification execute() throws ApiException {
            ApiResponse<Classification> localVarResp = getClassificationMetadataInstanceWithHttpInfo(fileId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClassificationMetadataInstance request with HTTP info returned
         * @return ApiResponse&lt;Classification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns an instance of the &#x60;securityClassification&#x60; metadata template, which contains a &#x60;Box__Security__Classification__Key&#x60; field that lists all the classifications available to this enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Classification> executeWithHttpInfo() throws ApiException {
            return getClassificationMetadataInstanceWithHttpInfo(fileId);
        }

        /**
         * Execute getClassificationMetadataInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns an instance of the &#x60;securityClassification&#x60; metadata template, which contains a &#x60;Box__Security__Classification__Key&#x60; field that lists all the classifications available to this enterprise. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Classification> _callback) throws ApiException {
            return getClassificationMetadataInstanceAsync(fileId, _callback);
        }
    }

    /**
     * Get classification on file
     * Retrieves the classification metadata instance that has been applied to a file.  This API can also be called by including the enterprise ID in the URL explicitly, for example &#x60;/files/:id//enterprise_12345/securityClassification-6VMVochwUWo&#x60;.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return GetClassificationMetadataInstanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns an instance of the &#x60;securityClassification&#x60; metadata template, which contains a &#x60;Box__Security__Classification__Key&#x60; field that lists all the classifications available to this enterprise. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetClassificationMetadataInstanceRequestBuilder getClassificationMetadataInstance(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new GetClassificationMetadataInstanceRequestBuilder(fileId);
    }
    private okhttp3.Call removeClassificationCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata/enterprise/securityClassification-6VMVochwUWo"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeClassificationValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling removeClassification(Async)");
        }

        return removeClassificationCall(fileId, _callback);

    }


    private ApiResponse<Void> removeClassificationWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = removeClassificationValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeClassificationAsync(String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeClassificationValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveClassificationRequestBuilder {
        private final String fileId;

        private RemoveClassificationRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Build call for removeClassification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the classification is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeClassificationCall(fileId, _callback);
        }


        /**
         * Execute removeClassification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the classification is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeClassificationWithHttpInfo(fileId);
        }

        /**
         * Execute removeClassification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the classification is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeClassificationWithHttpInfo(fileId);
        }

        /**
         * Execute removeClassification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty response when the classification is successfully deleted. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeClassificationAsync(fileId, _callback);
        }
    }

    /**
     * Remove classification from file
     * Removes any classifications from a file.  This API can also be called by including the enterprise ID in the URL explicitly, for example &#x60;/files/:id//enterprise_12345/securityClassification-6VMVochwUWo&#x60;.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return RemoveClassificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty response when the classification is successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveClassificationRequestBuilder removeClassification(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new RemoveClassificationRequestBuilder(fileId);
    }
    private okhttp3.Call updateClassificationMetadataInstanceCall(String fileId, List<ClassificationsOnFilesUpdateClassificationMetadataInstanceRequestInner> classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner;

        // create path and map variables
        String localVarPath = "/files/{file_id}/metadata/enterprise/securityClassification-6VMVochwUWo"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClassificationMetadataInstanceValidateBeforeCall(String fileId, List<ClassificationsOnFilesUpdateClassificationMetadataInstanceRequestInner> classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling updateClassificationMetadataInstance(Async)");
        }

        return updateClassificationMetadataInstanceCall(fileId, classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner, _callback);

    }


    private ApiResponse<Classification> updateClassificationMetadataInstanceWithHttpInfo(String fileId, List<ClassificationsOnFilesUpdateClassificationMetadataInstanceRequestInner> classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner) throws ApiException {
        okhttp3.Call localVarCall = updateClassificationMetadataInstanceValidateBeforeCall(fileId, classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner, null);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateClassificationMetadataInstanceAsync(String fileId, List<ClassificationsOnFilesUpdateClassificationMetadataInstanceRequestInner> classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner, final ApiCallback<Classification> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClassificationMetadataInstanceValidateBeforeCall(fileId, classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner, _callback);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateClassificationMetadataInstanceRequestBuilder {
        private final String fileId;
        private List<ClassificationsOnFilesUpdateClassificationMetadataInstanceRequestInner> classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner;

        private UpdateClassificationMetadataInstanceRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Set classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner
         * @param classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner  (optional)
         * @return UpdateClassificationMetadataInstanceRequestBuilder
         */
        public UpdateClassificationMetadataInstanceRequestBuilder classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner(List<ClassificationsOnFilesUpdateClassificationMetadataInstanceRequestInner> classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner) {
            this.classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner = classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner;
            return this;
        }

        /**
         * Build call for updateClassificationMetadataInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated classification metadata template instance. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<ClassificationsOnFilesUpdateClassificationMetadataInstanceRequestInner> classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner = buildBodyParams();
            return updateClassificationMetadataInstanceCall(fileId, classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner, _callback);
        }

        private List<ClassificationsOnFilesUpdateClassificationMetadataInstanceRequestInner> buildBodyParams() {
            return this.classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner;
        }

        /**
         * Execute updateClassificationMetadataInstance request
         * @return Classification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated classification metadata template instance. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Classification execute() throws ApiException {
            List<ClassificationsOnFilesUpdateClassificationMetadataInstanceRequestInner> classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner = buildBodyParams();
            ApiResponse<Classification> localVarResp = updateClassificationMetadataInstanceWithHttpInfo(fileId, classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateClassificationMetadataInstance request with HTTP info returned
         * @return ApiResponse&lt;Classification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated classification metadata template instance. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Classification> executeWithHttpInfo() throws ApiException {
            List<ClassificationsOnFilesUpdateClassificationMetadataInstanceRequestInner> classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner = buildBodyParams();
            return updateClassificationMetadataInstanceWithHttpInfo(fileId, classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner);
        }

        /**
         * Execute updateClassificationMetadataInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated classification metadata template instance. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Classification> _callback) throws ApiException {
            List<ClassificationsOnFilesUpdateClassificationMetadataInstanceRequestInner> classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner = buildBodyParams();
            return updateClassificationMetadataInstanceAsync(fileId, classificationsOnFilesUpdateClassificationMetadataInstanceRequestInner, _callback);
        }
    }

    /**
     * Update classification on file
     * Updates a classification on a file.  The classification can only be updated if a classification has already been applied to the file before. When editing classifications, only values are defined for the enterprise will be accepted.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return UpdateClassificationMetadataInstanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated classification metadata template instance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateClassificationMetadataInstanceRequestBuilder updateClassificationMetadataInstance(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new UpdateClassificationMetadataInstanceRequestBuilder(fileId);
    }
}
