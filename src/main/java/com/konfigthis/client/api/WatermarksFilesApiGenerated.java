/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.Watermark;
import com.konfigthis.client.model.WatermarksFilesApplyWatermarkToFileRequest;
import com.konfigthis.client.model.WatermarksFilesApplyWatermarkToFileRequestWatermark;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WatermarksFilesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WatermarksFilesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WatermarksFilesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call applyWatermarkToFileCall(String fileId, WatermarksFilesApplyWatermarkToFileRequest watermarksFilesApplyWatermarkToFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watermarksFilesApplyWatermarkToFileRequest;

        // create path and map variables
        String localVarPath = "/files/{file_id}/watermark"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyWatermarkToFileValidateBeforeCall(String fileId, WatermarksFilesApplyWatermarkToFileRequest watermarksFilesApplyWatermarkToFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling applyWatermarkToFile(Async)");
        }

        return applyWatermarkToFileCall(fileId, watermarksFilesApplyWatermarkToFileRequest, _callback);

    }


    private ApiResponse<Watermark> applyWatermarkToFileWithHttpInfo(String fileId, WatermarksFilesApplyWatermarkToFileRequest watermarksFilesApplyWatermarkToFileRequest) throws ApiException {
        okhttp3.Call localVarCall = applyWatermarkToFileValidateBeforeCall(fileId, watermarksFilesApplyWatermarkToFileRequest, null);
        Type localVarReturnType = new TypeToken<Watermark>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call applyWatermarkToFileAsync(String fileId, WatermarksFilesApplyWatermarkToFileRequest watermarksFilesApplyWatermarkToFileRequest, final ApiCallback<Watermark> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyWatermarkToFileValidateBeforeCall(fileId, watermarksFilesApplyWatermarkToFileRequest, _callback);
        Type localVarReturnType = new TypeToken<Watermark>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApplyWatermarkToFileRequestBuilder {
        private final WatermarksFilesApplyWatermarkToFileRequestWatermark watermark;
        private final String fileId;

        private ApplyWatermarkToFileRequestBuilder(WatermarksFilesApplyWatermarkToFileRequestWatermark watermark, String fileId) {
            this.watermark = watermark;
            this.fileId = fileId;
        }

        /**
         * Build call for applyWatermarkToFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated watermark if a watermark already existed on this file. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returns a new watermark if no watermark existed on this file yet. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WatermarksFilesApplyWatermarkToFileRequest watermarksFilesApplyWatermarkToFileRequest = buildBodyParams();
            return applyWatermarkToFileCall(fileId, watermarksFilesApplyWatermarkToFileRequest, _callback);
        }

        private WatermarksFilesApplyWatermarkToFileRequest buildBodyParams() {
            WatermarksFilesApplyWatermarkToFileRequest watermarksFilesApplyWatermarkToFileRequest = new WatermarksFilesApplyWatermarkToFileRequest();
            watermarksFilesApplyWatermarkToFileRequest.watermark(this.watermark);
            return watermarksFilesApplyWatermarkToFileRequest;
        }

        /**
         * Execute applyWatermarkToFile request
         * @return Watermark
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated watermark if a watermark already existed on this file. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returns a new watermark if no watermark existed on this file yet. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Watermark execute() throws ApiException {
            WatermarksFilesApplyWatermarkToFileRequest watermarksFilesApplyWatermarkToFileRequest = buildBodyParams();
            ApiResponse<Watermark> localVarResp = applyWatermarkToFileWithHttpInfo(fileId, watermarksFilesApplyWatermarkToFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute applyWatermarkToFile request with HTTP info returned
         * @return ApiResponse&lt;Watermark&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated watermark if a watermark already existed on this file. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returns a new watermark if no watermark existed on this file yet. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Watermark> executeWithHttpInfo() throws ApiException {
            WatermarksFilesApplyWatermarkToFileRequest watermarksFilesApplyWatermarkToFileRequest = buildBodyParams();
            return applyWatermarkToFileWithHttpInfo(fileId, watermarksFilesApplyWatermarkToFileRequest);
        }

        /**
         * Execute applyWatermarkToFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an updated watermark if a watermark already existed on this file. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Returns a new watermark if no watermark existed on this file yet. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Watermark> _callback) throws ApiException {
            WatermarksFilesApplyWatermarkToFileRequest watermarksFilesApplyWatermarkToFileRequest = buildBodyParams();
            return applyWatermarkToFileAsync(fileId, watermarksFilesApplyWatermarkToFileRequest, _callback);
        }
    }

    /**
     * Apply watermark to file
     * Applies or update a watermark on a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return ApplyWatermarkToFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an updated watermark if a watermark already existed on this file. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Returns a new watermark if no watermark existed on this file yet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public ApplyWatermarkToFileRequestBuilder applyWatermarkToFile(WatermarksFilesApplyWatermarkToFileRequestWatermark watermark, String fileId) throws IllegalArgumentException {
        if (watermark == null) throw new IllegalArgumentException("\"watermark\" is required but got null");
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new ApplyWatermarkToFileRequestBuilder(watermark, fileId);
    }
    private okhttp3.Call getCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/watermark"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling get(Async)");
        }

        return getCall(fileId, _callback);

    }


    private ApiResponse<Watermark> getWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<Watermark>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String fileId, final ApiCallback<Watermark> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<Watermark>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {
        private final String fileId;

        private GetRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an object containing information about the watermark associated for to this file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(fileId, _callback);
        }


        /**
         * Execute get request
         * @return Watermark
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an object containing information about the watermark associated for to this file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public Watermark execute() throws ApiException {
            ApiResponse<Watermark> localVarResp = getWithHttpInfo(fileId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;Watermark&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an object containing information about the watermark associated for to this file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Watermark> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(fileId);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an object containing information about the watermark associated for to this file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Watermark> _callback) throws ApiException {
            return getAsync(fileId, _callback);
        }
    }

    /**
     * Get watermark on file
     * Retrieve the watermark for a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an object containing information about the watermark associated for to this file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestBuilder get(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new GetRequestBuilder(fileId);
    }
    private okhttp3.Call removeWatermarkCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}/watermark"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeWatermarkValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling removeWatermark(Async)");
        }

        return removeWatermarkCall(fileId, _callback);

    }


    private ApiResponse<Void> removeWatermarkWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = removeWatermarkValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeWatermarkAsync(String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeWatermarkValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveWatermarkRequestBuilder {
        private final String fileId;

        private RemoveWatermarkRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Build call for removeWatermark
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes the watermark and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeWatermarkCall(fileId, _callback);
        }


        /**
         * Execute removeWatermark request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes the watermark and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeWatermarkWithHttpInfo(fileId);
        }

        /**
         * Execute removeWatermark request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes the watermark and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeWatermarkWithHttpInfo(fileId);
        }

        /**
         * Execute removeWatermark request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes the watermark and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeWatermarkAsync(fileId, _callback);
        }
    }

    /**
     * Remove watermark from file
     * Removes the watermark from a file.
     * @param fileId The unique identifier that represents a file.  The ID for any file can be determined by visiting a file in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/files/123&#x60; the &#x60;file_id&#x60; is &#x60;123&#x60;. (required)
     * @return RemoveWatermarkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes the watermark and returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveWatermarkRequestBuilder removeWatermark(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new RemoveWatermarkRequestBuilder(fileId);
    }
}
