/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ClientError;
import java.io.File;
import com.konfigthis.client.model.UserAvatar;
import com.konfigthis.client.model.UserAvatarsAddOrUpdateImageRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserAvatarsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserAvatarsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UserAvatarsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addOrUpdateImageCall(String userId, File pic, UserAvatarsAddOrUpdateImageRequest userAvatarsAddOrUpdateImageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userAvatarsAddOrUpdateImageRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/avatar"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pic != null) {
            localVarFormParams.put("pic", pic);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrUpdateImageValidateBeforeCall(String userId, File pic, UserAvatarsAddOrUpdateImageRequest userAvatarsAddOrUpdateImageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addOrUpdateImage(Async)");
        }

        // verify the required parameter 'pic' is set
        if (pic == null) {
            throw new ApiException("Missing the required parameter 'pic' when calling addOrUpdateImage(Async)");
        }

        return addOrUpdateImageCall(userId, pic, userAvatarsAddOrUpdateImageRequest, _callback);

    }


    private ApiResponse<UserAvatar> addOrUpdateImageWithHttpInfo(String userId, File pic, UserAvatarsAddOrUpdateImageRequest userAvatarsAddOrUpdateImageRequest) throws ApiException {
        okhttp3.Call localVarCall = addOrUpdateImageValidateBeforeCall(userId, pic, userAvatarsAddOrUpdateImageRequest, null);
        Type localVarReturnType = new TypeToken<UserAvatar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addOrUpdateImageAsync(String userId, File pic, UserAvatarsAddOrUpdateImageRequest userAvatarsAddOrUpdateImageRequest, final ApiCallback<UserAvatar> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrUpdateImageValidateBeforeCall(userId, pic, userAvatarsAddOrUpdateImageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserAvatar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddOrUpdateImageRequestBuilder {
        private final String userId;
        private final File pic;

        private AddOrUpdateImageRequestBuilder(String userId, File pic) {
            this.userId = userId;
            this.pic = pic;
        }

        /**
         * Build call for addOrUpdateImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> * &#x60;ok&#x60;: Returns the &#x60;pic_urls&#x60; object with URLs to existing user avatars that were updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> * &#x60;created&#x60;: Returns the &#x60;pic_urls&#x60; object with URLS to user avatars uploaded to Box with the request. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserAvatarsAddOrUpdateImageRequest userAvatarsAddOrUpdateImageRequest = buildBodyParams();
            return addOrUpdateImageCall(userId, pic, userAvatarsAddOrUpdateImageRequest, _callback);
        }

        private UserAvatarsAddOrUpdateImageRequest buildBodyParams() {
            UserAvatarsAddOrUpdateImageRequest userAvatarsAddOrUpdateImageRequest = new UserAvatarsAddOrUpdateImageRequest();
            userAvatarsAddOrUpdateImageRequest.pic(this.pic);
            return userAvatarsAddOrUpdateImageRequest;
        }

        /**
         * Execute addOrUpdateImage request
         * @return UserAvatar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> * &#x60;ok&#x60;: Returns the &#x60;pic_urls&#x60; object with URLs to existing user avatars that were updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> * &#x60;created&#x60;: Returns the &#x60;pic_urls&#x60; object with URLS to user avatars uploaded to Box with the request. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public UserAvatar execute() throws ApiException {
            UserAvatarsAddOrUpdateImageRequest userAvatarsAddOrUpdateImageRequest = buildBodyParams();
            ApiResponse<UserAvatar> localVarResp = addOrUpdateImageWithHttpInfo(userId, pic, userAvatarsAddOrUpdateImageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addOrUpdateImage request with HTTP info returned
         * @return ApiResponse&lt;UserAvatar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> * &#x60;ok&#x60;: Returns the &#x60;pic_urls&#x60; object with URLs to existing user avatars that were updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> * &#x60;created&#x60;: Returns the &#x60;pic_urls&#x60; object with URLS to user avatars uploaded to Box with the request. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserAvatar> executeWithHttpInfo() throws ApiException {
            UserAvatarsAddOrUpdateImageRequest userAvatarsAddOrUpdateImageRequest = buildBodyParams();
            return addOrUpdateImageWithHttpInfo(userId, pic, userAvatarsAddOrUpdateImageRequest);
        }

        /**
         * Execute addOrUpdateImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> * &#x60;ok&#x60;: Returns the &#x60;pic_urls&#x60; object with URLs to existing user avatars that were updated. </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> * &#x60;created&#x60;: Returns the &#x60;pic_urls&#x60; object with URLS to user avatars uploaded to Box with the request. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserAvatar> _callback) throws ApiException {
            UserAvatarsAddOrUpdateImageRequest userAvatarsAddOrUpdateImageRequest = buildBodyParams();
            return addOrUpdateImageAsync(userId, pic, userAvatarsAddOrUpdateImageRequest, _callback);
        }
    }

    /**
     * Add or update user avatar
     * Adds or updates a user avatar.
     * @param userId The ID of the user. (required)
     * @param pic The image file to be uploaded to Box. Accepted file extensions are &#x60;.jpg&#x60; or &#x60;.png&#x60;. The maximum file size is 1MB. (required)
     * @return AddOrUpdateImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> * &#x60;ok&#x60;: Returns the &#x60;pic_urls&#x60; object with URLs to existing user avatars that were updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> * &#x60;created&#x60;: Returns the &#x60;pic_urls&#x60; object with URLS to user avatars uploaded to Box with the request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public AddOrUpdateImageRequestBuilder addOrUpdateImage(String userId, File pic) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (pic == null) throw new IllegalArgumentException("\"pic\" is required but got null");
        return new AddOrUpdateImageRequestBuilder(userId, pic);
    }
    private okhttp3.Call getImageCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/avatar"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/jpg",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getImage(Async)");
        }

        return getImageCall(userId, _callback);

    }


    private ApiResponse<File> getImageWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = getImageValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getImageAsync(String userId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetImageRequestBuilder {
        private final String userId;

        private GetImageRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for getImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> When an avatar can be found for the user the image data will be returned in the body of the response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getImageCall(userId, _callback);
        }


        /**
         * Execute getImage request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> When an avatar can be found for the user the image data will be returned in the body of the response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getImageWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getImage request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> When an avatar can be found for the user the image data will be returned in the body of the response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getImageWithHttpInfo(userId);
        }

        /**
         * Execute getImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> When an avatar can be found for the user the image data will be returned in the body of the response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getImageAsync(userId, _callback);
        }
    }

    /**
     * Get user avatar
     * Retrieves an image of a the user&#39;s avatar.
     * @param userId The ID of the user. (required)
     * @return GetImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When an avatar can be found for the user the image data will be returned in the body of the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public GetImageRequestBuilder getImage(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetImageRequestBuilder(userId);
    }
    private okhttp3.Call removeExistingCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/avatar"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeExistingValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeExisting(Async)");
        }

        return removeExistingCall(userId, _callback);

    }


    private ApiResponse<Void> removeExistingWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = removeExistingValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeExistingAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeExistingValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveExistingRequestBuilder {
        private final String userId;

        private RemoveExistingRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for removeExisting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> * &#x60;no_content&#x60;: Removes the avatar and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeExistingCall(userId, _callback);
        }


        /**
         * Execute removeExisting request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> * &#x60;no_content&#x60;: Removes the avatar and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeExistingWithHttpInfo(userId);
        }

        /**
         * Execute removeExisting request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> * &#x60;no_content&#x60;: Removes the avatar and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeExistingWithHttpInfo(userId);
        }

        /**
         * Execute removeExisting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> * &#x60;no_content&#x60;: Removes the avatar and returns an empty response. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeExistingAsync(userId, _callback);
        }
    }

    /**
     * Delete user avatar
     * Removes an existing user avatar. You cannot reverse this operation.
     * @param userId The ID of the user. (required)
     * @return RemoveExistingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> * &#x60;no_content&#x60;: Removes the avatar and returns an empty response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected client error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveExistingRequestBuilder removeExisting(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new RemoveExistingRequestBuilder(userId);
    }
}
