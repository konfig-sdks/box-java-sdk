/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TrackingCode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UserFullAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UserFullAllOf {
  /**
   * The user’s enterprise role
   */
  @JsonAdapter(RoleEnum.Adapter.class)
 public enum RoleEnum {
    ADMIN("admin"),
    
    COADMIN("coadmin"),
    
    USER("user");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  public static final String SERIALIZED_NAME_TRACKING_CODES = "tracking_codes";
  @SerializedName(SERIALIZED_NAME_TRACKING_CODES)
  private List<TrackingCode> trackingCodes = null;

  public static final String SERIALIZED_NAME_CAN_SEE_MANAGED_USERS = "can_see_managed_users";
  @SerializedName(SERIALIZED_NAME_CAN_SEE_MANAGED_USERS)
  private Boolean canSeeManagedUsers;

  public static final String SERIALIZED_NAME_IS_SYNC_ENABLED = "is_sync_enabled";
  @SerializedName(SERIALIZED_NAME_IS_SYNC_ENABLED)
  private Boolean isSyncEnabled;

  public static final String SERIALIZED_NAME_IS_EXTERNAL_COLLAB_RESTRICTED = "is_external_collab_restricted";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL_COLLAB_RESTRICTED)
  private Boolean isExternalCollabRestricted;

  public static final String SERIALIZED_NAME_IS_EXEMPT_FROM_DEVICE_LIMITS = "is_exempt_from_device_limits";
  @SerializedName(SERIALIZED_NAME_IS_EXEMPT_FROM_DEVICE_LIMITS)
  private Boolean isExemptFromDeviceLimits;

  public static final String SERIALIZED_NAME_IS_EXEMPT_FROM_LOGIN_VERIFICATION = "is_exempt_from_login_verification";
  @SerializedName(SERIALIZED_NAME_IS_EXEMPT_FROM_LOGIN_VERIFICATION)
  private Boolean isExemptFromLoginVerification;

  public static final String SERIALIZED_NAME_ENTERPRISE = "enterprise";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE)
  private Object enterprise;

  public static final String SERIALIZED_NAME_MY_TAGS = "my_tags";
  @SerializedName(SERIALIZED_NAME_MY_TAGS)
  private List<String> myTags = null;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_IS_PLATFORM_ACCESS_ONLY = "is_platform_access_only";
  @SerializedName(SERIALIZED_NAME_IS_PLATFORM_ACCESS_ONLY)
  private Boolean isPlatformAccessOnly;

  public static final String SERIALIZED_NAME_EXTERNAL_APP_USER_ID = "external_app_user_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_APP_USER_ID)
  private String externalAppUserId;

  public UserFullAllOf() {
  }

  public UserFullAllOf role(RoleEnum role) {
    
    
    
    
    this.role = role;
    return this;
  }

   /**
   * The user’s enterprise role
   * @return role
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ADMIN", value = "The user’s enterprise role")

  public RoleEnum getRole() {
    return role;
  }


  public void setRole(RoleEnum role) {
    
    
    
    this.role = role;
  }


  public UserFullAllOf trackingCodes(List<TrackingCode> trackingCodes) {
    
    
    
    
    this.trackingCodes = trackingCodes;
    return this;
  }

  public UserFullAllOf addTrackingCodesItem(TrackingCode trackingCodesItem) {
    if (this.trackingCodes == null) {
      this.trackingCodes = new ArrayList<>();
    }
    this.trackingCodes.add(trackingCodesItem);
    return this;
  }

   /**
   * Tracking codes allow an admin to generate reports from the admin console and assign an attribute to a specific group of users. This setting must be enabled for an enterprise before it can be used.
   * @return trackingCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tracking codes allow an admin to generate reports from the admin console and assign an attribute to a specific group of users. This setting must be enabled for an enterprise before it can be used.")

  public List<TrackingCode> getTrackingCodes() {
    return trackingCodes;
  }


  public void setTrackingCodes(List<TrackingCode> trackingCodes) {
    
    
    
    this.trackingCodes = trackingCodes;
  }


  public UserFullAllOf canSeeManagedUsers(Boolean canSeeManagedUsers) {
    
    
    
    
    this.canSeeManagedUsers = canSeeManagedUsers;
    return this;
  }

   /**
   * Whether the user can see other enterprise users in their contact list
   * @return canSeeManagedUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the user can see other enterprise users in their contact list")

  public Boolean getCanSeeManagedUsers() {
    return canSeeManagedUsers;
  }


  public void setCanSeeManagedUsers(Boolean canSeeManagedUsers) {
    
    
    
    this.canSeeManagedUsers = canSeeManagedUsers;
  }


  public UserFullAllOf isSyncEnabled(Boolean isSyncEnabled) {
    
    
    
    
    this.isSyncEnabled = isSyncEnabled;
    return this;
  }

   /**
   * Whether the user can use Box Sync
   * @return isSyncEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the user can use Box Sync")

  public Boolean getIsSyncEnabled() {
    return isSyncEnabled;
  }


  public void setIsSyncEnabled(Boolean isSyncEnabled) {
    
    
    
    this.isSyncEnabled = isSyncEnabled;
  }


  public UserFullAllOf isExternalCollabRestricted(Boolean isExternalCollabRestricted) {
    
    
    
    
    this.isExternalCollabRestricted = isExternalCollabRestricted;
    return this;
  }

   /**
   * Whether the user is allowed to collaborate with users outside their enterprise
   * @return isExternalCollabRestricted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the user is allowed to collaborate with users outside their enterprise")

  public Boolean getIsExternalCollabRestricted() {
    return isExternalCollabRestricted;
  }


  public void setIsExternalCollabRestricted(Boolean isExternalCollabRestricted) {
    
    
    
    this.isExternalCollabRestricted = isExternalCollabRestricted;
  }


  public UserFullAllOf isExemptFromDeviceLimits(Boolean isExemptFromDeviceLimits) {
    
    
    
    
    this.isExemptFromDeviceLimits = isExemptFromDeviceLimits;
    return this;
  }

   /**
   * Whether to exempt the user from Enterprise device limits
   * @return isExemptFromDeviceLimits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to exempt the user from Enterprise device limits")

  public Boolean getIsExemptFromDeviceLimits() {
    return isExemptFromDeviceLimits;
  }


  public void setIsExemptFromDeviceLimits(Boolean isExemptFromDeviceLimits) {
    
    
    
    this.isExemptFromDeviceLimits = isExemptFromDeviceLimits;
  }


  public UserFullAllOf isExemptFromLoginVerification(Boolean isExemptFromLoginVerification) {
    
    
    
    
    this.isExemptFromLoginVerification = isExemptFromLoginVerification;
    return this;
  }

   /**
   * Whether the user must use two-factor authentication
   * @return isExemptFromLoginVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the user must use two-factor authentication")

  public Boolean getIsExemptFromLoginVerification() {
    return isExemptFromLoginVerification;
  }


  public void setIsExemptFromLoginVerification(Boolean isExemptFromLoginVerification) {
    
    
    
    this.isExemptFromLoginVerification = isExemptFromLoginVerification;
  }


  public UserFullAllOf enterprise(Object enterprise) {
    
    
    
    
    this.enterprise = enterprise;
    return this;
  }

   /**
   * Get enterprise
   * @return enterprise
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getEnterprise() {
    return enterprise;
  }


  public void setEnterprise(Object enterprise) {
    
    
    
    this.enterprise = enterprise;
  }


  public UserFullAllOf myTags(List<String> myTags) {
    
    
    
    
    this.myTags = myTags;
    return this;
  }

  public UserFullAllOf addMyTagsItem(String myTagsItem) {
    if (this.myTags == null) {
      this.myTags = new ArrayList<>();
    }
    this.myTags.add(myTagsItem);
    return this;
  }

   /**
   * Tags for all files and folders owned by the user. Values returned will only contain tags that were set by the requester.
   * @return myTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"important\"]", value = "Tags for all files and folders owned by the user. Values returned will only contain tags that were set by the requester.")

  public List<String> getMyTags() {
    return myTags;
  }


  public void setMyTags(List<String> myTags) {
    
    
    
    this.myTags = myTags;
  }


  public UserFullAllOf hostname(String hostname) {
    
    
    
    
    this.hostname = hostname;
    return this;
  }

   /**
   * The root (protocol, subdomain, domain) of any links that need to be generated for the user
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.app.box.com/", value = "The root (protocol, subdomain, domain) of any links that need to be generated for the user")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    
    
    
    this.hostname = hostname;
  }


  public UserFullAllOf isPlatformAccessOnly(Boolean isPlatformAccessOnly) {
    
    
    
    
    this.isPlatformAccessOnly = isPlatformAccessOnly;
    return this;
  }

   /**
   * Whether the user is an App User
   * @return isPlatformAccessOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the user is an App User")

  public Boolean getIsPlatformAccessOnly() {
    return isPlatformAccessOnly;
  }


  public void setIsPlatformAccessOnly(Boolean isPlatformAccessOnly) {
    
    
    
    this.isPlatformAccessOnly = isPlatformAccessOnly;
  }


  public UserFullAllOf externalAppUserId(String externalAppUserId) {
    
    
    
    
    this.externalAppUserId = externalAppUserId;
    return this;
  }

   /**
   * An external identifier for an app user, which can be used to look up the user. This can be used to tie user IDs from external identity providers to Box users.
   * @return externalAppUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "my-user-1234", value = "An external identifier for an app user, which can be used to look up the user. This can be used to tie user IDs from external identity providers to Box users.")

  public String getExternalAppUserId() {
    return externalAppUserId;
  }


  public void setExternalAppUserId(String externalAppUserId) {
    
    
    
    this.externalAppUserId = externalAppUserId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UserFullAllOf instance itself
   */
  public UserFullAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserFullAllOf userFullAllOf = (UserFullAllOf) o;
    return Objects.equals(this.role, userFullAllOf.role) &&
        Objects.equals(this.trackingCodes, userFullAllOf.trackingCodes) &&
        Objects.equals(this.canSeeManagedUsers, userFullAllOf.canSeeManagedUsers) &&
        Objects.equals(this.isSyncEnabled, userFullAllOf.isSyncEnabled) &&
        Objects.equals(this.isExternalCollabRestricted, userFullAllOf.isExternalCollabRestricted) &&
        Objects.equals(this.isExemptFromDeviceLimits, userFullAllOf.isExemptFromDeviceLimits) &&
        Objects.equals(this.isExemptFromLoginVerification, userFullAllOf.isExemptFromLoginVerification) &&
        Objects.equals(this.enterprise, userFullAllOf.enterprise) &&
        Objects.equals(this.myTags, userFullAllOf.myTags) &&
        Objects.equals(this.hostname, userFullAllOf.hostname) &&
        Objects.equals(this.isPlatformAccessOnly, userFullAllOf.isPlatformAccessOnly) &&
        Objects.equals(this.externalAppUserId, userFullAllOf.externalAppUserId)&&
        Objects.equals(this.additionalProperties, userFullAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(role, trackingCodes, canSeeManagedUsers, isSyncEnabled, isExternalCollabRestricted, isExemptFromDeviceLimits, isExemptFromLoginVerification, enterprise, myTags, hostname, isPlatformAccessOnly, externalAppUserId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserFullAllOf {\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    trackingCodes: ").append(toIndentedString(trackingCodes)).append("\n");
    sb.append("    canSeeManagedUsers: ").append(toIndentedString(canSeeManagedUsers)).append("\n");
    sb.append("    isSyncEnabled: ").append(toIndentedString(isSyncEnabled)).append("\n");
    sb.append("    isExternalCollabRestricted: ").append(toIndentedString(isExternalCollabRestricted)).append("\n");
    sb.append("    isExemptFromDeviceLimits: ").append(toIndentedString(isExemptFromDeviceLimits)).append("\n");
    sb.append("    isExemptFromLoginVerification: ").append(toIndentedString(isExemptFromLoginVerification)).append("\n");
    sb.append("    enterprise: ").append(toIndentedString(enterprise)).append("\n");
    sb.append("    myTags: ").append(toIndentedString(myTags)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    isPlatformAccessOnly: ").append(toIndentedString(isPlatformAccessOnly)).append("\n");
    sb.append("    externalAppUserId: ").append(toIndentedString(externalAppUserId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("role");
    openapiFields.add("tracking_codes");
    openapiFields.add("can_see_managed_users");
    openapiFields.add("is_sync_enabled");
    openapiFields.add("is_external_collab_restricted");
    openapiFields.add("is_exempt_from_device_limits");
    openapiFields.add("is_exempt_from_login_verification");
    openapiFields.add("enterprise");
    openapiFields.add("my_tags");
    openapiFields.add("hostname");
    openapiFields.add("is_platform_access_only");
    openapiFields.add("external_app_user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserFullAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserFullAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserFullAllOf is not found in the empty JSON string", UserFullAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if (jsonObj.get("tracking_codes") != null && !jsonObj.get("tracking_codes").isJsonNull()) {
        JsonArray jsonArraytrackingCodes = jsonObj.getAsJsonArray("tracking_codes");
        if (jsonArraytrackingCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracking_codes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracking_codes` to be an array in the JSON string but got `%s`", jsonObj.get("tracking_codes").toString()));
          }

          // validate the optional field `tracking_codes` (array)
          for (int i = 0; i < jsonArraytrackingCodes.size(); i++) {
            TrackingCode.validateJsonObject(jsonArraytrackingCodes.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `enterprise`
      if (jsonObj.get("enterprise") != null && !jsonObj.get("enterprise").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("enterprise"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("my_tags") != null && !jsonObj.get("my_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `my_tags` to be an array in the JSON string but got `%s`", jsonObj.get("my_tags").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("external_app_user_id") != null && !jsonObj.get("external_app_user_id").isJsonNull()) && !jsonObj.get("external_app_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_app_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_app_user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserFullAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserFullAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserFullAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserFullAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<UserFullAllOf>() {
           @Override
           public void write(JsonWriter out, UserFullAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UserFullAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UserFullAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserFullAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserFullAllOf
  * @throws IOException if the JSON string is invalid with respect to UserFullAllOf
  */
  public static UserFullAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserFullAllOf.class);
  }

 /**
  * Convert an instance of UserFullAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

