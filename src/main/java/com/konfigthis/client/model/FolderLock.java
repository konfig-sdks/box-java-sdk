/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FolderLockCreatedBy;
import com.konfigthis.client.model.FolderLockFolder;
import com.konfigthis.client.model.FolderLockLockedOperations;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Folder locks define access restrictions placed by folder owners to prevent specific folders from being moved or deleted.
 */
@ApiModel(description = "Folder locks define access restrictions placed by folder owners to prevent specific folders from being moved or deleted.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FolderLock {
  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private FolderLockFolder folder;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private FolderLockCreatedBy createdBy;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LOCKED_OPERATIONS = "locked_operations";
  @SerializedName(SERIALIZED_NAME_LOCKED_OPERATIONS)
  private FolderLockLockedOperations lockedOperations;

  public static final String SERIALIZED_NAME_LOCK_TYPE = "lock_type";
  @SerializedName(SERIALIZED_NAME_LOCK_TYPE)
  private String lockType;

  public FolderLock() {
  }

  public FolderLock folder(FolderLockFolder folder) {
    
    
    
    
    this.folder = folder;
    return this;
  }

   /**
   * Get folder
   * @return folder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FolderLockFolder getFolder() {
    return folder;
  }


  public void setFolder(FolderLockFolder folder) {
    
    
    
    this.folder = folder;
  }


  public FolderLock id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for this folder lock.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345678", value = "The unique identifier for this folder lock.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public FolderLock type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The object type, always &#x60;folder_lock&#x60;.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "folder_lock", value = "The object type, always `folder_lock`.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public FolderLock createdBy(FolderLockCreatedBy createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FolderLockCreatedBy getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(FolderLockCreatedBy createdBy) {
    
    
    
    this.createdBy = createdBy;
  }


  public FolderLock createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When the folder lock object was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-09-14T23:12:53Z", value = "When the folder lock object was created.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public FolderLock lockedOperations(FolderLockLockedOperations lockedOperations) {
    
    
    
    
    this.lockedOperations = lockedOperations;
    return this;
  }

   /**
   * Get lockedOperations
   * @return lockedOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FolderLockLockedOperations getLockedOperations() {
    return lockedOperations;
  }


  public void setLockedOperations(FolderLockLockedOperations lockedOperations) {
    
    
    
    this.lockedOperations = lockedOperations;
  }


  public FolderLock lockType(String lockType) {
    
    
    
    
    this.lockType = lockType;
    return this;
  }

   /**
   * The lock type, always &#x60;freeze&#x60;.
   * @return lockType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "freeze", value = "The lock type, always `freeze`.")

  public String getLockType() {
    return lockType;
  }


  public void setLockType(String lockType) {
    
    
    
    this.lockType = lockType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FolderLock instance itself
   */
  public FolderLock putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FolderLock folderLock = (FolderLock) o;
    return Objects.equals(this.folder, folderLock.folder) &&
        Objects.equals(this.id, folderLock.id) &&
        Objects.equals(this.type, folderLock.type) &&
        Objects.equals(this.createdBy, folderLock.createdBy) &&
        Objects.equals(this.createdAt, folderLock.createdAt) &&
        Objects.equals(this.lockedOperations, folderLock.lockedOperations) &&
        Objects.equals(this.lockType, folderLock.lockType)&&
        Objects.equals(this.additionalProperties, folderLock.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(folder, id, type, createdBy, createdAt, lockedOperations, lockType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FolderLock {\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lockedOperations: ").append(toIndentedString(lockedOperations)).append("\n");
    sb.append("    lockType: ").append(toIndentedString(lockType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("folder");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("created_by");
    openapiFields.add("created_at");
    openapiFields.add("locked_operations");
    openapiFields.add("lock_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FolderLock
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FolderLock.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FolderLock is not found in the empty JSON string", FolderLock.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `folder`
      if (jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) {
        FolderLockFolder.validateJsonObject(jsonObj.getAsJsonObject("folder"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        FolderLockCreatedBy.validateJsonObject(jsonObj.getAsJsonObject("created_by"));
      }
      // validate the optional field `locked_operations`
      if (jsonObj.get("locked_operations") != null && !jsonObj.get("locked_operations").isJsonNull()) {
        FolderLockLockedOperations.validateJsonObject(jsonObj.getAsJsonObject("locked_operations"));
      }
      if ((jsonObj.get("lock_type") != null && !jsonObj.get("lock_type").isJsonNull()) && !jsonObj.get("lock_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lock_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lock_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FolderLock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FolderLock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FolderLock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FolderLock.class));

       return (TypeAdapter<T>) new TypeAdapter<FolderLock>() {
           @Override
           public void write(JsonWriter out, FolderLock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FolderLock read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FolderLock instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FolderLock given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FolderLock
  * @throws IOException if the JSON string is invalid with respect to FolderLock
  */
  public static FolderLock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FolderLock.class);
  }

 /**
  * Convert an instance of FolderLock to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

