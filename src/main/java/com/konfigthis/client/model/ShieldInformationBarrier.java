/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnterpriseBase;
import com.konfigthis.client.model.ShieldInformationBarrierEnabledBy;
import com.konfigthis.client.model.UserBase;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A standard representation of a shield information barrier object
 */
@ApiModel(description = "A standard representation of a shield information barrier object")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ShieldInformationBarrier {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The type of the shield information barrier
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    SHIELD_INFORMATION_BARRIER("shield_information_barrier");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ENTERPRISE = "enterprise";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE)
  private EnterpriseBase enterprise;

  /**
   * Status of the shield information barrier
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    DRAFT("draft"),
    
    PENDING("pending"),
    
    DISABLED("disabled"),
    
    ENABLED("enabled"),
    
    INVALID("invalid");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserBase createdBy;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updated_by";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private UserBase updatedBy;

  public static final String SERIALIZED_NAME_ENABLED_AT = "enabled_at";
  @SerializedName(SERIALIZED_NAME_ENABLED_AT)
  private OffsetDateTime enabledAt;

  public static final String SERIALIZED_NAME_ENABLED_BY = "enabled_by";
  @SerializedName(SERIALIZED_NAME_ENABLED_BY)
  private ShieldInformationBarrierEnabledBy enabledBy;

  public ShieldInformationBarrier() {
  }

  public ShieldInformationBarrier id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for the shield information barrier
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11446498", value = "The unique identifier for the shield information barrier")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ShieldInformationBarrier type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of the shield information barrier
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SHIELD_INFORMATION_BARRIER", value = "The type of the shield information barrier")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public ShieldInformationBarrier enterprise(EnterpriseBase enterprise) {
    
    
    
    
    this.enterprise = enterprise;
    return this;
  }

   /**
   * The &#x60;type&#x60; and &#x60;id&#x60; of enterprise this barrier is under.
   * @return enterprise
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The `type` and `id` of enterprise this barrier is under.")

  public EnterpriseBase getEnterprise() {
    return enterprise;
  }


  public void setEnterprise(EnterpriseBase enterprise) {
    
    
    
    this.enterprise = enterprise;
  }


  public ShieldInformationBarrier status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Status of the shield information barrier
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DRAFT", value = "Status of the shield information barrier")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ShieldInformationBarrier createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * ISO date time string when this shield information barrier object was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-06-26T18:44:45.869Z", value = "ISO date time string when this shield information barrier object was created.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public ShieldInformationBarrier createdBy(UserBase createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * The user who created this shield information barrier.
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user who created this shield information barrier.")

  public UserBase getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(UserBase createdBy) {
    
    
    
    this.createdBy = createdBy;
  }


  public ShieldInformationBarrier updatedAt(OffsetDateTime updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * ISO date time string when this shield information barrier was updated.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-07-26T18:44:45.869Z", value = "ISO date time string when this shield information barrier was updated.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public ShieldInformationBarrier updatedBy(UserBase updatedBy) {
    
    
    
    
    this.updatedBy = updatedBy;
    return this;
  }

   /**
   * The user that updated this shield information barrier.
   * @return updatedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user that updated this shield information barrier.")

  public UserBase getUpdatedBy() {
    return updatedBy;
  }


  public void setUpdatedBy(UserBase updatedBy) {
    
    
    
    this.updatedBy = updatedBy;
  }


  public ShieldInformationBarrier enabledAt(OffsetDateTime enabledAt) {
    
    
    
    
    this.enabledAt = enabledAt;
    return this;
  }

   /**
   * ISO date time string when this shield information barrier was enabled.
   * @return enabledAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-07-26T18:44:45.869Z", value = "ISO date time string when this shield information barrier was enabled.")

  public OffsetDateTime getEnabledAt() {
    return enabledAt;
  }


  public void setEnabledAt(OffsetDateTime enabledAt) {
    
    
    
    this.enabledAt = enabledAt;
  }


  public ShieldInformationBarrier enabledBy(ShieldInformationBarrierEnabledBy enabledBy) {
    
    
    
    
    this.enabledBy = enabledBy;
    return this;
  }

   /**
   * Get enabledBy
   * @return enabledBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ShieldInformationBarrierEnabledBy getEnabledBy() {
    return enabledBy;
  }


  public void setEnabledBy(ShieldInformationBarrierEnabledBy enabledBy) {
    
    
    
    this.enabledBy = enabledBy;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ShieldInformationBarrier instance itself
   */
  public ShieldInformationBarrier putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShieldInformationBarrier shieldInformationBarrier = (ShieldInformationBarrier) o;
    return Objects.equals(this.id, shieldInformationBarrier.id) &&
        Objects.equals(this.type, shieldInformationBarrier.type) &&
        Objects.equals(this.enterprise, shieldInformationBarrier.enterprise) &&
        Objects.equals(this.status, shieldInformationBarrier.status) &&
        Objects.equals(this.createdAt, shieldInformationBarrier.createdAt) &&
        Objects.equals(this.createdBy, shieldInformationBarrier.createdBy) &&
        Objects.equals(this.updatedAt, shieldInformationBarrier.updatedAt) &&
        Objects.equals(this.updatedBy, shieldInformationBarrier.updatedBy) &&
        Objects.equals(this.enabledAt, shieldInformationBarrier.enabledAt) &&
        Objects.equals(this.enabledBy, shieldInformationBarrier.enabledBy)&&
        Objects.equals(this.additionalProperties, shieldInformationBarrier.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, enterprise, status, createdAt, createdBy, updatedAt, updatedBy, enabledAt, enabledBy, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShieldInformationBarrier {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    enterprise: ").append(toIndentedString(enterprise)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    enabledAt: ").append(toIndentedString(enabledAt)).append("\n");
    sb.append("    enabledBy: ").append(toIndentedString(enabledBy)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("enterprise");
    openapiFields.add("status");
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("updated_at");
    openapiFields.add("updated_by");
    openapiFields.add("enabled_at");
    openapiFields.add("enabled_by");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShieldInformationBarrier
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShieldInformationBarrier.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShieldInformationBarrier is not found in the empty JSON string", ShieldInformationBarrier.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `enterprise`
      if (jsonObj.get("enterprise") != null && !jsonObj.get("enterprise").isJsonNull()) {
        EnterpriseBase.validateJsonObject(jsonObj.getAsJsonObject("enterprise"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        UserBase.validateJsonObject(jsonObj.getAsJsonObject("created_by"));
      }
      // validate the optional field `updated_by`
      if (jsonObj.get("updated_by") != null && !jsonObj.get("updated_by").isJsonNull()) {
        UserBase.validateJsonObject(jsonObj.getAsJsonObject("updated_by"));
      }
      // validate the optional field `enabled_by`
      if (jsonObj.get("enabled_by") != null && !jsonObj.get("enabled_by").isJsonNull()) {
        ShieldInformationBarrierEnabledBy.validateJsonObject(jsonObj.getAsJsonObject("enabled_by"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShieldInformationBarrier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShieldInformationBarrier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShieldInformationBarrier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShieldInformationBarrier.class));

       return (TypeAdapter<T>) new TypeAdapter<ShieldInformationBarrier>() {
           @Override
           public void write(JsonWriter out, ShieldInformationBarrier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ShieldInformationBarrier read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ShieldInformationBarrier instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShieldInformationBarrier given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShieldInformationBarrier
  * @throws IOException if the JSON string is invalid with respect to ShieldInformationBarrier
  */
  public static ShieldInformationBarrier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShieldInformationBarrier.class);
  }

 /**
  * Convert an instance of ShieldInformationBarrier to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

