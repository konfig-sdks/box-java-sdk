/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ClientErrorContextInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A generic error
 */
@ApiModel(description = "A generic error")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ClientError {
  /**
   * error
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    ERROR("error");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  /**
   * A Box-specific error code
   */
  @JsonAdapter(CodeEnum.Adapter.class)
 public enum CodeEnum {
    CREATED("created"),
    
    ACCEPTED("accepted"),
    
    NO_CONTENT("no_content"),
    
    REDIRECT("redirect"),
    
    NOT_MODIFIED("not_modified"),
    
    BAD_REQUEST("bad_request"),
    
    UNAUTHORIZED("unauthorized"),
    
    FORBIDDEN("forbidden"),
    
    NOT_FOUND("not_found"),
    
    METHOD_NOT_ALLOWED("method_not_allowed"),
    
    CONFLICT("conflict"),
    
    PRECONDITION_FAILED("precondition_failed"),
    
    TOO_MANY_REQUESTS("too_many_requests"),
    
    INTERNAL_SERVER_ERROR("internal_server_error"),
    
    UNAVAILABLE("unavailable"),
    
    ITEM_NAME_INVALID("item_name_invalid"),
    
    INSUFFICIENT_SCOPE("insufficient_scope");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_CONTEXT_INFO = "context_info";
  @SerializedName(SERIALIZED_NAME_CONTEXT_INFO)
  private ClientErrorContextInfo contextInfo;

  public static final String SERIALIZED_NAME_HELP_URL = "help_url";
  @SerializedName(SERIALIZED_NAME_HELP_URL)
  private String helpUrl;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public ClientError() {
  }

  public ClientError type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * error
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ERROR", value = "error")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public ClientError status(Integer status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The HTTP status of the response.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "400", value = "The HTTP status of the response.")

  public Integer getStatus() {
    return status;
  }


  public void setStatus(Integer status) {
    
    
    
    this.status = status;
  }


  public ClientError code(CodeEnum code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * A Box-specific error code
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ITEM_NAME_INVALID", value = "A Box-specific error code")

  public CodeEnum getCode() {
    return code;
  }


  public void setCode(CodeEnum code) {
    
    
    
    this.code = code;
  }


  public ClientError message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * A short message describing the error.
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Method Not Allowed", value = "A short message describing the error.")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }


  public ClientError contextInfo(ClientErrorContextInfo contextInfo) {
    
    
    
    
    this.contextInfo = contextInfo;
    return this;
  }

   /**
   * Get contextInfo
   * @return contextInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ClientErrorContextInfo getContextInfo() {
    return contextInfo;
  }


  public void setContextInfo(ClientErrorContextInfo contextInfo) {
    
    
    
    this.contextInfo = contextInfo;
  }


  public ClientError helpUrl(String helpUrl) {
    
    
    
    
    this.helpUrl = helpUrl;
    return this;
  }

   /**
   * A URL that links to more information about why this error occurred.
   * @return helpUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://developer.box.com/guides/api-calls/permissions-and-errors/common-errors/", value = "A URL that links to more information about why this error occurred.")

  public String getHelpUrl() {
    return helpUrl;
  }


  public void setHelpUrl(String helpUrl) {
    
    
    
    this.helpUrl = helpUrl;
  }


  public ClientError requestId(String requestId) {
    
    
    
    
    this.requestId = requestId;
    return this;
  }

   /**
   * A unique identifier for this response, which can be used when contacting Box support.
   * @return requestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "abcdef123456", value = "A unique identifier for this response, which can be used when contacting Box support.")

  public String getRequestId() {
    return requestId;
  }


  public void setRequestId(String requestId) {
    
    
    
    this.requestId = requestId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ClientError instance itself
   */
  public ClientError putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientError clientError = (ClientError) o;
    return Objects.equals(this.type, clientError.type) &&
        Objects.equals(this.status, clientError.status) &&
        Objects.equals(this.code, clientError.code) &&
        Objects.equals(this.message, clientError.message) &&
        Objects.equals(this.contextInfo, clientError.contextInfo) &&
        Objects.equals(this.helpUrl, clientError.helpUrl) &&
        Objects.equals(this.requestId, clientError.requestId)&&
        Objects.equals(this.additionalProperties, clientError.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, status, code, message, contextInfo, helpUrl, requestId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientError {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    contextInfo: ").append(toIndentedString(contextInfo)).append("\n");
    sb.append("    helpUrl: ").append(toIndentedString(helpUrl)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("status");
    openapiFields.add("code");
    openapiFields.add("message");
    openapiFields.add("context_info");
    openapiFields.add("help_url");
    openapiFields.add("request_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ClientError
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ClientError.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientError is not found in the empty JSON string", ClientError.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `context_info`
      if (jsonObj.get("context_info") != null && !jsonObj.get("context_info").isJsonNull()) {
        ClientErrorContextInfo.validateJsonObject(jsonObj.getAsJsonObject("context_info"));
      }
      if ((jsonObj.get("help_url") != null && !jsonObj.get("help_url").isJsonNull()) && !jsonObj.get("help_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `help_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("help_url").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientError.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientError>() {
           @Override
           public void write(JsonWriter out, ClientError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientError read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ClientError instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClientError given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClientError
  * @throws IOException if the JSON string is invalid with respect to ClientError
  */
  public static ClientError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientError.class);
  }

 /**
  * Convert an instance of ClientError to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

