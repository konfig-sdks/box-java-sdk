/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FileRequestCreatedBy;
import com.konfigthis.client.model.FileRequestFolder;
import com.konfigthis.client.model.FileRequestUpdatedBy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A standard representation of a file request, as returned from any file request API endpoints by default.
 */
@ApiModel(description = "A standard representation of a file request, as returned from any file request API endpoints by default.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FileRequest {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * &#x60;file_request&#x60;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    FILE_REQUEST("file_request");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * The status of the file request. This defaults to &#x60;active&#x60;.  When the status is set to &#x60;inactive&#x60;, the file request will no longer accept new submissions, and any visitor to the file request URL will receive a &#x60;HTTP 404&#x60; status code.  This defaults to status of file request that was copied to create this file request.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("active"),
    
    INACTIVE("inactive");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_IS_EMAIL_REQUIRED = "is_email_required";
  @SerializedName(SERIALIZED_NAME_IS_EMAIL_REQUIRED)
  private Boolean isEmailRequired;

  public static final String SERIALIZED_NAME_IS_DESCRIPTION_REQUIRED = "is_description_required";
  @SerializedName(SERIALIZED_NAME_IS_DESCRIPTION_REQUIRED)
  private Boolean isDescriptionRequired;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private FileRequestFolder folder;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private FileRequestCreatedBy createdBy;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updated_by";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private FileRequestUpdatedBy updatedBy;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public FileRequest() {
  }

  
  public FileRequest(
     String id, 
     TypeEnum type, 
     String url
  ) {
    this();
    this.id = id;
    this.type = type;
    this.url = url;
  }

  public FileRequest title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * The title of file request. This is shown in the Box UI to users uploading files.  This defaults to title of the file request that was copied to create this file request.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Please upload documents", value = "The title of file request. This is shown in the Box UI to users uploading files.  This defaults to title of the file request that was copied to create this file request.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public FileRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The optional description of this file request. This is shown in the Box UI to users uploading files.  This defaults to description of the file request that was copied to create this file request.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Following documents are requested for your process", value = "The optional description of this file request. This is shown in the Box UI to users uploading files.  This defaults to description of the file request that was copied to create this file request.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


   /**
   * The unique identifier for this file request.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "42037322", required = true, value = "The unique identifier for this file request.")

  public String getId() {
    return id;
  }




   /**
   * &#x60;file_request&#x60;
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "FILE_REQUEST", required = true, value = "`file_request`")

  public TypeEnum getType() {
    return type;
  }




  public FileRequest status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the file request. This defaults to &#x60;active&#x60;.  When the status is set to &#x60;inactive&#x60;, the file request will no longer accept new submissions, and any visitor to the file request URL will receive a &#x60;HTTP 404&#x60; status code.  This defaults to status of file request that was copied to create this file request.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACTIVE", value = "The status of the file request. This defaults to `active`.  When the status is set to `inactive`, the file request will no longer accept new submissions, and any visitor to the file request URL will receive a `HTTP 404` status code.  This defaults to status of file request that was copied to create this file request.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public FileRequest isEmailRequired(Boolean isEmailRequired) {
    
    
    
    
    this.isEmailRequired = isEmailRequired;
    return this;
  }

   /**
   * Whether a file request submitter is required to provide their email address.  When this setting is set to true, the Box UI will show an email field on the file request form.  This defaults to setting of file request that was copied to create this file request.
   * @return isEmailRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether a file request submitter is required to provide their email address.  When this setting is set to true, the Box UI will show an email field on the file request form.  This defaults to setting of file request that was copied to create this file request.")

  public Boolean getIsEmailRequired() {
    return isEmailRequired;
  }


  public void setIsEmailRequired(Boolean isEmailRequired) {
    
    
    
    this.isEmailRequired = isEmailRequired;
  }


  public FileRequest isDescriptionRequired(Boolean isDescriptionRequired) {
    
    
    
    
    this.isDescriptionRequired = isDescriptionRequired;
    return this;
  }

   /**
   * Whether a file request submitter is required to provide a description of the files they are submitting.  When this setting is set to true, the Box UI will show a description field on the file request form.  This defaults to setting of file request that was copied to create this file request.
   * @return isDescriptionRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether a file request submitter is required to provide a description of the files they are submitting.  When this setting is set to true, the Box UI will show a description field on the file request form.  This defaults to setting of file request that was copied to create this file request.")

  public Boolean getIsDescriptionRequired() {
    return isDescriptionRequired;
  }


  public void setIsDescriptionRequired(Boolean isDescriptionRequired) {
    
    
    
    this.isDescriptionRequired = isDescriptionRequired;
  }


  public FileRequest expiresAt(OffsetDateTime expiresAt) {
    
    
    
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * The date after which a file request will no longer accept new submissions.  After this date, the &#x60;status&#x60; will automatically be set to &#x60;inactive&#x60;.
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-09-28T10:53:43-08:00", value = "The date after which a file request will no longer accept new submissions.  After this date, the `status` will automatically be set to `inactive`.")

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(OffsetDateTime expiresAt) {
    
    
    
    this.expiresAt = expiresAt;
  }


  public FileRequest folder(FileRequestFolder folder) {
    
    
    
    
    this.folder = folder;
    return this;
  }

   /**
   * Get folder
   * @return folder
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public FileRequestFolder getFolder() {
    return folder;
  }


  public void setFolder(FileRequestFolder folder) {
    
    
    
    this.folder = folder;
  }


   /**
   * The generated URL for this file request. This URL can be shared with users to let them upload files to the associated folder.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/f/19e57f40ace247278a8e3d336678c64a", value = "The generated URL for this file request. This URL can be shared with users to let them upload files to the associated folder.")

  public String getUrl() {
    return url;
  }




  public FileRequest etag(String etag) {
    
    
    
    
    this.etag = etag;
    return this;
  }

   /**
   * The HTTP &#x60;etag&#x60; of this file. This can be used in combination with the &#x60;If-Match&#x60; header when updating a file request. By providing that header, a change will only be performed on the  file request if the &#x60;etag&#x60; on the file request still matches the &#x60;etag&#x60; provided in the &#x60;If-Match&#x60; header.
   * @return etag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The HTTP `etag` of this file. This can be used in combination with the `If-Match` header when updating a file request. By providing that header, a change will only be performed on the  file request if the `etag` on the file request still matches the `etag` provided in the `If-Match` header.")

  public String getEtag() {
    return etag;
  }


  public void setEtag(String etag) {
    
    
    
    this.etag = etag;
  }


  public FileRequest createdBy(FileRequestCreatedBy createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FileRequestCreatedBy getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(FileRequestCreatedBy createdBy) {
    
    
    
    this.createdBy = createdBy;
  }


  public FileRequest createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when the file request was created.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-09-28T10:53:43-08:00", required = true, value = "The date and time when the file request was created.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public FileRequest updatedBy(FileRequestUpdatedBy updatedBy) {
    
    
    
    
    this.updatedBy = updatedBy;
    return this;
  }

   /**
   * Get updatedBy
   * @return updatedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FileRequestUpdatedBy getUpdatedBy() {
    return updatedBy;
  }


  public void setUpdatedBy(FileRequestUpdatedBy updatedBy) {
    
    
    
    this.updatedBy = updatedBy;
  }


  public FileRequest updatedAt(OffsetDateTime updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The date and time when the file request was last updated.
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-09-28T10:53:43-08:00", required = true, value = "The date and time when the file request was last updated.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FileRequest instance itself
   */
  public FileRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileRequest fileRequest = (FileRequest) o;
    return Objects.equals(this.title, fileRequest.title) &&
        Objects.equals(this.description, fileRequest.description) &&
        Objects.equals(this.id, fileRequest.id) &&
        Objects.equals(this.type, fileRequest.type) &&
        Objects.equals(this.status, fileRequest.status) &&
        Objects.equals(this.isEmailRequired, fileRequest.isEmailRequired) &&
        Objects.equals(this.isDescriptionRequired, fileRequest.isDescriptionRequired) &&
        Objects.equals(this.expiresAt, fileRequest.expiresAt) &&
        Objects.equals(this.folder, fileRequest.folder) &&
        Objects.equals(this.url, fileRequest.url) &&
        Objects.equals(this.etag, fileRequest.etag) &&
        Objects.equals(this.createdBy, fileRequest.createdBy) &&
        Objects.equals(this.createdAt, fileRequest.createdAt) &&
        Objects.equals(this.updatedBy, fileRequest.updatedBy) &&
        Objects.equals(this.updatedAt, fileRequest.updatedAt)&&
        Objects.equals(this.additionalProperties, fileRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, id, type, status, isEmailRequired, isDescriptionRequired, expiresAt, folder, url, etag, createdBy, createdAt, updatedBy, updatedAt, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    isEmailRequired: ").append(toIndentedString(isEmailRequired)).append("\n");
    sb.append("    isDescriptionRequired: ").append(toIndentedString(isDescriptionRequired)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("status");
    openapiFields.add("is_email_required");
    openapiFields.add("is_description_required");
    openapiFields.add("expires_at");
    openapiFields.add("folder");
    openapiFields.add("url");
    openapiFields.add("etag");
    openapiFields.add("created_by");
    openapiFields.add("created_at");
    openapiFields.add("updated_by");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("folder");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FileRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileRequest is not found in the empty JSON string", FileRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FileRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("description").isJsonNull() && (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `folder`
      FileRequestFolder.validateJsonObject(jsonObj.getAsJsonObject("folder"));
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("etag").isJsonNull() && (jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        FileRequestCreatedBy.validateJsonObject(jsonObj.getAsJsonObject("created_by"));
      }
      // validate the optional field `updated_by`
      if (jsonObj.get("updated_by") != null && !jsonObj.get("updated_by").isJsonNull()) {
        FileRequestUpdatedBy.validateJsonObject(jsonObj.getAsJsonObject("updated_by"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FileRequest>() {
           @Override
           public void write(JsonWriter out, FileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FileRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FileRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FileRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FileRequest
  * @throws IOException if the JSON string is invalid with respect to FileRequest
  */
  public static FileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileRequest.class);
  }

 /**
  * Convert an instance of FileRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

