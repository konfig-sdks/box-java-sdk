/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.KeywordSkillCard;
import com.konfigthis.client.model.StatusSkillCard;
import com.konfigthis.client.model.StatusSkillCardInvocation;
import com.konfigthis.client.model.StatusSkillCardSkill;
import com.konfigthis.client.model.StatusSkillCardSkillCardTitle;
import com.konfigthis.client.model.StatusSkillCardStatus;
import com.konfigthis.client.model.TimelineSkillCard;
import com.konfigthis.client.model.TranscriptSkillCard;
import com.konfigthis.client.model.TranscriptSkillCardEntriesInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.konfigthis.client.JSON;
@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<KeywordSkillCard> adapterKeywordSkillCard = gson.getDelegateAdapter(this, TypeToken.get(KeywordSkillCard.class));
            final TypeAdapter<StatusSkillCard> adapterStatusSkillCard = gson.getDelegateAdapter(this, TypeToken.get(StatusSkillCard.class));
            final TypeAdapter<TimelineSkillCard> adapterTimelineSkillCard = gson.getDelegateAdapter(this, TypeToken.get(TimelineSkillCard.class));
            final TypeAdapter<TranscriptSkillCard> adapterTranscriptSkillCard = gson.getDelegateAdapter(this, TypeToken.get(TranscriptSkillCard.class));

            return (TypeAdapter<T>) new TypeAdapter<SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf>() {
                @Override
                public void write(JsonWriter out, SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `KeywordSkillCard`
                    if (value.getActualInstance() instanceof KeywordSkillCard) {
                        JsonObject obj = adapterKeywordSkillCard.toJsonTree((KeywordSkillCard)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `StatusSkillCard`
                    if (value.getActualInstance() instanceof StatusSkillCard) {
                        JsonObject obj = adapterStatusSkillCard.toJsonTree((StatusSkillCard)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `TimelineSkillCard`
                    if (value.getActualInstance() instanceof TimelineSkillCard) {
                        JsonObject obj = adapterTimelineSkillCard.toJsonTree((TimelineSkillCard)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `TranscriptSkillCard`
                    if (value.getActualInstance() instanceof TranscriptSkillCard) {
                        JsonObject obj = adapterTranscriptSkillCard.toJsonTree((TranscriptSkillCard)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: KeywordSkillCard, StatusSkillCard, TimelineSkillCard, TranscriptSkillCard");
                }

                @Override
                public SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize KeywordSkillCard
                    try {
                        // validate the JSON object to see if any exception is thrown
                        KeywordSkillCard.validateJsonObject(jsonObject);
                        actualAdapter = adapterKeywordSkillCard;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'KeywordSkillCard'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for KeywordSkillCard failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'KeywordSkillCard'", e);
                    }

                    // deserialize StatusSkillCard
                    try {
                        // validate the JSON object to see if any exception is thrown
                        StatusSkillCard.validateJsonObject(jsonObject);
                        actualAdapter = adapterStatusSkillCard;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'StatusSkillCard'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for StatusSkillCard failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'StatusSkillCard'", e);
                    }

                    // deserialize TimelineSkillCard
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TimelineSkillCard.validateJsonObject(jsonObject);
                        actualAdapter = adapterTimelineSkillCard;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TimelineSkillCard'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TimelineSkillCard failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TimelineSkillCard'", e);
                    }

                    // deserialize TranscriptSkillCard
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TranscriptSkillCard.validateJsonObject(jsonObject);
                        actualAdapter = adapterTranscriptSkillCard;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TranscriptSkillCard'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TranscriptSkillCard failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TranscriptSkillCard'", e);
                    }

                    if (match == 1) {
                        SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf ret = new SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf() {
        super("oneOf", Boolean.FALSE);
    }

    public SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf(KeywordSkillCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf(StatusSkillCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf(TimelineSkillCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf(TranscriptSkillCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("KeywordSkillCard", new GenericType<KeywordSkillCard>() {
        });
        schemas.put("StatusSkillCard", new GenericType<StatusSkillCard>() {
        });
        schemas.put("TimelineSkillCard", new GenericType<TimelineSkillCard>() {
        });
        schemas.put("TranscriptSkillCard", new GenericType<TranscriptSkillCard>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * KeywordSkillCard, StatusSkillCard, TimelineSkillCard, TranscriptSkillCard
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof KeywordSkillCard) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StatusSkillCard) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TimelineSkillCard) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TranscriptSkillCard) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be KeywordSkillCard, StatusSkillCard, TimelineSkillCard, TranscriptSkillCard");
    }

    /**
     * Get the actual instance, which can be the following:
     * KeywordSkillCard, StatusSkillCard, TimelineSkillCard, TranscriptSkillCard
     *
     * @return The actual instance (KeywordSkillCard, StatusSkillCard, TimelineSkillCard, TranscriptSkillCard)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `KeywordSkillCard`. If the actual instance is not `KeywordSkillCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `KeywordSkillCard`
     * @throws ClassCastException if the instance is not `KeywordSkillCard`
     */
    public KeywordSkillCard getKeywordSkillCard() throws ClassCastException {
        return (KeywordSkillCard)super.getActualInstance();
    }

    /**
     * Get the actual instance of `StatusSkillCard`. If the actual instance is not `StatusSkillCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StatusSkillCard`
     * @throws ClassCastException if the instance is not `StatusSkillCard`
     */
    public StatusSkillCard getStatusSkillCard() throws ClassCastException {
        return (StatusSkillCard)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TimelineSkillCard`. If the actual instance is not `TimelineSkillCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TimelineSkillCard`
     * @throws ClassCastException if the instance is not `TimelineSkillCard`
     */
    public TimelineSkillCard getTimelineSkillCard() throws ClassCastException {
        return (TimelineSkillCard)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TranscriptSkillCard`. If the actual instance is not `TranscriptSkillCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TranscriptSkillCard`
     * @throws ClassCastException if the instance is not `TranscriptSkillCard`
     */
    public TranscriptSkillCard getTranscriptSkillCard() throws ClassCastException {
        return (TranscriptSkillCard)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with KeywordSkillCard
    try {
      KeywordSkillCard.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for KeywordSkillCard failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with StatusSkillCard
    try {
      StatusSkillCard.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for StatusSkillCard failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TimelineSkillCard
    try {
      TimelineSkillCard.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TimelineSkillCard failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TranscriptSkillCard
    try {
      TranscriptSkillCard.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TranscriptSkillCard failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf with oneOf schemas: KeywordSkillCard, StatusSkillCard, TimelineSkillCard, TranscriptSkillCard. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf
  * @throws IOException if the JSON string is invalid with respect to SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf
  */
  public static SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf.class);
  }

 /**
  * Convert an instance of SkillsUpdateBoxSkillCardsOnFileRequestInnerValueAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

