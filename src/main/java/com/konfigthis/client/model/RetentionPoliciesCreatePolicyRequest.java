/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.UserMini;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RetentionPoliciesCreatePolicyRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RetentionPoliciesCreatePolicyRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policy_name";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  /**
   * The type of the retention policy. A retention policy type can either be &#x60;finite&#x60;, where a specific amount of time to retain the content is known upfront, or &#x60;indefinite&#x60;, where the amount of time to retain the content is still unknown.
   */
  @JsonAdapter(PolicyTypeEnum.Adapter.class)
 public enum PolicyTypeEnum {
    FINITE("finite"),
    
    INDEFINITE("indefinite");

    private String value;

    PolicyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyTypeEnum fromValue(String value) {
      for (PolicyTypeEnum b : PolicyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_POLICY_TYPE = "policy_type";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  private PolicyTypeEnum policyType;

  /**
   * The disposition action of the retention policy. &#x60;permanently_delete&#x60; deletes the content retained by the policy permanently. &#x60;remove_retention&#x60; lifts retention policy from the content, allowing it to be deleted by users once the retention policy has expired.
   */
  @JsonAdapter(DispositionActionEnum.Adapter.class)
 public enum DispositionActionEnum {
    PERMANENTLY_DELETE("permanently_delete"),
    
    REMOVE_RETENTION("remove_retention");

    private String value;

    DispositionActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DispositionActionEnum fromValue(String value) {
      for (DispositionActionEnum b : DispositionActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DispositionActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DispositionActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DispositionActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DispositionActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DISPOSITION_ACTION = "disposition_action";
  @SerializedName(SERIALIZED_NAME_DISPOSITION_ACTION)
  private DispositionActionEnum dispositionAction;

  public static final String SERIALIZED_NAME_RETENTION_LENGTH = "retention_length";
  @SerializedName(SERIALIZED_NAME_RETENTION_LENGTH)
  private Object retentionLength = null;

  /**
   * Specifies the retention type:  * &#x60;modifiable&#x60;: You can modify the retention policy. For example, you can add or remove folders, shorten or lengthen the policy duration, or delete the assignment. Use this type if your retention policy is not related to any regulatory purposes.  * &#x60;non_modifiable&#x60;: You can modify the retention policy only in a limited way: add a folder, lengthen the duration, retire the policy, change the disposition action or notification settings. You cannot perform other actions, such as deleting the assignment or shortening the policy duration. Use this type to ensure compliance with regulatory retention policies.
   */
  @JsonAdapter(RetentionTypeEnum.Adapter.class)
 public enum RetentionTypeEnum {
    MODIFIABLE("modifiable"),
    
    NON_MODIFIABLE("non_modifiable");

    private String value;

    RetentionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RetentionTypeEnum fromValue(String value) {
      for (RetentionTypeEnum b : RetentionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RetentionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RetentionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RetentionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RetentionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RETENTION_TYPE = "retention_type";
  @SerializedName(SERIALIZED_NAME_RETENTION_TYPE)
  private RetentionTypeEnum retentionType;

  /**
   * Whether the owner of a file will be allowed to extend the retention.
   */
  @JsonAdapter(CanOwnerExtendRetentionEnum.Adapter.class)
 public enum CanOwnerExtendRetentionEnum {
    TRUE("true"),
    
    FALSE("false");

    private Boolean value;

    CanOwnerExtendRetentionEnum(Boolean value) {
      this.value = value;
    }

    public Boolean getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CanOwnerExtendRetentionEnum fromValue(Boolean value) {
      for (CanOwnerExtendRetentionEnum b : CanOwnerExtendRetentionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CanOwnerExtendRetentionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CanOwnerExtendRetentionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CanOwnerExtendRetentionEnum read(final JsonReader jsonReader) throws IOException {
        Boolean value =  jsonReader.nextBoolean();
        return CanOwnerExtendRetentionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CAN_OWNER_EXTEND_RETENTION = "can_owner_extend_retention";
  @SerializedName(SERIALIZED_NAME_CAN_OWNER_EXTEND_RETENTION)
  private CanOwnerExtendRetentionEnum canOwnerExtendRetention;

  /**
   * Whether owner and co-owners of a file are notified when the policy nears expiration.
   */
  @JsonAdapter(AreOwnersNotifiedEnum.Adapter.class)
 public enum AreOwnersNotifiedEnum {
    TRUE("true"),
    
    FALSE("false");

    private Boolean value;

    AreOwnersNotifiedEnum(Boolean value) {
      this.value = value;
    }

    public Boolean getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AreOwnersNotifiedEnum fromValue(Boolean value) {
      for (AreOwnersNotifiedEnum b : AreOwnersNotifiedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AreOwnersNotifiedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AreOwnersNotifiedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AreOwnersNotifiedEnum read(final JsonReader jsonReader) throws IOException {
        Boolean value =  jsonReader.nextBoolean();
        return AreOwnersNotifiedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ARE_OWNERS_NOTIFIED = "are_owners_notified";
  @SerializedName(SERIALIZED_NAME_ARE_OWNERS_NOTIFIED)
  private AreOwnersNotifiedEnum areOwnersNotified;

  public static final String SERIALIZED_NAME_CUSTOM_NOTIFICATION_RECIPIENTS = "custom_notification_recipients";
  @SerializedName(SERIALIZED_NAME_CUSTOM_NOTIFICATION_RECIPIENTS)
  private List<UserMini> customNotificationRecipients = null;

  public RetentionPoliciesCreatePolicyRequest() {
  }

  public RetentionPoliciesCreatePolicyRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The additional text description of the retention policy.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Policy to retain all reports for at least one month", value = "The additional text description of the retention policy.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public RetentionPoliciesCreatePolicyRequest policyName(String policyName) {
    
    
    
    
    this.policyName = policyName;
    return this;
  }

   /**
   * The name for the retention policy
   * @return policyName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Some Policy Name", required = true, value = "The name for the retention policy")

  public String getPolicyName() {
    return policyName;
  }


  public void setPolicyName(String policyName) {
    
    
    
    this.policyName = policyName;
  }


  public RetentionPoliciesCreatePolicyRequest policyType(PolicyTypeEnum policyType) {
    
    
    
    
    this.policyType = policyType;
    return this;
  }

   /**
   * The type of the retention policy. A retention policy type can either be &#x60;finite&#x60;, where a specific amount of time to retain the content is known upfront, or &#x60;indefinite&#x60;, where the amount of time to retain the content is still unknown.
   * @return policyType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "FINITE", required = true, value = "The type of the retention policy. A retention policy type can either be `finite`, where a specific amount of time to retain the content is known upfront, or `indefinite`, where the amount of time to retain the content is still unknown.")

  public PolicyTypeEnum getPolicyType() {
    return policyType;
  }


  public void setPolicyType(PolicyTypeEnum policyType) {
    
    
    
    this.policyType = policyType;
  }


  public RetentionPoliciesCreatePolicyRequest dispositionAction(DispositionActionEnum dispositionAction) {
    
    
    
    
    this.dispositionAction = dispositionAction;
    return this;
  }

   /**
   * The disposition action of the retention policy. &#x60;permanently_delete&#x60; deletes the content retained by the policy permanently. &#x60;remove_retention&#x60; lifts retention policy from the content, allowing it to be deleted by users once the retention policy has expired.
   * @return dispositionAction
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PERMANENTLY_DELETE", required = true, value = "The disposition action of the retention policy. `permanently_delete` deletes the content retained by the policy permanently. `remove_retention` lifts retention policy from the content, allowing it to be deleted by users once the retention policy has expired.")

  public DispositionActionEnum getDispositionAction() {
    return dispositionAction;
  }


  public void setDispositionAction(DispositionActionEnum dispositionAction) {
    
    
    
    this.dispositionAction = dispositionAction;
  }


  public RetentionPoliciesCreatePolicyRequest retentionLength(Object retentionLength) {
    
    
    
    
    this.retentionLength = retentionLength;
    return this;
  }

   /**
   * Get retentionLength
   * @return retentionLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getRetentionLength() {
    return retentionLength;
  }


  public void setRetentionLength(Object retentionLength) {
    
    
    
    this.retentionLength = retentionLength;
  }


  public RetentionPoliciesCreatePolicyRequest retentionType(RetentionTypeEnum retentionType) {
    
    
    
    
    this.retentionType = retentionType;
    return this;
  }

   /**
   * Specifies the retention type:  * &#x60;modifiable&#x60;: You can modify the retention policy. For example, you can add or remove folders, shorten or lengthen the policy duration, or delete the assignment. Use this type if your retention policy is not related to any regulatory purposes.  * &#x60;non_modifiable&#x60;: You can modify the retention policy only in a limited way: add a folder, lengthen the duration, retire the policy, change the disposition action or notification settings. You cannot perform other actions, such as deleting the assignment or shortening the policy duration. Use this type to ensure compliance with regulatory retention policies.
   * @return retentionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MODIFIABLE", value = "Specifies the retention type:  * `modifiable`: You can modify the retention policy. For example, you can add or remove folders, shorten or lengthen the policy duration, or delete the assignment. Use this type if your retention policy is not related to any regulatory purposes.  * `non_modifiable`: You can modify the retention policy only in a limited way: add a folder, lengthen the duration, retire the policy, change the disposition action or notification settings. You cannot perform other actions, such as deleting the assignment or shortening the policy duration. Use this type to ensure compliance with regulatory retention policies.")

  public RetentionTypeEnum getRetentionType() {
    return retentionType;
  }


  public void setRetentionType(RetentionTypeEnum retentionType) {
    
    
    
    this.retentionType = retentionType;
  }


  public RetentionPoliciesCreatePolicyRequest canOwnerExtendRetention(CanOwnerExtendRetentionEnum canOwnerExtendRetention) {
    
    
    
    
    this.canOwnerExtendRetention = canOwnerExtendRetention;
    return this;
  }

   /**
   * Whether the owner of a file will be allowed to extend the retention.
   * @return canOwnerExtendRetention
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TRUE", value = "Whether the owner of a file will be allowed to extend the retention.")

  public CanOwnerExtendRetentionEnum getCanOwnerExtendRetention() {
    return canOwnerExtendRetention;
  }


  public void setCanOwnerExtendRetention(CanOwnerExtendRetentionEnum canOwnerExtendRetention) {
    
    
    
    this.canOwnerExtendRetention = canOwnerExtendRetention;
  }


  public RetentionPoliciesCreatePolicyRequest areOwnersNotified(AreOwnersNotifiedEnum areOwnersNotified) {
    
    
    
    
    this.areOwnersNotified = areOwnersNotified;
    return this;
  }

   /**
   * Whether owner and co-owners of a file are notified when the policy nears expiration.
   * @return areOwnersNotified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TRUE", value = "Whether owner and co-owners of a file are notified when the policy nears expiration.")

  public AreOwnersNotifiedEnum getAreOwnersNotified() {
    return areOwnersNotified;
  }


  public void setAreOwnersNotified(AreOwnersNotifiedEnum areOwnersNotified) {
    
    
    
    this.areOwnersNotified = areOwnersNotified;
  }


  public RetentionPoliciesCreatePolicyRequest customNotificationRecipients(List<UserMini> customNotificationRecipients) {
    
    
    
    
    this.customNotificationRecipients = customNotificationRecipients;
    return this;
  }

  public RetentionPoliciesCreatePolicyRequest addCustomNotificationRecipientsItem(UserMini customNotificationRecipientsItem) {
    if (this.customNotificationRecipients == null) {
      this.customNotificationRecipients = new ArrayList<>();
    }
    this.customNotificationRecipients.add(customNotificationRecipientsItem);
    return this;
  }

   /**
   * A list of users notified when the retention policy duration is about to end.
   * @return customNotificationRecipients
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of users notified when the retention policy duration is about to end.")

  public List<UserMini> getCustomNotificationRecipients() {
    return customNotificationRecipients;
  }


  public void setCustomNotificationRecipients(List<UserMini> customNotificationRecipients) {
    
    
    
    this.customNotificationRecipients = customNotificationRecipients;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RetentionPoliciesCreatePolicyRequest instance itself
   */
  public RetentionPoliciesCreatePolicyRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetentionPoliciesCreatePolicyRequest retentionPoliciesCreatePolicyRequest = (RetentionPoliciesCreatePolicyRequest) o;
    return Objects.equals(this.description, retentionPoliciesCreatePolicyRequest.description) &&
        Objects.equals(this.policyName, retentionPoliciesCreatePolicyRequest.policyName) &&
        Objects.equals(this.policyType, retentionPoliciesCreatePolicyRequest.policyType) &&
        Objects.equals(this.dispositionAction, retentionPoliciesCreatePolicyRequest.dispositionAction) &&
        Objects.equals(this.retentionLength, retentionPoliciesCreatePolicyRequest.retentionLength) &&
        Objects.equals(this.retentionType, retentionPoliciesCreatePolicyRequest.retentionType) &&
        Objects.equals(this.canOwnerExtendRetention, retentionPoliciesCreatePolicyRequest.canOwnerExtendRetention) &&
        Objects.equals(this.areOwnersNotified, retentionPoliciesCreatePolicyRequest.areOwnersNotified) &&
        Objects.equals(this.customNotificationRecipients, retentionPoliciesCreatePolicyRequest.customNotificationRecipients)&&
        Objects.equals(this.additionalProperties, retentionPoliciesCreatePolicyRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, policyName, policyType, dispositionAction, retentionLength, retentionType, canOwnerExtendRetention, areOwnersNotified, customNotificationRecipients, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetentionPoliciesCreatePolicyRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("    dispositionAction: ").append(toIndentedString(dispositionAction)).append("\n");
    sb.append("    retentionLength: ").append(toIndentedString(retentionLength)).append("\n");
    sb.append("    retentionType: ").append(toIndentedString(retentionType)).append("\n");
    sb.append("    canOwnerExtendRetention: ").append(toIndentedString(canOwnerExtendRetention)).append("\n");
    sb.append("    areOwnersNotified: ").append(toIndentedString(areOwnersNotified)).append("\n");
    sb.append("    customNotificationRecipients: ").append(toIndentedString(customNotificationRecipients)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("policy_name");
    openapiFields.add("policy_type");
    openapiFields.add("disposition_action");
    openapiFields.add("retention_length");
    openapiFields.add("retention_type");
    openapiFields.add("can_owner_extend_retention");
    openapiFields.add("are_owners_notified");
    openapiFields.add("custom_notification_recipients");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("policy_name");
    openapiRequiredFields.add("policy_type");
    openapiRequiredFields.add("disposition_action");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RetentionPoliciesCreatePolicyRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RetentionPoliciesCreatePolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetentionPoliciesCreatePolicyRequest is not found in the empty JSON string", RetentionPoliciesCreatePolicyRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetentionPoliciesCreatePolicyRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("policy_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_name").toString()));
      }
      if (!jsonObj.get("policy_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_type").toString()));
      }
      if (!jsonObj.get("disposition_action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disposition_action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disposition_action").toString()));
      }
      if ((jsonObj.get("retention_type") != null && !jsonObj.get("retention_type").isJsonNull()) && !jsonObj.get("retention_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retention_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retention_type").toString()));
      }
      if (jsonObj.get("custom_notification_recipients") != null && !jsonObj.get("custom_notification_recipients").isJsonNull()) {
        JsonArray jsonArraycustomNotificationRecipients = jsonObj.getAsJsonArray("custom_notification_recipients");
        if (jsonArraycustomNotificationRecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_notification_recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_notification_recipients` to be an array in the JSON string but got `%s`", jsonObj.get("custom_notification_recipients").toString()));
          }

          // validate the optional field `custom_notification_recipients` (array)
          for (int i = 0; i < jsonArraycustomNotificationRecipients.size(); i++) {
            UserMini.validateJsonObject(jsonArraycustomNotificationRecipients.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetentionPoliciesCreatePolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetentionPoliciesCreatePolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetentionPoliciesCreatePolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetentionPoliciesCreatePolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RetentionPoliciesCreatePolicyRequest>() {
           @Override
           public void write(JsonWriter out, RetentionPoliciesCreatePolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RetentionPoliciesCreatePolicyRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RetentionPoliciesCreatePolicyRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RetentionPoliciesCreatePolicyRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RetentionPoliciesCreatePolicyRequest
  * @throws IOException if the JSON string is invalid with respect to RetentionPoliciesCreatePolicyRequest
  */
  public static RetentionPoliciesCreatePolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetentionPoliciesCreatePolicyRequest.class);
  }

 /**
  * Convert an instance of RetentionPoliciesCreatePolicyRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

