/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FolderFullAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FolderFullAllOf {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_SYNC_STATE = "sync_state";
  @SerializedName(SERIALIZED_NAME_SYNC_STATE)
  private String syncState;

  public static final String SERIALIZED_NAME_HAS_COLLABORATIONS = "has_collaborations";
  @SerializedName(SERIALIZED_NAME_HAS_COLLABORATIONS)
  private Boolean hasCollaborations;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private Object permissions;

  public static final String SERIALIZED_NAME_CAN_NON_OWNERS_INVITE = "can_non_owners_invite";
  @SerializedName(SERIALIZED_NAME_CAN_NON_OWNERS_INVITE)
  private Boolean canNonOwnersInvite;

  public static final String SERIALIZED_NAME_IS_EXTERNALLY_OWNED = "is_externally_owned";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNALLY_OWNED)
  private Boolean isExternallyOwned;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map metadata;

  public static final String SERIALIZED_NAME_IS_COLLABORATION_RESTRICTED_TO_ENTERPRISE = "is_collaboration_restricted_to_enterprise";
  @SerializedName(SERIALIZED_NAME_IS_COLLABORATION_RESTRICTED_TO_ENTERPRISE)
  private Boolean isCollaborationRestrictedToEnterprise;

  /**
   * Gets or Sets allowedSharedLinkAccessLevels
   */
  @JsonAdapter(AllowedSharedLinkAccessLevelsEnum.Adapter.class)
 public enum AllowedSharedLinkAccessLevelsEnum {
    OPEN("open"),
    
    COMPANY("company"),
    
    COLLABORATORS("collaborators");

    private String value;

    AllowedSharedLinkAccessLevelsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedSharedLinkAccessLevelsEnum fromValue(String value) {
      for (AllowedSharedLinkAccessLevelsEnum b : AllowedSharedLinkAccessLevelsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedSharedLinkAccessLevelsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedSharedLinkAccessLevelsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedSharedLinkAccessLevelsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedSharedLinkAccessLevelsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_SHARED_LINK_ACCESS_LEVELS = "allowed_shared_link_access_levels";
  @SerializedName(SERIALIZED_NAME_ALLOWED_SHARED_LINK_ACCESS_LEVELS)
  private List<AllowedSharedLinkAccessLevelsEnum> allowedSharedLinkAccessLevels = null;

  /**
   * Gets or Sets allowedInviteeRoles
   */
  @JsonAdapter(AllowedInviteeRolesEnum.Adapter.class)
 public enum AllowedInviteeRolesEnum {
    EDITOR("editor"),
    
    VIEWER("viewer"),
    
    PREVIEWER("previewer"),
    
    UPLOADER("uploader"),
    
    PREVIEWER_UPLOADER("previewer uploader"),
    
    VIEWER_UPLOADER("viewer uploader"),
    
    CO_OWNER("co-owner");

    private String value;

    AllowedInviteeRolesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedInviteeRolesEnum fromValue(String value) {
      for (AllowedInviteeRolesEnum b : AllowedInviteeRolesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedInviteeRolesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedInviteeRolesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedInviteeRolesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedInviteeRolesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_INVITEE_ROLES = "allowed_invitee_roles";
  @SerializedName(SERIALIZED_NAME_ALLOWED_INVITEE_ROLES)
  private List<AllowedInviteeRolesEnum> allowedInviteeRoles = null;

  public static final String SERIALIZED_NAME_WATERMARK_INFO = "watermark_info";
  @SerializedName(SERIALIZED_NAME_WATERMARK_INFO)
  private Object watermarkInfo;

  /**
   * Specifies if the folder can be accessed with the direct shared link or a shared link to a parent folder.
   */
  @JsonAdapter(IsAccessibleViaSharedLinkEnum.Adapter.class)
 public enum IsAccessibleViaSharedLinkEnum {
    TRUE("true"),
    
    FALSE("false");

    private Boolean value;

    IsAccessibleViaSharedLinkEnum(Boolean value) {
      this.value = value;
    }

    public Boolean getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsAccessibleViaSharedLinkEnum fromValue(Boolean value) {
      for (IsAccessibleViaSharedLinkEnum b : IsAccessibleViaSharedLinkEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsAccessibleViaSharedLinkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsAccessibleViaSharedLinkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsAccessibleViaSharedLinkEnum read(final JsonReader jsonReader) throws IOException {
        Boolean value =  jsonReader.nextBoolean();
        return IsAccessibleViaSharedLinkEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IS_ACCESSIBLE_VIA_SHARED_LINK = "is_accessible_via_shared_link";
  @SerializedName(SERIALIZED_NAME_IS_ACCESSIBLE_VIA_SHARED_LINK)
  private IsAccessibleViaSharedLinkEnum isAccessibleViaSharedLink;

  public static final String SERIALIZED_NAME_CAN_NON_OWNERS_VIEW_COLLABORATORS = "can_non_owners_view_collaborators";
  @SerializedName(SERIALIZED_NAME_CAN_NON_OWNERS_VIEW_COLLABORATORS)
  private Boolean canNonOwnersViewCollaborators;

  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private Object classification;

  public FolderFullAllOf() {
  }

  public FolderFullAllOf tags(List tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List getTags() {
    return tags;
  }


  public void setTags(List tags) {
    
    
    
    this.tags = tags;
  }


  public FolderFullAllOf syncState(String syncState) {
    
    
    
    
    this.syncState = syncState;
    return this;
  }

   /**
   * Get syncState
   * @return syncState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSyncState() {
    return syncState;
  }


  public void setSyncState(String syncState) {
    
    
    
    this.syncState = syncState;
  }


  public FolderFullAllOf hasCollaborations(Boolean hasCollaborations) {
    
    
    
    
    this.hasCollaborations = hasCollaborations;
    return this;
  }

   /**
   * Specifies if this folder has any other collaborators.
   * @return hasCollaborations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies if this folder has any other collaborators.")

  public Boolean getHasCollaborations() {
    return hasCollaborations;
  }


  public void setHasCollaborations(Boolean hasCollaborations) {
    
    
    
    this.hasCollaborations = hasCollaborations;
  }


  public FolderFullAllOf permissions(Object permissions) {
    
    
    
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getPermissions() {
    return permissions;
  }


  public void setPermissions(Object permissions) {
    
    
    
    this.permissions = permissions;
  }


  public FolderFullAllOf canNonOwnersInvite(Boolean canNonOwnersInvite) {
    
    
    
    
    this.canNonOwnersInvite = canNonOwnersInvite;
    return this;
  }

   /**
   * Get canNonOwnersInvite
   * @return canNonOwnersInvite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanNonOwnersInvite() {
    return canNonOwnersInvite;
  }


  public void setCanNonOwnersInvite(Boolean canNonOwnersInvite) {
    
    
    
    this.canNonOwnersInvite = canNonOwnersInvite;
  }


  public FolderFullAllOf isExternallyOwned(Boolean isExternallyOwned) {
    
    
    
    
    this.isExternallyOwned = isExternallyOwned;
    return this;
  }

   /**
   * Specifies if this folder is owned by a user outside of the authenticated enterprise.
   * @return isExternallyOwned
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies if this folder is owned by a user outside of the authenticated enterprise.")

  public Boolean getIsExternallyOwned() {
    return isExternallyOwned;
  }


  public void setIsExternallyOwned(Boolean isExternallyOwned) {
    
    
    
    this.isExternallyOwned = isExternallyOwned;
  }


  public FolderFullAllOf metadata(Map metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map getMetadata() {
    return metadata;
  }


  public void setMetadata(Map metadata) {
    
    
    
    this.metadata = metadata;
  }


  public FolderFullAllOf isCollaborationRestrictedToEnterprise(Boolean isCollaborationRestrictedToEnterprise) {
    
    
    
    
    this.isCollaborationRestrictedToEnterprise = isCollaborationRestrictedToEnterprise;
    return this;
  }

   /**
   * Get isCollaborationRestrictedToEnterprise
   * @return isCollaborationRestrictedToEnterprise
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsCollaborationRestrictedToEnterprise() {
    return isCollaborationRestrictedToEnterprise;
  }


  public void setIsCollaborationRestrictedToEnterprise(Boolean isCollaborationRestrictedToEnterprise) {
    
    
    
    this.isCollaborationRestrictedToEnterprise = isCollaborationRestrictedToEnterprise;
  }


  public FolderFullAllOf allowedSharedLinkAccessLevels(List<AllowedSharedLinkAccessLevelsEnum> allowedSharedLinkAccessLevels) {
    
    
    
    
    this.allowedSharedLinkAccessLevels = allowedSharedLinkAccessLevels;
    return this;
  }

  public FolderFullAllOf addAllowedSharedLinkAccessLevelsItem(AllowedSharedLinkAccessLevelsEnum allowedSharedLinkAccessLevelsItem) {
    if (this.allowedSharedLinkAccessLevels == null) {
      this.allowedSharedLinkAccessLevels = new ArrayList<>();
    }
    this.allowedSharedLinkAccessLevels.add(allowedSharedLinkAccessLevelsItem);
    return this;
  }

   /**
   * A list of access levels that are available for this folder.  For some folders, like the root folder, this will always be an empty list as sharing is not allowed at that level.
   * @return allowedSharedLinkAccessLevels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"open\"]", value = "A list of access levels that are available for this folder.  For some folders, like the root folder, this will always be an empty list as sharing is not allowed at that level.")

  public List<AllowedSharedLinkAccessLevelsEnum> getAllowedSharedLinkAccessLevels() {
    return allowedSharedLinkAccessLevels;
  }


  public void setAllowedSharedLinkAccessLevels(List<AllowedSharedLinkAccessLevelsEnum> allowedSharedLinkAccessLevels) {
    
    
    
    this.allowedSharedLinkAccessLevels = allowedSharedLinkAccessLevels;
  }


  public FolderFullAllOf allowedInviteeRoles(List<AllowedInviteeRolesEnum> allowedInviteeRoles) {
    
    
    
    
    this.allowedInviteeRoles = allowedInviteeRoles;
    return this;
  }

  public FolderFullAllOf addAllowedInviteeRolesItem(AllowedInviteeRolesEnum allowedInviteeRolesItem) {
    if (this.allowedInviteeRoles == null) {
      this.allowedInviteeRoles = new ArrayList<>();
    }
    this.allowedInviteeRoles.add(allowedInviteeRolesItem);
    return this;
  }

   /**
   * A list of the types of roles that user can be invited at when sharing this folder.
   * @return allowedInviteeRoles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"editor\"]", value = "A list of the types of roles that user can be invited at when sharing this folder.")

  public List<AllowedInviteeRolesEnum> getAllowedInviteeRoles() {
    return allowedInviteeRoles;
  }


  public void setAllowedInviteeRoles(List<AllowedInviteeRolesEnum> allowedInviteeRoles) {
    
    
    
    this.allowedInviteeRoles = allowedInviteeRoles;
  }


  public FolderFullAllOf watermarkInfo(Object watermarkInfo) {
    
    
    
    
    this.watermarkInfo = watermarkInfo;
    return this;
  }

   /**
   * Get watermarkInfo
   * @return watermarkInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getWatermarkInfo() {
    return watermarkInfo;
  }


  public void setWatermarkInfo(Object watermarkInfo) {
    
    
    
    this.watermarkInfo = watermarkInfo;
  }


  public FolderFullAllOf isAccessibleViaSharedLink(IsAccessibleViaSharedLinkEnum isAccessibleViaSharedLink) {
    
    
    
    
    this.isAccessibleViaSharedLink = isAccessibleViaSharedLink;
    return this;
  }

   /**
   * Specifies if the folder can be accessed with the direct shared link or a shared link to a parent folder.
   * @return isAccessibleViaSharedLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TRUE", value = "Specifies if the folder can be accessed with the direct shared link or a shared link to a parent folder.")

  public IsAccessibleViaSharedLinkEnum getIsAccessibleViaSharedLink() {
    return isAccessibleViaSharedLink;
  }


  public void setIsAccessibleViaSharedLink(IsAccessibleViaSharedLinkEnum isAccessibleViaSharedLink) {
    
    
    
    this.isAccessibleViaSharedLink = isAccessibleViaSharedLink;
  }


  public FolderFullAllOf canNonOwnersViewCollaborators(Boolean canNonOwnersViewCollaborators) {
    
    
    
    
    this.canNonOwnersViewCollaborators = canNonOwnersViewCollaborators;
    return this;
  }

   /**
   * Specifies if collaborators who are not owners of this folder are restricted from viewing other collaborations on this folder.  It also restricts non-owners from inviting new collaborators.
   * @return canNonOwnersViewCollaborators
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies if collaborators who are not owners of this folder are restricted from viewing other collaborations on this folder.  It also restricts non-owners from inviting new collaborators.")

  public Boolean getCanNonOwnersViewCollaborators() {
    return canNonOwnersViewCollaborators;
  }


  public void setCanNonOwnersViewCollaborators(Boolean canNonOwnersViewCollaborators) {
    
    
    
    this.canNonOwnersViewCollaborators = canNonOwnersViewCollaborators;
  }


  public FolderFullAllOf classification(Object classification) {
    
    
    
    
    this.classification = classification;
    return this;
  }

   /**
   * Get classification
   * @return classification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getClassification() {
    return classification;
  }


  public void setClassification(Object classification) {
    
    
    
    this.classification = classification;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FolderFullAllOf instance itself
   */
  public FolderFullAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FolderFullAllOf folderFullAllOf = (FolderFullAllOf) o;
    return Objects.equals(this.tags, folderFullAllOf.tags) &&
        Objects.equals(this.syncState, folderFullAllOf.syncState) &&
        Objects.equals(this.hasCollaborations, folderFullAllOf.hasCollaborations) &&
        Objects.equals(this.permissions, folderFullAllOf.permissions) &&
        Objects.equals(this.canNonOwnersInvite, folderFullAllOf.canNonOwnersInvite) &&
        Objects.equals(this.isExternallyOwned, folderFullAllOf.isExternallyOwned) &&
        Objects.equals(this.metadata, folderFullAllOf.metadata) &&
        Objects.equals(this.isCollaborationRestrictedToEnterprise, folderFullAllOf.isCollaborationRestrictedToEnterprise) &&
        Objects.equals(this.allowedSharedLinkAccessLevels, folderFullAllOf.allowedSharedLinkAccessLevels) &&
        Objects.equals(this.allowedInviteeRoles, folderFullAllOf.allowedInviteeRoles) &&
        Objects.equals(this.watermarkInfo, folderFullAllOf.watermarkInfo) &&
        Objects.equals(this.isAccessibleViaSharedLink, folderFullAllOf.isAccessibleViaSharedLink) &&
        Objects.equals(this.canNonOwnersViewCollaborators, folderFullAllOf.canNonOwnersViewCollaborators) &&
        Objects.equals(this.classification, folderFullAllOf.classification)&&
        Objects.equals(this.additionalProperties, folderFullAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, syncState, hasCollaborations, permissions, canNonOwnersInvite, isExternallyOwned, metadata, isCollaborationRestrictedToEnterprise, allowedSharedLinkAccessLevels, allowedInviteeRoles, watermarkInfo, isAccessibleViaSharedLink, canNonOwnersViewCollaborators, classification, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FolderFullAllOf {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    syncState: ").append(toIndentedString(syncState)).append("\n");
    sb.append("    hasCollaborations: ").append(toIndentedString(hasCollaborations)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    canNonOwnersInvite: ").append(toIndentedString(canNonOwnersInvite)).append("\n");
    sb.append("    isExternallyOwned: ").append(toIndentedString(isExternallyOwned)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    isCollaborationRestrictedToEnterprise: ").append(toIndentedString(isCollaborationRestrictedToEnterprise)).append("\n");
    sb.append("    allowedSharedLinkAccessLevels: ").append(toIndentedString(allowedSharedLinkAccessLevels)).append("\n");
    sb.append("    allowedInviteeRoles: ").append(toIndentedString(allowedInviteeRoles)).append("\n");
    sb.append("    watermarkInfo: ").append(toIndentedString(watermarkInfo)).append("\n");
    sb.append("    isAccessibleViaSharedLink: ").append(toIndentedString(isAccessibleViaSharedLink)).append("\n");
    sb.append("    canNonOwnersViewCollaborators: ").append(toIndentedString(canNonOwnersViewCollaborators)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("sync_state");
    openapiFields.add("has_collaborations");
    openapiFields.add("permissions");
    openapiFields.add("can_non_owners_invite");
    openapiFields.add("is_externally_owned");
    openapiFields.add("metadata");
    openapiFields.add("is_collaboration_restricted_to_enterprise");
    openapiFields.add("allowed_shared_link_access_levels");
    openapiFields.add("allowed_invitee_roles");
    openapiFields.add("watermark_info");
    openapiFields.add("is_accessible_via_shared_link");
    openapiFields.add("can_non_owners_view_collaborators");
    openapiFields.add("classification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FolderFullAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FolderFullAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FolderFullAllOf is not found in the empty JSON string", FolderFullAllOf.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonObject(jsonObj.getAsJsonObject("tags"));
      }
      // validate the optional field `sync_state`
      if (jsonObj.get("sync_state") != null && !jsonObj.get("sync_state").isJsonNull()) {
        String.validateJsonObject(jsonObj.getAsJsonObject("sync_state"));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("permissions"));
      }
      // validate the optional field `can_non_owners_invite`
      if (jsonObj.get("can_non_owners_invite") != null && !jsonObj.get("can_non_owners_invite").isJsonNull()) {
        Boolean.validateJsonObject(jsonObj.getAsJsonObject("can_non_owners_invite"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        Map.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      }
      // validate the optional field `is_collaboration_restricted_to_enterprise`
      if (jsonObj.get("is_collaboration_restricted_to_enterprise") != null && !jsonObj.get("is_collaboration_restricted_to_enterprise").isJsonNull()) {
        Boolean.validateJsonObject(jsonObj.getAsJsonObject("is_collaboration_restricted_to_enterprise"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_shared_link_access_levels") != null && !jsonObj.get("allowed_shared_link_access_levels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_shared_link_access_levels` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_shared_link_access_levels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_invitee_roles") != null && !jsonObj.get("allowed_invitee_roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_invitee_roles` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_invitee_roles").toString()));
      }
      // validate the optional field `watermark_info`
      if (jsonObj.get("watermark_info") != null && !jsonObj.get("watermark_info").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("watermark_info"));
      }
      // validate the optional field `classification`
      if (jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("classification"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FolderFullAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FolderFullAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FolderFullAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FolderFullAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<FolderFullAllOf>() {
           @Override
           public void write(JsonWriter out, FolderFullAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FolderFullAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FolderFullAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FolderFullAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FolderFullAllOf
  * @throws IOException if the JSON string is invalid with respect to FolderFullAllOf
  */
  public static FolderFullAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FolderFullAllOf.class);
  }

 /**
  * Convert an instance of FolderFullAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

