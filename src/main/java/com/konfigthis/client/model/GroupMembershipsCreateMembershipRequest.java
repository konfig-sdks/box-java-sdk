/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.GroupMembershipsCreateMembershipRequestGroup;
import com.konfigthis.client.model.GroupMembershipsCreateMembershipRequestUser;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GroupMembershipsCreateMembershipRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GroupMembershipsCreateMembershipRequest {
  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private GroupMembershipsCreateMembershipRequestUser user;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private GroupMembershipsCreateMembershipRequestGroup group;

  /**
   * The role of the user in the group.
   */
  @JsonAdapter(RoleEnum.Adapter.class)
 public enum RoleEnum {
    MEMBER("member"),
    
    ADMIN("admin");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  public static final String SERIALIZED_NAME_CONFIGURABLE_PERMISSIONS = "configurable_permissions";
  @SerializedName(SERIALIZED_NAME_CONFIGURABLE_PERMISSIONS)
  private Map<String, Boolean> configurablePermissions = null;

  public GroupMembershipsCreateMembershipRequest() {
  }

  public GroupMembershipsCreateMembershipRequest user(GroupMembershipsCreateMembershipRequestUser user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GroupMembershipsCreateMembershipRequestUser getUser() {
    return user;
  }


  public void setUser(GroupMembershipsCreateMembershipRequestUser user) {
    
    
    
    this.user = user;
  }


  public GroupMembershipsCreateMembershipRequest group(GroupMembershipsCreateMembershipRequestGroup group) {
    
    
    
    
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GroupMembershipsCreateMembershipRequestGroup getGroup() {
    return group;
  }


  public void setGroup(GroupMembershipsCreateMembershipRequestGroup group) {
    
    
    
    this.group = group;
  }


  public GroupMembershipsCreateMembershipRequest role(RoleEnum role) {
    
    
    
    
    this.role = role;
    return this;
  }

   /**
   * The role of the user in the group.
   * @return role
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MEMBER", value = "The role of the user in the group.")

  public RoleEnum getRole() {
    return role;
  }


  public void setRole(RoleEnum role) {
    
    
    
    this.role = role;
  }


  public GroupMembershipsCreateMembershipRequest configurablePermissions(Map<String, Boolean> configurablePermissions) {
    
    
    
    
    this.configurablePermissions = configurablePermissions;
    return this;
  }

  public GroupMembershipsCreateMembershipRequest putConfigurablePermissionsItem(String key, Boolean configurablePermissionsItem) {
    if (this.configurablePermissions == null) {
      this.configurablePermissions = new HashMap<>();
    }
    this.configurablePermissions.put(key, configurablePermissionsItem);
    return this;
  }

   /**
   * Custom configuration for the permissions an admin if a group will receive. This option has no effect on members with a role of &#x60;member&#x60;.  Setting these permissions overwrites the default access levels of an admin.  Specifying a value of \&quot;null\&quot; for this object will disable all configurable permissions. Specifying permissions will set them accordingly, omitted permissions will be enabled by default.
   * @return configurablePermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"can_run_reports\":true}", value = "Custom configuration for the permissions an admin if a group will receive. This option has no effect on members with a role of `member`.  Setting these permissions overwrites the default access levels of an admin.  Specifying a value of \"null\" for this object will disable all configurable permissions. Specifying permissions will set them accordingly, omitted permissions will be enabled by default.")

  public Map<String, Boolean> getConfigurablePermissions() {
    return configurablePermissions;
  }


  public void setConfigurablePermissions(Map<String, Boolean> configurablePermissions) {
    
    
    
    this.configurablePermissions = configurablePermissions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GroupMembershipsCreateMembershipRequest instance itself
   */
  public GroupMembershipsCreateMembershipRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupMembershipsCreateMembershipRequest groupMembershipsCreateMembershipRequest = (GroupMembershipsCreateMembershipRequest) o;
    return Objects.equals(this.user, groupMembershipsCreateMembershipRequest.user) &&
        Objects.equals(this.group, groupMembershipsCreateMembershipRequest.group) &&
        Objects.equals(this.role, groupMembershipsCreateMembershipRequest.role) &&
        Objects.equals(this.configurablePermissions, groupMembershipsCreateMembershipRequest.configurablePermissions)&&
        Objects.equals(this.additionalProperties, groupMembershipsCreateMembershipRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, group, role, configurablePermissions, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupMembershipsCreateMembershipRequest {\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    configurablePermissions: ").append(toIndentedString(configurablePermissions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("user");
    openapiFields.add("group");
    openapiFields.add("role");
    openapiFields.add("configurable_permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("group");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GroupMembershipsCreateMembershipRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GroupMembershipsCreateMembershipRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupMembershipsCreateMembershipRequest is not found in the empty JSON string", GroupMembershipsCreateMembershipRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GroupMembershipsCreateMembershipRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `user`
      GroupMembershipsCreateMembershipRequestUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      // validate the required field `group`
      GroupMembershipsCreateMembershipRequestGroup.validateJsonObject(jsonObj.getAsJsonObject("group"));
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupMembershipsCreateMembershipRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupMembershipsCreateMembershipRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupMembershipsCreateMembershipRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupMembershipsCreateMembershipRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupMembershipsCreateMembershipRequest>() {
           @Override
           public void write(JsonWriter out, GroupMembershipsCreateMembershipRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupMembershipsCreateMembershipRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GroupMembershipsCreateMembershipRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupMembershipsCreateMembershipRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupMembershipsCreateMembershipRequest
  * @throws IOException if the JSON string is invalid with respect to GroupMembershipsCreateMembershipRequest
  */
  public static GroupMembershipsCreateMembershipRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupMembershipsCreateMembershipRequest.class);
  }

 /**
  * Convert an instance of GroupMembershipsCreateMembershipRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

