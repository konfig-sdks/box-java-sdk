/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FileVersionLegalHoldFile;
import com.konfigthis.client.model.FileVersionLegalHoldFileVersion;
import com.konfigthis.client.model.LegalHoldPolicyAssignment;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * File-Version-Legal-Hold is an entity representing all holds on a File Version.
 */
@ApiModel(description = "File-Version-Legal-Hold is an entity representing all holds on a File Version.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FileVersionLegalHold {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * &#x60;file_version_legal_hold&#x60;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    FILE_VERSION_LEGAL_HOLD("file_version_legal_hold");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_FILE_VERSION = "file_version";
  @SerializedName(SERIALIZED_NAME_FILE_VERSION)
  private FileVersionLegalHoldFileVersion fileVersion;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private FileVersionLegalHoldFile _file;

  public static final String SERIALIZED_NAME_LEGAL_HOLD_POLICY_ASSIGNMENTS = "legal_hold_policy_assignments";
  @SerializedName(SERIALIZED_NAME_LEGAL_HOLD_POLICY_ASSIGNMENTS)
  private List<LegalHoldPolicyAssignment> legalHoldPolicyAssignments = null;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public FileVersionLegalHold() {
  }

  public FileVersionLegalHold id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for this file version legal hold
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11446498", value = "The unique identifier for this file version legal hold")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public FileVersionLegalHold type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * &#x60;file_version_legal_hold&#x60;
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "FILE_VERSION_LEGAL_HOLD", value = "`file_version_legal_hold`")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public FileVersionLegalHold fileVersion(FileVersionLegalHoldFileVersion fileVersion) {
    
    
    
    
    this.fileVersion = fileVersion;
    return this;
  }

   /**
   * Get fileVersion
   * @return fileVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FileVersionLegalHoldFileVersion getFileVersion() {
    return fileVersion;
  }


  public void setFileVersion(FileVersionLegalHoldFileVersion fileVersion) {
    
    
    
    this.fileVersion = fileVersion;
  }


  public FileVersionLegalHold _file(FileVersionLegalHoldFile _file) {
    
    
    
    
    this._file = _file;
    return this;
  }

   /**
   * Get _file
   * @return _file
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FileVersionLegalHoldFile getFile() {
    return _file;
  }


  public void setFile(FileVersionLegalHoldFile _file) {
    
    
    
    this._file = _file;
  }


  public FileVersionLegalHold legalHoldPolicyAssignments(List<LegalHoldPolicyAssignment> legalHoldPolicyAssignments) {
    
    
    
    
    this.legalHoldPolicyAssignments = legalHoldPolicyAssignments;
    return this;
  }

  public FileVersionLegalHold addLegalHoldPolicyAssignmentsItem(LegalHoldPolicyAssignment legalHoldPolicyAssignmentsItem) {
    if (this.legalHoldPolicyAssignments == null) {
      this.legalHoldPolicyAssignments = new ArrayList<>();
    }
    this.legalHoldPolicyAssignments.add(legalHoldPolicyAssignmentsItem);
    return this;
  }

   /**
   * List of assignments contributing to this Hold.
   * @return legalHoldPolicyAssignments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of assignments contributing to this Hold.")

  public List<LegalHoldPolicyAssignment> getLegalHoldPolicyAssignments() {
    return legalHoldPolicyAssignments;
  }


  public void setLegalHoldPolicyAssignments(List<LegalHoldPolicyAssignment> legalHoldPolicyAssignments) {
    
    
    
    this.legalHoldPolicyAssignments = legalHoldPolicyAssignments;
  }


  public FileVersionLegalHold deletedAt(OffsetDateTime deletedAt) {
    
    
    
    
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * Time that this File-Version-Legal-Hold was deleted.
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "Time that this File-Version-Legal-Hold was deleted.")

  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }


  public void setDeletedAt(OffsetDateTime deletedAt) {
    
    
    
    this.deletedAt = deletedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FileVersionLegalHold instance itself
   */
  public FileVersionLegalHold putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileVersionLegalHold fileVersionLegalHold = (FileVersionLegalHold) o;
    return Objects.equals(this.id, fileVersionLegalHold.id) &&
        Objects.equals(this.type, fileVersionLegalHold.type) &&
        Objects.equals(this.fileVersion, fileVersionLegalHold.fileVersion) &&
        Objects.equals(this._file, fileVersionLegalHold._file) &&
        Objects.equals(this.legalHoldPolicyAssignments, fileVersionLegalHold.legalHoldPolicyAssignments) &&
        Objects.equals(this.deletedAt, fileVersionLegalHold.deletedAt)&&
        Objects.equals(this.additionalProperties, fileVersionLegalHold.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, fileVersion, _file, legalHoldPolicyAssignments, deletedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileVersionLegalHold {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    fileVersion: ").append(toIndentedString(fileVersion)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    legalHoldPolicyAssignments: ").append(toIndentedString(legalHoldPolicyAssignments)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("file_version");
    openapiFields.add("file");
    openapiFields.add("legal_hold_policy_assignments");
    openapiFields.add("deleted_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FileVersionLegalHold
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FileVersionLegalHold.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileVersionLegalHold is not found in the empty JSON string", FileVersionLegalHold.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `file_version`
      if (jsonObj.get("file_version") != null && !jsonObj.get("file_version").isJsonNull()) {
        FileVersionLegalHoldFileVersion.validateJsonObject(jsonObj.getAsJsonObject("file_version"));
      }
      // validate the optional field `file`
      if (jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) {
        FileVersionLegalHoldFile.validateJsonObject(jsonObj.getAsJsonObject("file"));
      }
      if (jsonObj.get("legal_hold_policy_assignments") != null && !jsonObj.get("legal_hold_policy_assignments").isJsonNull()) {
        JsonArray jsonArraylegalHoldPolicyAssignments = jsonObj.getAsJsonArray("legal_hold_policy_assignments");
        if (jsonArraylegalHoldPolicyAssignments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("legal_hold_policy_assignments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `legal_hold_policy_assignments` to be an array in the JSON string but got `%s`", jsonObj.get("legal_hold_policy_assignments").toString()));
          }

          // validate the optional field `legal_hold_policy_assignments` (array)
          for (int i = 0; i < jsonArraylegalHoldPolicyAssignments.size(); i++) {
            LegalHoldPolicyAssignment.validateJsonObject(jsonArraylegalHoldPolicyAssignments.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileVersionLegalHold.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileVersionLegalHold' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileVersionLegalHold> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileVersionLegalHold.class));

       return (TypeAdapter<T>) new TypeAdapter<FileVersionLegalHold>() {
           @Override
           public void write(JsonWriter out, FileVersionLegalHold value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FileVersionLegalHold read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FileVersionLegalHold instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FileVersionLegalHold given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FileVersionLegalHold
  * @throws IOException if the JSON string is invalid with respect to FileVersionLegalHold
  */
  public static FileVersionLegalHold fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileVersionLegalHold.class);
  }

 /**
  * Convert an instance of FileVersionLegalHold to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

