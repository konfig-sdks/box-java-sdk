/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SignRequestSignerAllOfSignerDecision;
import com.konfigthis.client.model.SignRequestSignerInput;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The schema for a Signer in a GET Sign Request request body
 */
@ApiModel(description = "The schema for a Signer in a GET Sign Request request body")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SignRequestSigner {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  /**
   * Defines the role of the signer in the sign request. A &#x60;signer&#x60; must sign the document and an &#x60;approver&#x60; must approve the document. A &#x60;final_copy_reader&#x60; only receives the final signed document and signing log.
   */
  @JsonAdapter(RoleEnum.Adapter.class)
 public enum RoleEnum {
    SIGNER("signer"),
    
    APPROVER("approver"),
    
    FINAL_COPY_READER("final_copy_reader");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role = RoleEnum.SIGNER;

  public static final String SERIALIZED_NAME_IS_IN_PERSON = "is_in_person";
  @SerializedName(SERIALIZED_NAME_IS_IN_PERSON)
  private Boolean isInPerson;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_EMBED_URL_EXTERNAL_USER_ID = "embed_url_external_user_id";
  @SerializedName(SERIALIZED_NAME_EMBED_URL_EXTERNAL_USER_ID)
  private String embedUrlExternalUserId;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_DECLINED_REDIRECT_URL = "declined_redirect_url";
  @SerializedName(SERIALIZED_NAME_DECLINED_REDIRECT_URL)
  private String declinedRedirectUrl;

  public static final String SERIALIZED_NAME_LOGIN_REQUIRED = "login_required";
  @SerializedName(SERIALIZED_NAME_LOGIN_REQUIRED)
  private Boolean loginRequired;

  public static final String SERIALIZED_NAME_VERIFICATION_PHONE_NUMBER = "verification_phone_number";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_PHONE_NUMBER)
  private String verificationPhoneNumber;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_SIGNER_GROUP_ID = "signer_group_id";
  @SerializedName(SERIALIZED_NAME_SIGNER_GROUP_ID)
  private String signerGroupId;

  public static final String SERIALIZED_NAME_HAS_VIEWED_DOCUMENT = "has_viewed_document";
  @SerializedName(SERIALIZED_NAME_HAS_VIEWED_DOCUMENT)
  private Boolean hasViewedDocument;

  public static final String SERIALIZED_NAME_SIGNER_DECISION = "signer_decision";
  @SerializedName(SERIALIZED_NAME_SIGNER_DECISION)
  private SignRequestSignerAllOfSignerDecision signerDecision;

  public static final String SERIALIZED_NAME_INPUTS = "inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List<SignRequestSignerInput> inputs = null;

  public static final String SERIALIZED_NAME_EMBED_URL = "embed_url";
  @SerializedName(SERIALIZED_NAME_EMBED_URL)
  private String embedUrl;

  public static final String SERIALIZED_NAME_IFRAMEABLE_EMBED_URL = "iframeable_embed_url";
  @SerializedName(SERIALIZED_NAME_IFRAMEABLE_EMBED_URL)
  private String iframeableEmbedUrl;

  public SignRequestSigner() {
  }

  
  public SignRequestSigner(
     Boolean hasViewedDocument, 
     List<SignRequestSignerInput> inputs, 
     String embedUrl
  ) {
    this();
    this.hasViewedDocument = hasViewedDocument;
    this.inputs = inputs;
    this.embedUrl = embedUrl;
  }

  public SignRequestSigner email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Email address of the signer. The email address of the signer is required when making signature requests, except when using templates that are configured to include emails.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example@gmail.com", required = true, value = "Email address of the signer. The email address of the signer is required when making signature requests, except when using templates that are configured to include emails.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public SignRequestSigner role(RoleEnum role) {
    
    
    
    
    this.role = role;
    return this;
  }

   /**
   * Defines the role of the signer in the sign request. A &#x60;signer&#x60; must sign the document and an &#x60;approver&#x60; must approve the document. A &#x60;final_copy_reader&#x60; only receives the final signed document and signing log.
   * @return role
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SIGNER", value = "Defines the role of the signer in the sign request. A `signer` must sign the document and an `approver` must approve the document. A `final_copy_reader` only receives the final signed document and signing log.")

  public RoleEnum getRole() {
    return role;
  }


  public void setRole(RoleEnum role) {
    
    
    
    this.role = role;
  }


  public SignRequestSigner isInPerson(Boolean isInPerson) {
    
    
    
    
    this.isInPerson = isInPerson;
    return this;
  }

   /**
   * Used in combination with an embed URL for a sender. After the sender signs, they are redirected to the next &#x60;in_person&#x60; signer.
   * @return isInPerson
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Used in combination with an embed URL for a sender. After the sender signs, they are redirected to the next `in_person` signer.")

  public Boolean getIsInPerson() {
    return isInPerson;
  }


  public void setIsInPerson(Boolean isInPerson) {
    
    
    
    this.isInPerson = isInPerson;
  }


  public SignRequestSigner order(Integer order) {
    if (order != null && order < 0) {
      throw new IllegalArgumentException("Invalid value for order. Must be greater than or equal to 0.");
    }
    
    
    
    this.order = order;
    return this;
  }

   /**
   * Order of the signer
   * minimum: 0
   * @return order
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Order of the signer")

  public Integer getOrder() {
    return order;
  }


  public void setOrder(Integer order) {
    if (order != null && order < 0) {
      throw new IllegalArgumentException("Invalid value for order. Must be greater than or equal to 0.");
    }
    
    
    this.order = order;
  }


  public SignRequestSigner embedUrlExternalUserId(String embedUrlExternalUserId) {
    
    
    
    
    this.embedUrlExternalUserId = embedUrlExternalUserId;
    return this;
  }

   /**
   * User ID for the signer in an external application responsible for authentication when accessing the embed URL.
   * @return embedUrlExternalUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234", value = "User ID for the signer in an external application responsible for authentication when accessing the embed URL.")

  public String getEmbedUrlExternalUserId() {
    return embedUrlExternalUserId;
  }


  public void setEmbedUrlExternalUserId(String embedUrlExternalUserId) {
    
    
    
    this.embedUrlExternalUserId = embedUrlExternalUserId;
  }


  public SignRequestSigner redirectUrl(String redirectUrl) {
    
    
    
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * The URL that a signer will be redirected to after signing a document. Defining this URL overrides default or global redirect URL settings for a specific signer. If no declined redirect URL is specified, this URL will be used for decline actions as well.
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com", value = "The URL that a signer will be redirected to after signing a document. Defining this URL overrides default or global redirect URL settings for a specific signer. If no declined redirect URL is specified, this URL will be used for decline actions as well.")

  public String getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(String redirectUrl) {
    
    
    
    this.redirectUrl = redirectUrl;
  }


  public SignRequestSigner declinedRedirectUrl(String declinedRedirectUrl) {
    
    
    
    
    this.declinedRedirectUrl = declinedRedirectUrl;
    return this;
  }

   /**
   * The URL that a signer will be redirect to after declining to sign a document. Defining this URL overrides default or global declined redirect URL settings for a specific signer.
   * @return declinedRedirectUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://declined-example.com", value = "The URL that a signer will be redirect to after declining to sign a document. Defining this URL overrides default or global declined redirect URL settings for a specific signer.")

  public String getDeclinedRedirectUrl() {
    return declinedRedirectUrl;
  }


  public void setDeclinedRedirectUrl(String declinedRedirectUrl) {
    
    
    
    this.declinedRedirectUrl = declinedRedirectUrl;
  }


  public SignRequestSigner loginRequired(Boolean loginRequired) {
    
    
    
    
    this.loginRequired = loginRequired;
    return this;
  }

   /**
   * If set to true, signer will need to login to a Box account before signing the request. If the signer does not have an existing account, they will have an option to create a free Box account.
   * @return loginRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "If set to true, signer will need to login to a Box account before signing the request. If the signer does not have an existing account, they will have an option to create a free Box account.")

  public Boolean getLoginRequired() {
    return loginRequired;
  }


  public void setLoginRequired(Boolean loginRequired) {
    
    
    
    this.loginRequired = loginRequired;
  }


  public SignRequestSigner verificationPhoneNumber(String verificationPhoneNumber) {
    
    
    
    
    this.verificationPhoneNumber = verificationPhoneNumber;
    return this;
  }

   /**
   * If set, this phone number is be used to verify the signer via two factor authentication before they are able to sign the document.
   * @return verificationPhoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6314578901", value = "If set, this phone number is be used to verify the signer via two factor authentication before they are able to sign the document.")

  public String getVerificationPhoneNumber() {
    return verificationPhoneNumber;
  }


  public void setVerificationPhoneNumber(String verificationPhoneNumber) {
    
    
    
    this.verificationPhoneNumber = verificationPhoneNumber;
  }


  public SignRequestSigner password(String password) {
    
    
    
    
    this.password = password;
    return this;
  }

   /**
   * If set, the signer is required to enter the password before they are able to sign a document. This field is write only.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SecretPassword123", value = "If set, the signer is required to enter the password before they are able to sign a document. This field is write only.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    
    this.password = password;
  }


  public SignRequestSigner signerGroupId(String signerGroupId) {
    
    
    
    
    this.signerGroupId = signerGroupId;
    return this;
  }

   /**
   * If set, signers who have the same value will be assigned to the same input and to the same signer group. A signer group is not a Box Group. It is an entity that belongs to a Sign Request and can only be used/accessed within this Sign Request. A signer group is expected to have more than one signer. If the provided value is only used for one signer, this value will be ignored and request will be handled as it was intended for an individual signer. The value provided can be any string and only used to determine which signers belongs to same group. A successful response will provide a generated UUID value instead for signers in the same signer group.
   * @return signerGroupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "cd4ff89-8fc1-42cf-8b29-1890dedd26d7", value = "If set, signers who have the same value will be assigned to the same input and to the same signer group. A signer group is not a Box Group. It is an entity that belongs to a Sign Request and can only be used/accessed within this Sign Request. A signer group is expected to have more than one signer. If the provided value is only used for one signer, this value will be ignored and request will be handled as it was intended for an individual signer. The value provided can be any string and only used to determine which signers belongs to same group. A successful response will provide a generated UUID value instead for signers in the same signer group.")

  public String getSignerGroupId() {
    return signerGroupId;
  }


  public void setSignerGroupId(String signerGroupId) {
    
    
    
    this.signerGroupId = signerGroupId;
  }


   /**
   * Set to &#x60;true&#x60; if the signer views the document
   * @return hasViewedDocument
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Set to `true` if the signer views the document")

  public Boolean getHasViewedDocument() {
    return hasViewedDocument;
  }




  public SignRequestSigner signerDecision(SignRequestSignerAllOfSignerDecision signerDecision) {
    
    
    
    
    this.signerDecision = signerDecision;
    return this;
  }

   /**
   * Get signerDecision
   * @return signerDecision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SignRequestSignerAllOfSignerDecision getSignerDecision() {
    return signerDecision;
  }


  public void setSignerDecision(SignRequestSignerAllOfSignerDecision signerDecision) {
    
    
    
    this.signerDecision = signerDecision;
  }


   /**
   * Get inputs
   * @return inputs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SignRequestSignerInput> getInputs() {
    return inputs;
  }




   /**
   * URL to direct a signer to for signing
   * @return embedUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com", value = "URL to direct a signer to for signing")

  public String getEmbedUrl() {
    return embedUrl;
  }




  public SignRequestSigner iframeableEmbedUrl(String iframeableEmbedUrl) {
    
    
    
    
    this.iframeableEmbedUrl = iframeableEmbedUrl;
    return this;
  }

   /**
   * This URL is specifically designed for signing documents within an HTML &#x60;iframe&#x60; tag. It will be returned in the response only if the &#x60;embed_url_external_user_id&#x60; parameter was passed in the &#x60;create sign request&#x60; call.
   * @return iframeableEmbedUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://app.box.com/embed/sign/document/gfhr4222-a331-494b-808b-79bc7f3992a3/f14d7098-a331-494b-808b-79bc7f3992a4", value = "This URL is specifically designed for signing documents within an HTML `iframe` tag. It will be returned in the response only if the `embed_url_external_user_id` parameter was passed in the `create sign request` call.")

  public String getIframeableEmbedUrl() {
    return iframeableEmbedUrl;
  }


  public void setIframeableEmbedUrl(String iframeableEmbedUrl) {
    
    
    
    this.iframeableEmbedUrl = iframeableEmbedUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SignRequestSigner instance itself
   */
  public SignRequestSigner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignRequestSigner signRequestSigner = (SignRequestSigner) o;
    return Objects.equals(this.email, signRequestSigner.email) &&
        Objects.equals(this.role, signRequestSigner.role) &&
        Objects.equals(this.isInPerson, signRequestSigner.isInPerson) &&
        Objects.equals(this.order, signRequestSigner.order) &&
        Objects.equals(this.embedUrlExternalUserId, signRequestSigner.embedUrlExternalUserId) &&
        Objects.equals(this.redirectUrl, signRequestSigner.redirectUrl) &&
        Objects.equals(this.declinedRedirectUrl, signRequestSigner.declinedRedirectUrl) &&
        Objects.equals(this.loginRequired, signRequestSigner.loginRequired) &&
        Objects.equals(this.verificationPhoneNumber, signRequestSigner.verificationPhoneNumber) &&
        Objects.equals(this.password, signRequestSigner.password) &&
        Objects.equals(this.signerGroupId, signRequestSigner.signerGroupId) &&
        Objects.equals(this.hasViewedDocument, signRequestSigner.hasViewedDocument) &&
        Objects.equals(this.signerDecision, signRequestSigner.signerDecision) &&
        Objects.equals(this.inputs, signRequestSigner.inputs) &&
        Objects.equals(this.embedUrl, signRequestSigner.embedUrl) &&
        Objects.equals(this.iframeableEmbedUrl, signRequestSigner.iframeableEmbedUrl)&&
        Objects.equals(this.additionalProperties, signRequestSigner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, role, isInPerson, order, embedUrlExternalUserId, redirectUrl, declinedRedirectUrl, loginRequired, verificationPhoneNumber, password, signerGroupId, hasViewedDocument, signerDecision, inputs, embedUrl, iframeableEmbedUrl, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignRequestSigner {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    isInPerson: ").append(toIndentedString(isInPerson)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    embedUrlExternalUserId: ").append(toIndentedString(embedUrlExternalUserId)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    declinedRedirectUrl: ").append(toIndentedString(declinedRedirectUrl)).append("\n");
    sb.append("    loginRequired: ").append(toIndentedString(loginRequired)).append("\n");
    sb.append("    verificationPhoneNumber: ").append(toIndentedString(verificationPhoneNumber)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    signerGroupId: ").append(toIndentedString(signerGroupId)).append("\n");
    sb.append("    hasViewedDocument: ").append(toIndentedString(hasViewedDocument)).append("\n");
    sb.append("    signerDecision: ").append(toIndentedString(signerDecision)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    embedUrl: ").append(toIndentedString(embedUrl)).append("\n");
    sb.append("    iframeableEmbedUrl: ").append(toIndentedString(iframeableEmbedUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("role");
    openapiFields.add("is_in_person");
    openapiFields.add("order");
    openapiFields.add("embed_url_external_user_id");
    openapiFields.add("redirect_url");
    openapiFields.add("declined_redirect_url");
    openapiFields.add("login_required");
    openapiFields.add("verification_phone_number");
    openapiFields.add("password");
    openapiFields.add("signer_group_id");
    openapiFields.add("has_viewed_document");
    openapiFields.add("signer_decision");
    openapiFields.add("inputs");
    openapiFields.add("embed_url");
    openapiFields.add("iframeable_embed_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SignRequestSigner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SignRequestSigner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignRequestSigner is not found in the empty JSON string", SignRequestSigner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SignRequestSigner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("email").isJsonNull() && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if (!jsonObj.get("embed_url_external_user_id").isJsonNull() && (jsonObj.get("embed_url_external_user_id") != null && !jsonObj.get("embed_url_external_user_id").isJsonNull()) && !jsonObj.get("embed_url_external_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embed_url_external_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embed_url_external_user_id").toString()));
      }
      if (!jsonObj.get("redirect_url").isJsonNull() && (jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      if (!jsonObj.get("declined_redirect_url").isJsonNull() && (jsonObj.get("declined_redirect_url") != null && !jsonObj.get("declined_redirect_url").isJsonNull()) && !jsonObj.get("declined_redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `declined_redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("declined_redirect_url").toString()));
      }
      if (!jsonObj.get("verification_phone_number").isJsonNull() && (jsonObj.get("verification_phone_number") != null && !jsonObj.get("verification_phone_number").isJsonNull()) && !jsonObj.get("verification_phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_phone_number").toString()));
      }
      if (!jsonObj.get("password").isJsonNull() && (jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("signer_group_id").isJsonNull() && (jsonObj.get("signer_group_id") != null && !jsonObj.get("signer_group_id").isJsonNull()) && !jsonObj.get("signer_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signer_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signer_group_id").toString()));
      }
      // validate the optional field `signer_decision`
      if (jsonObj.get("signer_decision") != null && !jsonObj.get("signer_decision").isJsonNull()) {
        SignRequestSignerAllOfSignerDecision.validateJsonObject(jsonObj.getAsJsonObject("signer_decision"));
      }
      if (jsonObj.get("inputs") != null && !jsonObj.get("inputs").isJsonNull()) {
        JsonArray jsonArrayinputs = jsonObj.getAsJsonArray("inputs");
        if (jsonArrayinputs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputs` to be an array in the JSON string but got `%s`", jsonObj.get("inputs").toString()));
          }

          // validate the optional field `inputs` (array)
          for (int i = 0; i < jsonArrayinputs.size(); i++) {
            SignRequestSignerInput.validateJsonObject(jsonArrayinputs.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("embed_url").isJsonNull() && (jsonObj.get("embed_url") != null && !jsonObj.get("embed_url").isJsonNull()) && !jsonObj.get("embed_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embed_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embed_url").toString()));
      }
      if (!jsonObj.get("iframeable_embed_url").isJsonNull() && (jsonObj.get("iframeable_embed_url") != null && !jsonObj.get("iframeable_embed_url").isJsonNull()) && !jsonObj.get("iframeable_embed_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iframeable_embed_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iframeable_embed_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignRequestSigner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignRequestSigner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignRequestSigner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignRequestSigner.class));

       return (TypeAdapter<T>) new TypeAdapter<SignRequestSigner>() {
           @Override
           public void write(JsonWriter out, SignRequestSigner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SignRequestSigner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SignRequestSigner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SignRequestSigner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SignRequestSigner
  * @throws IOException if the JSON string is invalid with respect to SignRequestSigner
  */
  public static SignRequestSigner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignRequestSigner.class);
  }

 /**
  * Convert an instance of SignRequestSigner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

