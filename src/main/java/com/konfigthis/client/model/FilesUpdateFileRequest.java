/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FilesUpdateFileRequestLock;
import com.konfigthis.client.model.FilesUpdateFileRequestParent;
import com.konfigthis.client.model.FilesUpdateFileRequestPermissions;
import com.konfigthis.client.model.FilesUpdateFileRequestSharedLink;
import com.konfigthis.client.model.Reference1;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FilesUpdateFileRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FilesUpdateFileRequest {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private FilesUpdateFileRequestParent parent;

  public static final String SERIALIZED_NAME_SHARED_LINK = "shared_link";
  @SerializedName(SERIALIZED_NAME_SHARED_LINK)
  private FilesUpdateFileRequestSharedLink sharedLink;

  public static final String SERIALIZED_NAME_LOCK = "lock";
  @SerializedName(SERIALIZED_NAME_LOCK)
  private FilesUpdateFileRequestLock lock;

  public static final String SERIALIZED_NAME_DISPOSITION_AT = "disposition_at";
  @SerializedName(SERIALIZED_NAME_DISPOSITION_AT)
  private OffsetDateTime dispositionAt;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private FilesUpdateFileRequestPermissions permissions;

  public static final String SERIALIZED_NAME_COLLECTIONS = "collections";
  @SerializedName(SERIALIZED_NAME_COLLECTIONS)
  private List<Reference1> collections = null;

  public FilesUpdateFileRequest() {
  }

  public FilesUpdateFileRequest tags(List<String> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public FilesUpdateFileRequest addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags for this item. These tags are shown in the Box web app and mobile apps next to an item.  To add or remove a tag, retrieve the item&#39;s current tags, modify them, and then update this field.  There is a limit of 100 tags per item, and 10,000 unique tags per enterprise.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"approved\"]", value = "The tags for this item. These tags are shown in the Box web app and mobile apps next to an item.  To add or remove a tag, retrieve the item's current tags, modify them, and then update this field.  There is a limit of 100 tags per item, and 10,000 unique tags per enterprise.")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    
    
    
    this.tags = tags;
  }


  public FilesUpdateFileRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description for a file. This can be seen in the right-hand sidebar panel when viewing a file in the Box web app. Additionally, this index is used in the search index of the file, allowing users to find the file by the content in the description.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The latest reports. Automatically updated", value = "The description for a file. This can be seen in the right-hand sidebar panel when viewing a file in the Box web app. Additionally, this index is used in the search index of the file, allowing users to find the file by the content in the description.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public FilesUpdateFileRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * An optional different name for the file. This can be used to rename the file.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "NewFile.txt", value = "An optional different name for the file. This can be used to rename the file.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public FilesUpdateFileRequest parent(FilesUpdateFileRequestParent parent) {
    
    
    
    
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FilesUpdateFileRequestParent getParent() {
    return parent;
  }


  public void setParent(FilesUpdateFileRequestParent parent) {
    
    
    
    this.parent = parent;
  }


  public FilesUpdateFileRequest sharedLink(FilesUpdateFileRequestSharedLink sharedLink) {
    
    
    
    
    this.sharedLink = sharedLink;
    return this;
  }

   /**
   * Get sharedLink
   * @return sharedLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FilesUpdateFileRequestSharedLink getSharedLink() {
    return sharedLink;
  }


  public void setSharedLink(FilesUpdateFileRequestSharedLink sharedLink) {
    
    
    
    this.sharedLink = sharedLink;
  }


  public FilesUpdateFileRequest lock(FilesUpdateFileRequestLock lock) {
    
    
    
    
    this.lock = lock;
    return this;
  }

   /**
   * Get lock
   * @return lock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FilesUpdateFileRequestLock getLock() {
    return lock;
  }


  public void setLock(FilesUpdateFileRequestLock lock) {
    
    
    
    this.lock = lock;
  }


  public FilesUpdateFileRequest dispositionAt(OffsetDateTime dispositionAt) {
    
    
    
    
    this.dispositionAt = dispositionAt;
    return this;
  }

   /**
   * The retention expiration timestamp for the given file. This date cannot be shortened once set on a file.
   * @return dispositionAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "The retention expiration timestamp for the given file. This date cannot be shortened once set on a file.")

  public OffsetDateTime getDispositionAt() {
    return dispositionAt;
  }


  public void setDispositionAt(OffsetDateTime dispositionAt) {
    
    
    
    this.dispositionAt = dispositionAt;
  }


  public FilesUpdateFileRequest permissions(FilesUpdateFileRequestPermissions permissions) {
    
    
    
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FilesUpdateFileRequestPermissions getPermissions() {
    return permissions;
  }


  public void setPermissions(FilesUpdateFileRequestPermissions permissions) {
    
    
    
    this.permissions = permissions;
  }


  public FilesUpdateFileRequest collections(List<Reference1> collections) {
    
    
    
    
    this.collections = collections;
    return this;
  }

  public FilesUpdateFileRequest addCollectionsItem(Reference1 collectionsItem) {
    if (this.collections == null) {
      this.collections = new ArrayList<>();
    }
    this.collections.add(collectionsItem);
    return this;
  }

   /**
   * An array of collections to make this file a member of. Currently we only support the &#x60;favorites&#x60; collection.  To get the ID for a collection, use the [List all collections][1] endpoint.  Passing an empty array &#x60;[]&#x60; or &#x60;null&#x60; will remove the file from all collections.  [1]: e://get-collections
   * @return collections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of collections to make this file a member of. Currently we only support the `favorites` collection.  To get the ID for a collection, use the [List all collections][1] endpoint.  Passing an empty array `[]` or `null` will remove the file from all collections.  [1]: e://get-collections")

  public List<Reference1> getCollections() {
    return collections;
  }


  public void setCollections(List<Reference1> collections) {
    
    
    
    this.collections = collections;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FilesUpdateFileRequest instance itself
   */
  public FilesUpdateFileRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilesUpdateFileRequest filesUpdateFileRequest = (FilesUpdateFileRequest) o;
    return Objects.equals(this.tags, filesUpdateFileRequest.tags) &&
        Objects.equals(this.description, filesUpdateFileRequest.description) &&
        Objects.equals(this.name, filesUpdateFileRequest.name) &&
        Objects.equals(this.parent, filesUpdateFileRequest.parent) &&
        Objects.equals(this.sharedLink, filesUpdateFileRequest.sharedLink) &&
        Objects.equals(this.lock, filesUpdateFileRequest.lock) &&
        Objects.equals(this.dispositionAt, filesUpdateFileRequest.dispositionAt) &&
        Objects.equals(this.permissions, filesUpdateFileRequest.permissions) &&
        Objects.equals(this.collections, filesUpdateFileRequest.collections)&&
        Objects.equals(this.additionalProperties, filesUpdateFileRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, description, name, parent, sharedLink, lock, dispositionAt, permissions, collections, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilesUpdateFileRequest {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    sharedLink: ").append(toIndentedString(sharedLink)).append("\n");
    sb.append("    lock: ").append(toIndentedString(lock)).append("\n");
    sb.append("    dispositionAt: ").append(toIndentedString(dispositionAt)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    collections: ").append(toIndentedString(collections)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("shared_link");
    openapiFields.add("lock");
    openapiFields.add("disposition_at");
    openapiFields.add("permissions");
    openapiFields.add("collections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FilesUpdateFileRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FilesUpdateFileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilesUpdateFileRequest is not found in the empty JSON string", FilesUpdateFileRequest.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        FilesUpdateFileRequestParent.validateJsonObject(jsonObj.getAsJsonObject("parent"));
      }
      // validate the optional field `shared_link`
      if (jsonObj.get("shared_link") != null && !jsonObj.get("shared_link").isJsonNull()) {
        FilesUpdateFileRequestSharedLink.validateJsonObject(jsonObj.getAsJsonObject("shared_link"));
      }
      // validate the optional field `lock`
      if (jsonObj.get("lock") != null && !jsonObj.get("lock").isJsonNull()) {
        FilesUpdateFileRequestLock.validateJsonObject(jsonObj.getAsJsonObject("lock"));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        FilesUpdateFileRequestPermissions.validateJsonObject(jsonObj.getAsJsonObject("permissions"));
      }
      if (jsonObj.get("collections") != null && !jsonObj.get("collections").isJsonNull()) {
        JsonArray jsonArraycollections = jsonObj.getAsJsonArray("collections");
        if (jsonArraycollections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("collections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `collections` to be an array in the JSON string but got `%s`", jsonObj.get("collections").toString()));
          }

          // validate the optional field `collections` (array)
          for (int i = 0; i < jsonArraycollections.size(); i++) {
            Reference1.validateJsonObject(jsonArraycollections.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilesUpdateFileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilesUpdateFileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilesUpdateFileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilesUpdateFileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FilesUpdateFileRequest>() {
           @Override
           public void write(JsonWriter out, FilesUpdateFileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FilesUpdateFileRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FilesUpdateFileRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FilesUpdateFileRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FilesUpdateFileRequest
  * @throws IOException if the JSON string is invalid with respect to FilesUpdateFileRequest
  */
  public static FilesUpdateFileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilesUpdateFileRequest.class);
  }

 /**
  * Convert an instance of FilesUpdateFileRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

