/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A [JSON-Patch](https://tools.ietf.org/html/rfc6902) operation for a change to make to the metadata instance.
 */
@ApiModel(description = "A [JSON-Patch](https://tools.ietf.org/html/rfc6902) operation for a change to make to the metadata instance.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AMetadataTemplateUpdateOperation {
  /**
   * The type of change to perform on the template. Some of these are hazardous as they will change existing templates.
   */
  @JsonAdapter(OpEnum.Adapter.class)
 public enum OpEnum {
    EDITTEMPLATE("editTemplate"),
    
    ADDFIELD("addField"),
    
    REORDERFIELDS("reorderFields"),
    
    ADDENUMOPTION("addEnumOption"),
    
    REORDERENUMOPTIONS("reorderEnumOptions"),
    
    REORDERMULTISELECTOPTIONS("reorderMultiSelectOptions"),
    
    ADDMULTISELECTOPTION("addMultiSelectOption"),
    
    EDITFIELD("editField"),
    
    REMOVEFIELD("removeField"),
    
    EDITENUMOPTION("editEnumOption"),
    
    REMOVEENUMOPTION("removeEnumOption"),
    
    EDITMULTISELECTOPTION("editMultiSelectOption"),
    
    REMOVEMULTISELECTOPTION("removeMultiSelectOption");

    private String value;

    OpEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OpEnum fromValue(String value) {
      for (OpEnum b : OpEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OpEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OP = "op";
  @SerializedName(SERIALIZED_NAME_OP)
  private OpEnum op;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Map<String, Object> data = null;

  public static final String SERIALIZED_NAME_FIELD_KEY = "fieldKey";
  @SerializedName(SERIALIZED_NAME_FIELD_KEY)
  private String fieldKey;

  public static final String SERIALIZED_NAME_FIELD_KEYS = "fieldKeys";
  @SerializedName(SERIALIZED_NAME_FIELD_KEYS)
  private List<String> fieldKeys = null;

  public static final String SERIALIZED_NAME_ENUM_OPTION_KEY = "enumOptionKey";
  @SerializedName(SERIALIZED_NAME_ENUM_OPTION_KEY)
  private String enumOptionKey;

  public static final String SERIALIZED_NAME_ENUM_OPTION_KEYS = "enumOptionKeys";
  @SerializedName(SERIALIZED_NAME_ENUM_OPTION_KEYS)
  private List<String> enumOptionKeys = null;

  public static final String SERIALIZED_NAME_MULTI_SELECT_OPTION_KEY = "multiSelectOptionKey";
  @SerializedName(SERIALIZED_NAME_MULTI_SELECT_OPTION_KEY)
  private String multiSelectOptionKey;

  public static final String SERIALIZED_NAME_MULTI_SELECT_OPTION_KEYS = "multiSelectOptionKeys";
  @SerializedName(SERIALIZED_NAME_MULTI_SELECT_OPTION_KEYS)
  private List<String> multiSelectOptionKeys = null;

  public AMetadataTemplateUpdateOperation() {
  }

  public AMetadataTemplateUpdateOperation op(OpEnum op) {
    
    
    
    
    this.op = op;
    return this;
  }

   /**
   * The type of change to perform on the template. Some of these are hazardous as they will change existing templates.
   * @return op
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ADDENUMOPTION", required = true, value = "The type of change to perform on the template. Some of these are hazardous as they will change existing templates.")

  public OpEnum getOp() {
    return op;
  }


  public void setOp(OpEnum op) {
    
    
    
    this.op = op;
  }


  public AMetadataTemplateUpdateOperation data(Map<String, Object> data) {
    
    
    
    
    this.data = data;
    return this;
  }

  public AMetadataTemplateUpdateOperation putDataItem(String key, Object dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

   /**
   * The data for the operation. This will vary depending on the operation being performed.
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"name\":\"Aaron Levie\"}", value = "The data for the operation. This will vary depending on the operation being performed.")

  public Map<String, Object> getData() {
    return data;
  }


  public void setData(Map<String, Object> data) {
    
    
    
    this.data = data;
  }


  public AMetadataTemplateUpdateOperation fieldKey(String fieldKey) {
    
    
    
    
    this.fieldKey = fieldKey;
    return this;
  }

   /**
   * For operations that affect a single field this defines the key of the field that is affected.
   * @return fieldKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "category", value = "For operations that affect a single field this defines the key of the field that is affected.")

  public String getFieldKey() {
    return fieldKey;
  }


  public void setFieldKey(String fieldKey) {
    
    
    
    this.fieldKey = fieldKey;
  }


  public AMetadataTemplateUpdateOperation fieldKeys(List<String> fieldKeys) {
    
    
    
    
    this.fieldKeys = fieldKeys;
    return this;
  }

  public AMetadataTemplateUpdateOperation addFieldKeysItem(String fieldKeysItem) {
    if (this.fieldKeys == null) {
      this.fieldKeys = new ArrayList<>();
    }
    this.fieldKeys.add(fieldKeysItem);
    return this;
  }

   /**
   * For operations that affect multiple fields this defines the keys of the fields that are affected.
   * @return fieldKeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"category\",\"name\"]", value = "For operations that affect multiple fields this defines the keys of the fields that are affected.")

  public List<String> getFieldKeys() {
    return fieldKeys;
  }


  public void setFieldKeys(List<String> fieldKeys) {
    
    
    
    this.fieldKeys = fieldKeys;
  }


  public AMetadataTemplateUpdateOperation enumOptionKey(String enumOptionKey) {
    
    
    
    
    this.enumOptionKey = enumOptionKey;
    return this;
  }

   /**
   * For operations that affect a single &#x60;enum&#x60; option this defines the key of the option that is affected.
   * @return enumOptionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "option1", value = "For operations that affect a single `enum` option this defines the key of the option that is affected.")

  public String getEnumOptionKey() {
    return enumOptionKey;
  }


  public void setEnumOptionKey(String enumOptionKey) {
    
    
    
    this.enumOptionKey = enumOptionKey;
  }


  public AMetadataTemplateUpdateOperation enumOptionKeys(List<String> enumOptionKeys) {
    
    
    
    
    this.enumOptionKeys = enumOptionKeys;
    return this;
  }

  public AMetadataTemplateUpdateOperation addEnumOptionKeysItem(String enumOptionKeysItem) {
    if (this.enumOptionKeys == null) {
      this.enumOptionKeys = new ArrayList<>();
    }
    this.enumOptionKeys.add(enumOptionKeysItem);
    return this;
  }

   /**
   * For operations that affect multiple &#x60;enum&#x60; options this defines the keys of the options that are affected.
   * @return enumOptionKeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"option1\",\"option2\",\"option3\"]", value = "For operations that affect multiple `enum` options this defines the keys of the options that are affected.")

  public List<String> getEnumOptionKeys() {
    return enumOptionKeys;
  }


  public void setEnumOptionKeys(List<String> enumOptionKeys) {
    
    
    
    this.enumOptionKeys = enumOptionKeys;
  }


  public AMetadataTemplateUpdateOperation multiSelectOptionKey(String multiSelectOptionKey) {
    
    
    
    
    this.multiSelectOptionKey = multiSelectOptionKey;
    return this;
  }

   /**
   * For operations that affect a single multi select option this defines the key of the option that is affected.
   * @return multiSelectOptionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "option1", value = "For operations that affect a single multi select option this defines the key of the option that is affected.")

  public String getMultiSelectOptionKey() {
    return multiSelectOptionKey;
  }


  public void setMultiSelectOptionKey(String multiSelectOptionKey) {
    
    
    
    this.multiSelectOptionKey = multiSelectOptionKey;
  }


  public AMetadataTemplateUpdateOperation multiSelectOptionKeys(List<String> multiSelectOptionKeys) {
    
    
    
    
    this.multiSelectOptionKeys = multiSelectOptionKeys;
    return this;
  }

  public AMetadataTemplateUpdateOperation addMultiSelectOptionKeysItem(String multiSelectOptionKeysItem) {
    if (this.multiSelectOptionKeys == null) {
      this.multiSelectOptionKeys = new ArrayList<>();
    }
    this.multiSelectOptionKeys.add(multiSelectOptionKeysItem);
    return this;
  }

   /**
   * For operations that affect multiple multi select options this defines the keys of the options that are affected.
   * @return multiSelectOptionKeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"option1\",\"option2\",\"option3\"]", value = "For operations that affect multiple multi select options this defines the keys of the options that are affected.")

  public List<String> getMultiSelectOptionKeys() {
    return multiSelectOptionKeys;
  }


  public void setMultiSelectOptionKeys(List<String> multiSelectOptionKeys) {
    
    
    
    this.multiSelectOptionKeys = multiSelectOptionKeys;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AMetadataTemplateUpdateOperation instance itself
   */
  public AMetadataTemplateUpdateOperation putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AMetadataTemplateUpdateOperation aMetadataTemplateUpdateOperation = (AMetadataTemplateUpdateOperation) o;
    return Objects.equals(this.op, aMetadataTemplateUpdateOperation.op) &&
        Objects.equals(this.data, aMetadataTemplateUpdateOperation.data) &&
        Objects.equals(this.fieldKey, aMetadataTemplateUpdateOperation.fieldKey) &&
        Objects.equals(this.fieldKeys, aMetadataTemplateUpdateOperation.fieldKeys) &&
        Objects.equals(this.enumOptionKey, aMetadataTemplateUpdateOperation.enumOptionKey) &&
        Objects.equals(this.enumOptionKeys, aMetadataTemplateUpdateOperation.enumOptionKeys) &&
        Objects.equals(this.multiSelectOptionKey, aMetadataTemplateUpdateOperation.multiSelectOptionKey) &&
        Objects.equals(this.multiSelectOptionKeys, aMetadataTemplateUpdateOperation.multiSelectOptionKeys)&&
        Objects.equals(this.additionalProperties, aMetadataTemplateUpdateOperation.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(op, data, fieldKey, fieldKeys, enumOptionKey, enumOptionKeys, multiSelectOptionKey, multiSelectOptionKeys, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AMetadataTemplateUpdateOperation {\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    fieldKey: ").append(toIndentedString(fieldKey)).append("\n");
    sb.append("    fieldKeys: ").append(toIndentedString(fieldKeys)).append("\n");
    sb.append("    enumOptionKey: ").append(toIndentedString(enumOptionKey)).append("\n");
    sb.append("    enumOptionKeys: ").append(toIndentedString(enumOptionKeys)).append("\n");
    sb.append("    multiSelectOptionKey: ").append(toIndentedString(multiSelectOptionKey)).append("\n");
    sb.append("    multiSelectOptionKeys: ").append(toIndentedString(multiSelectOptionKeys)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("op");
    openapiFields.add("data");
    openapiFields.add("fieldKey");
    openapiFields.add("fieldKeys");
    openapiFields.add("enumOptionKey");
    openapiFields.add("enumOptionKeys");
    openapiFields.add("multiSelectOptionKey");
    openapiFields.add("multiSelectOptionKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("op");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AMetadataTemplateUpdateOperation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AMetadataTemplateUpdateOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AMetadataTemplateUpdateOperation is not found in the empty JSON string", AMetadataTemplateUpdateOperation.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AMetadataTemplateUpdateOperation.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("op").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `op` to be a primitive type in the JSON string but got `%s`", jsonObj.get("op").toString()));
      }
      if ((jsonObj.get("fieldKey") != null && !jsonObj.get("fieldKey").isJsonNull()) && !jsonObj.get("fieldKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fieldKeys") != null && !jsonObj.get("fieldKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldKeys` to be an array in the JSON string but got `%s`", jsonObj.get("fieldKeys").toString()));
      }
      if ((jsonObj.get("enumOptionKey") != null && !jsonObj.get("enumOptionKey").isJsonNull()) && !jsonObj.get("enumOptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enumOptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enumOptionKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enumOptionKeys") != null && !jsonObj.get("enumOptionKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enumOptionKeys` to be an array in the JSON string but got `%s`", jsonObj.get("enumOptionKeys").toString()));
      }
      if ((jsonObj.get("multiSelectOptionKey") != null && !jsonObj.get("multiSelectOptionKey").isJsonNull()) && !jsonObj.get("multiSelectOptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multiSelectOptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multiSelectOptionKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("multiSelectOptionKeys") != null && !jsonObj.get("multiSelectOptionKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `multiSelectOptionKeys` to be an array in the JSON string but got `%s`", jsonObj.get("multiSelectOptionKeys").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AMetadataTemplateUpdateOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AMetadataTemplateUpdateOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AMetadataTemplateUpdateOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AMetadataTemplateUpdateOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<AMetadataTemplateUpdateOperation>() {
           @Override
           public void write(JsonWriter out, AMetadataTemplateUpdateOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AMetadataTemplateUpdateOperation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AMetadataTemplateUpdateOperation instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AMetadataTemplateUpdateOperation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AMetadataTemplateUpdateOperation
  * @throws IOException if the JSON string is invalid with respect to AMetadataTemplateUpdateOperation
  */
  public static AMetadataTemplateUpdateOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AMetadataTemplateUpdateOperation.class);
  }

 /**
  * Convert an instance of AMetadataTemplateUpdateOperation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

