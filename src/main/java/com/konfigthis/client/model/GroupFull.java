/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Groups contain a set of users, and can be used in place of users in some operations, such as collaborations.
 */
@ApiModel(description = "Groups contain a set of users, and can be used in place of users in some operations, such as collaborations.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GroupFull {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * &#x60;group&#x60;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    GROUP("group");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The type of the group.
   */
  @JsonAdapter(GroupTypeEnum.Adapter.class)
 public enum GroupTypeEnum {
    MANAGED_GROUP("managed_group"),
    
    ALL_USERS_GROUP("all_users_group");

    private String value;

    GroupTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupTypeEnum fromValue(String value) {
      for (GroupTypeEnum b : GroupTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GROUP_TYPE = "group_type";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE)
  private GroupTypeEnum groupType;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private String provenance;

  public static final String SERIALIZED_NAME_EXTERNAL_SYNC_IDENTIFIER = "external_sync_identifier";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SYNC_IDENTIFIER)
  private String externalSyncIdentifier;

  /**
   * Specifies who can invite the group to collaborate on items.  When set to &#x60;admins_only&#x60; the enterprise admin, co-admins, and the group&#39;s admin can invite the group.  When set to &#x60;admins_and_members&#x60; all the admins listed above and group members can invite the group.  When set to &#x60;all_managed_users&#x60; all managed users in the enterprise can invite the group.
   */
  @JsonAdapter(InvitabilityLevelEnum.Adapter.class)
 public enum InvitabilityLevelEnum {
    ADMINS_ONLY("admins_only"),
    
    ADMINS_AND_MEMBERS("admins_and_members"),
    
    ALL_MANAGED_USERS("all_managed_users");

    private String value;

    InvitabilityLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvitabilityLevelEnum fromValue(String value) {
      for (InvitabilityLevelEnum b : InvitabilityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvitabilityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvitabilityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvitabilityLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvitabilityLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INVITABILITY_LEVEL = "invitability_level";
  @SerializedName(SERIALIZED_NAME_INVITABILITY_LEVEL)
  private InvitabilityLevelEnum invitabilityLevel;

  /**
   * Specifies who can view the members of the group (Get Memberships for Group).  * &#x60;admins_only&#x60; - the enterprise admin, co-admins, group&#39;s   group admin * &#x60;admins_and_members&#x60; - all admins and group members * &#x60;all_managed_users&#x60; - all managed users in the   enterprise
   */
  @JsonAdapter(MemberViewabilityLevelEnum.Adapter.class)
 public enum MemberViewabilityLevelEnum {
    ADMINS_ONLY("admins_only"),
    
    ADMINS_AND_MEMBERS("admins_and_members"),
    
    ALL_MANAGED_USERS("all_managed_users");

    private String value;

    MemberViewabilityLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MemberViewabilityLevelEnum fromValue(String value) {
      for (MemberViewabilityLevelEnum b : MemberViewabilityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MemberViewabilityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MemberViewabilityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MemberViewabilityLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MemberViewabilityLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MEMBER_VIEWABILITY_LEVEL = "member_viewability_level";
  @SerializedName(SERIALIZED_NAME_MEMBER_VIEWABILITY_LEVEL)
  private MemberViewabilityLevelEnum memberViewabilityLevel;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private Object permissions;

  public GroupFull() {
  }

  public GroupFull id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for this object
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "11446498", required = true, value = "The unique identifier for this object")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public GroupFull type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * &#x60;group&#x60;
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "GROUP", required = true, value = "`group`")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public GroupFull name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the group
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Support", value = "The name of the group")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public GroupFull groupType(GroupTypeEnum groupType) {
    
    
    
    
    this.groupType = groupType;
    return this;
  }

   /**
   * The type of the group.
   * @return groupType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MANAGED_GROUP", value = "The type of the group.")

  public GroupTypeEnum getGroupType() {
    return groupType;
  }


  public void setGroupType(GroupTypeEnum groupType) {
    
    
    
    this.groupType = groupType;
  }


  public GroupFull createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When the group object was created
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "When the group object was created")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public GroupFull modifiedAt(OffsetDateTime modifiedAt) {
    
    
    
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * When the group object was last modified
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "When the group object was last modified")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(OffsetDateTime modifiedAt) {
    
    
    
    this.modifiedAt = modifiedAt;
  }


  public GroupFull description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Human readable description of the group.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Support Group - as imported from Active Directory", value = "Human readable description of the group.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public GroupFull provenance(String provenance) {
    
    
    
    
    this.provenance = provenance;
    return this;
  }

   /**
   * Keeps track of which external source this group is coming from (e.g. \&quot;Active Directory\&quot;, \&quot;Google Groups\&quot;, \&quot;Facebook Groups\&quot;).  Setting this will also prevent Box users from editing the group name and its members directly via the Box web application. This is desirable for one-way syncing of groups.
   * @return provenance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Active Directory", value = "Keeps track of which external source this group is coming from (e.g. \"Active Directory\", \"Google Groups\", \"Facebook Groups\").  Setting this will also prevent Box users from editing the group name and its members directly via the Box web application. This is desirable for one-way syncing of groups.")

  public String getProvenance() {
    return provenance;
  }


  public void setProvenance(String provenance) {
    
    
    
    this.provenance = provenance;
  }


  public GroupFull externalSyncIdentifier(String externalSyncIdentifier) {
    
    
    
    
    this.externalSyncIdentifier = externalSyncIdentifier;
    return this;
  }

   /**
   * An arbitrary identifier that can be used by external group sync tools to link this Box Group to an external group. Example values of this field could be an Active Directory Object ID or a Google Group ID.  We recommend you use of this field in order to avoid issues when group names are updated in either Box or external systems.
   * @return externalSyncIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AD:123456", value = "An arbitrary identifier that can be used by external group sync tools to link this Box Group to an external group. Example values of this field could be an Active Directory Object ID or a Google Group ID.  We recommend you use of this field in order to avoid issues when group names are updated in either Box or external systems.")

  public String getExternalSyncIdentifier() {
    return externalSyncIdentifier;
  }


  public void setExternalSyncIdentifier(String externalSyncIdentifier) {
    
    
    
    this.externalSyncIdentifier = externalSyncIdentifier;
  }


  public GroupFull invitabilityLevel(InvitabilityLevelEnum invitabilityLevel) {
    
    
    
    
    this.invitabilityLevel = invitabilityLevel;
    return this;
  }

   /**
   * Specifies who can invite the group to collaborate on items.  When set to &#x60;admins_only&#x60; the enterprise admin, co-admins, and the group&#39;s admin can invite the group.  When set to &#x60;admins_and_members&#x60; all the admins listed above and group members can invite the group.  When set to &#x60;all_managed_users&#x60; all managed users in the enterprise can invite the group.
   * @return invitabilityLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ADMINS_ONLY", value = "Specifies who can invite the group to collaborate on items.  When set to `admins_only` the enterprise admin, co-admins, and the group's admin can invite the group.  When set to `admins_and_members` all the admins listed above and group members can invite the group.  When set to `all_managed_users` all managed users in the enterprise can invite the group.")

  public InvitabilityLevelEnum getInvitabilityLevel() {
    return invitabilityLevel;
  }


  public void setInvitabilityLevel(InvitabilityLevelEnum invitabilityLevel) {
    
    
    
    this.invitabilityLevel = invitabilityLevel;
  }


  public GroupFull memberViewabilityLevel(MemberViewabilityLevelEnum memberViewabilityLevel) {
    
    
    
    
    this.memberViewabilityLevel = memberViewabilityLevel;
    return this;
  }

   /**
   * Specifies who can view the members of the group (Get Memberships for Group).  * &#x60;admins_only&#x60; - the enterprise admin, co-admins, group&#39;s   group admin * &#x60;admins_and_members&#x60; - all admins and group members * &#x60;all_managed_users&#x60; - all managed users in the   enterprise
   * @return memberViewabilityLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ADMINS_ONLY", value = "Specifies who can view the members of the group (Get Memberships for Group).  * `admins_only` - the enterprise admin, co-admins, group's   group admin * `admins_and_members` - all admins and group members * `all_managed_users` - all managed users in the   enterprise")

  public MemberViewabilityLevelEnum getMemberViewabilityLevel() {
    return memberViewabilityLevel;
  }


  public void setMemberViewabilityLevel(MemberViewabilityLevelEnum memberViewabilityLevel) {
    
    
    
    this.memberViewabilityLevel = memberViewabilityLevel;
  }


  public GroupFull permissions(Object permissions) {
    
    
    
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getPermissions() {
    return permissions;
  }


  public void setPermissions(Object permissions) {
    
    
    
    this.permissions = permissions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GroupFull instance itself
   */
  public GroupFull putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupFull groupFull = (GroupFull) o;
    return Objects.equals(this.id, groupFull.id) &&
        Objects.equals(this.type, groupFull.type) &&
        Objects.equals(this.name, groupFull.name) &&
        Objects.equals(this.groupType, groupFull.groupType) &&
        Objects.equals(this.createdAt, groupFull.createdAt) &&
        Objects.equals(this.modifiedAt, groupFull.modifiedAt) &&
        Objects.equals(this.description, groupFull.description) &&
        Objects.equals(this.provenance, groupFull.provenance) &&
        Objects.equals(this.externalSyncIdentifier, groupFull.externalSyncIdentifier) &&
        Objects.equals(this.invitabilityLevel, groupFull.invitabilityLevel) &&
        Objects.equals(this.memberViewabilityLevel, groupFull.memberViewabilityLevel) &&
        Objects.equals(this.permissions, groupFull.permissions)&&
        Objects.equals(this.additionalProperties, groupFull.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, name, groupType, createdAt, modifiedAt, description, provenance, externalSyncIdentifier, invitabilityLevel, memberViewabilityLevel, permissions, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupFull {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    externalSyncIdentifier: ").append(toIndentedString(externalSyncIdentifier)).append("\n");
    sb.append("    invitabilityLevel: ").append(toIndentedString(invitabilityLevel)).append("\n");
    sb.append("    memberViewabilityLevel: ").append(toIndentedString(memberViewabilityLevel)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("name");
    openapiFields.add("group_type");
    openapiFields.add("created_at");
    openapiFields.add("modified_at");
    openapiFields.add("description");
    openapiFields.add("provenance");
    openapiFields.add("external_sync_identifier");
    openapiFields.add("invitability_level");
    openapiFields.add("member_viewability_level");
    openapiFields.add("permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GroupFull
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GroupFull.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupFull is not found in the empty JSON string", GroupFull.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GroupFull.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("group_type") != null && !jsonObj.get("group_type").isJsonNull()) && !jsonObj.get("group_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) && !jsonObj.get("provenance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provenance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provenance").toString()));
      }
      if ((jsonObj.get("external_sync_identifier") != null && !jsonObj.get("external_sync_identifier").isJsonNull()) && !jsonObj.get("external_sync_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_sync_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_sync_identifier").toString()));
      }
      if ((jsonObj.get("invitability_level") != null && !jsonObj.get("invitability_level").isJsonNull()) && !jsonObj.get("invitability_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitability_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitability_level").toString()));
      }
      if ((jsonObj.get("member_viewability_level") != null && !jsonObj.get("member_viewability_level").isJsonNull()) && !jsonObj.get("member_viewability_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `member_viewability_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("member_viewability_level").toString()));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("permissions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupFull.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupFull' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupFull> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupFull.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupFull>() {
           @Override
           public void write(JsonWriter out, GroupFull value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupFull read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GroupFull instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupFull given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupFull
  * @throws IOException if the JSON string is invalid with respect to GroupFull
  */
  public static GroupFull fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupFull.class);
  }

 /**
  * Convert an instance of GroupFull to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

