/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ShieldInformationBarrierReference;
import com.konfigthis.client.model.ShieldInformationBarrierReportDetails;
import com.konfigthis.client.model.UserBase;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ShieldInformationBarrierReportAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ShieldInformationBarrierReportAllOf {
  public static final String SERIALIZED_NAME_SHIELD_INFORMATION_BARRIER = "shield_information_barrier";
  @SerializedName(SERIALIZED_NAME_SHIELD_INFORMATION_BARRIER)
  private ShieldInformationBarrierReference shieldInformationBarrier;

  /**
   * Status of the shield information report
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    PENDING("pending"),
    
    ERROR("error"),
    
    DONE("done"),
    
    CANCELLED("cancelled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private ShieldInformationBarrierReportDetails details;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserBase createdBy;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public ShieldInformationBarrierReportAllOf() {
  }

  public ShieldInformationBarrierReportAllOf shieldInformationBarrier(ShieldInformationBarrierReference shieldInformationBarrier) {
    
    
    
    
    this.shieldInformationBarrier = shieldInformationBarrier;
    return this;
  }

   /**
   * Get shieldInformationBarrier
   * @return shieldInformationBarrier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ShieldInformationBarrierReference getShieldInformationBarrier() {
    return shieldInformationBarrier;
  }


  public void setShieldInformationBarrier(ShieldInformationBarrierReference shieldInformationBarrier) {
    
    
    
    this.shieldInformationBarrier = shieldInformationBarrier;
  }


  public ShieldInformationBarrierReportAllOf status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Status of the shield information report
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PENDING", value = "Status of the shield information report")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ShieldInformationBarrierReportAllOf details(ShieldInformationBarrierReportDetails details) {
    
    
    
    
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ShieldInformationBarrierReportDetails getDetails() {
    return details;
  }


  public void setDetails(ShieldInformationBarrierReportDetails details) {
    
    
    
    this.details = details;
  }


  public ShieldInformationBarrierReportAllOf createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * ISO date time string when this shield information barrier report object was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-06-26T18:44:45.869Z", value = "ISO date time string when this shield information barrier report object was created.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public ShieldInformationBarrierReportAllOf createdBy(UserBase createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserBase getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(UserBase createdBy) {
    
    
    
    this.createdBy = createdBy;
  }


  public ShieldInformationBarrierReportAllOf updatedAt(OffsetDateTime updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * ISO date time string when this shield information barrier report was updated.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-07-26T18:44:45.869Z", value = "ISO date time string when this shield information barrier report was updated.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ShieldInformationBarrierReportAllOf instance itself
   */
  public ShieldInformationBarrierReportAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShieldInformationBarrierReportAllOf shieldInformationBarrierReportAllOf = (ShieldInformationBarrierReportAllOf) o;
    return Objects.equals(this.shieldInformationBarrier, shieldInformationBarrierReportAllOf.shieldInformationBarrier) &&
        Objects.equals(this.status, shieldInformationBarrierReportAllOf.status) &&
        Objects.equals(this.details, shieldInformationBarrierReportAllOf.details) &&
        Objects.equals(this.createdAt, shieldInformationBarrierReportAllOf.createdAt) &&
        Objects.equals(this.createdBy, shieldInformationBarrierReportAllOf.createdBy) &&
        Objects.equals(this.updatedAt, shieldInformationBarrierReportAllOf.updatedAt)&&
        Objects.equals(this.additionalProperties, shieldInformationBarrierReportAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shieldInformationBarrier, status, details, createdAt, createdBy, updatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShieldInformationBarrierReportAllOf {\n");
    sb.append("    shieldInformationBarrier: ").append(toIndentedString(shieldInformationBarrier)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("shield_information_barrier");
    openapiFields.add("status");
    openapiFields.add("details");
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShieldInformationBarrierReportAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShieldInformationBarrierReportAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShieldInformationBarrierReportAllOf is not found in the empty JSON string", ShieldInformationBarrierReportAllOf.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `shield_information_barrier`
      if (jsonObj.get("shield_information_barrier") != null && !jsonObj.get("shield_information_barrier").isJsonNull()) {
        ShieldInformationBarrierReference.validateJsonObject(jsonObj.getAsJsonObject("shield_information_barrier"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        ShieldInformationBarrierReportDetails.validateJsonObject(jsonObj.getAsJsonObject("details"));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        UserBase.validateJsonObject(jsonObj.getAsJsonObject("created_by"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShieldInformationBarrierReportAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShieldInformationBarrierReportAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShieldInformationBarrierReportAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShieldInformationBarrierReportAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ShieldInformationBarrierReportAllOf>() {
           @Override
           public void write(JsonWriter out, ShieldInformationBarrierReportAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ShieldInformationBarrierReportAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ShieldInformationBarrierReportAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShieldInformationBarrierReportAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShieldInformationBarrierReportAllOf
  * @throws IOException if the JSON string is invalid with respect to ShieldInformationBarrierReportAllOf
  */
  public static ShieldInformationBarrierReportAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShieldInformationBarrierReportAllOf.class);
  }

 /**
  * Convert an instance of ShieldInformationBarrierReportAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

