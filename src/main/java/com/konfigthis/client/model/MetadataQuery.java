/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.MetadataQueryOrderByInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Create a search using SQL-like syntax to return items that match specific metadata.
 */
@ApiModel(description = "Create a search using SQL-like syntax to return items that match specific metadata.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MetadataQuery {
  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_QUERY_PARAMS = "query_params";
  @SerializedName(SERIALIZED_NAME_QUERY_PARAMS)
  private Map<String, String> queryParams = null;

  public static final String SERIALIZED_NAME_ANCESTOR_FOLDER_ID = "ancestor_folder_id";
  @SerializedName(SERIALIZED_NAME_ANCESTOR_FOLDER_ID)
  private String ancestorFolderId;

  public static final String SERIALIZED_NAME_ORDER_BY = "order_by";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private List<MetadataQueryOrderByInner> orderBy = null;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit = 100;

  public static final String SERIALIZED_NAME_MARKER = "marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  private String marker;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<String> fields = null;

  public MetadataQuery() {
  }

  public MetadataQuery from(String from) {
    
    
    
    
    this.from = from;
    return this;
  }

   /**
   * Specifies the template used in the query. Must be in the form &#x60;scope.templateKey&#x60;. Not all templates can be used in this field, most notably the built-in, Box-provided classification templates can not be used in a query.
   * @return from
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "enterprise_123456.someTemplate", required = true, value = "Specifies the template used in the query. Must be in the form `scope.templateKey`. Not all templates can be used in this field, most notably the built-in, Box-provided classification templates can not be used in a query.")

  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    
    
    
    this.from = from;
  }


  public MetadataQuery query(String query) {
    
    
    
    
    this.query = query;
    return this;
  }

   /**
   * The query to perform. A query is a logical expression that is very similar to a SQL &#x60;SELECT&#x60; statement. Values in the search query can be turned into parameters specified in the &#x60;query_param&#x60; arguments list to prevent having to manually insert search values into the query string.  For example, a value of &#x60;:amount&#x60; would represent the &#x60;amount&#x60; value in &#x60;query_params&#x60; object.
   * @return query
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "value >= :amount", value = "The query to perform. A query is a logical expression that is very similar to a SQL `SELECT` statement. Values in the search query can be turned into parameters specified in the `query_param` arguments list to prevent having to manually insert search values into the query string.  For example, a value of `:amount` would represent the `amount` value in `query_params` object.")

  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    
    
    
    this.query = query;
  }


  public MetadataQuery queryParams(Map<String, String> queryParams) {
    
    
    
    
    this.queryParams = queryParams;
    return this;
  }

  public MetadataQuery putQueryParamsItem(String key, String queryParamsItem) {
    if (this.queryParams == null) {
      this.queryParams = new HashMap<>();
    }
    this.queryParams.put(key, queryParamsItem);
    return this;
  }

   /**
   * Set of arguments corresponding to the parameters specified in the &#x60;query&#x60;. The type of each parameter used in the &#x60;query_params&#x60; must match the type of the corresponding metadata template field.
   * @return queryParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"amount\":\"100\"}", value = "Set of arguments corresponding to the parameters specified in the `query`. The type of each parameter used in the `query_params` must match the type of the corresponding metadata template field.")

  public Map<String, String> getQueryParams() {
    return queryParams;
  }


  public void setQueryParams(Map<String, String> queryParams) {
    
    
    
    this.queryParams = queryParams;
  }


  public MetadataQuery ancestorFolderId(String ancestorFolderId) {
    
    
    
    
    this.ancestorFolderId = ancestorFolderId;
    return this;
  }

   /**
   * The ID of the folder that you are restricting the query to. A value of zero will return results from all folders you have access to. A non-zero value will only return results found in the folder corresponding to the ID or in any of its subfolders.
   * @return ancestorFolderId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "The ID of the folder that you are restricting the query to. A value of zero will return results from all folders you have access to. A non-zero value will only return results found in the folder corresponding to the ID or in any of its subfolders.")

  public String getAncestorFolderId() {
    return ancestorFolderId;
  }


  public void setAncestorFolderId(String ancestorFolderId) {
    
    
    
    this.ancestorFolderId = ancestorFolderId;
  }


  public MetadataQuery orderBy(List<MetadataQueryOrderByInner> orderBy) {
    
    
    
    
    this.orderBy = orderBy;
    return this;
  }

  public MetadataQuery addOrderByItem(MetadataQueryOrderByInner orderByItem) {
    if (this.orderBy == null) {
      this.orderBy = new ArrayList<>();
    }
    this.orderBy.add(orderByItem);
    return this;
  }

   /**
   * A list of template fields and directions to sort the metadata query results by.  The ordering &#x60;direction&#x60; must be the same for each item in the array.
   * @return orderBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of template fields and directions to sort the metadata query results by.  The ordering `direction` must be the same for each item in the array.")

  public List<MetadataQueryOrderByInner> getOrderBy() {
    return orderBy;
  }


  public void setOrderBy(List<MetadataQueryOrderByInner> orderBy) {
    
    
    
    this.orderBy = orderBy;
  }


  public MetadataQuery limit(Integer limit) {
    if (limit != null && limit < 0) {
      throw new IllegalArgumentException("Invalid value for limit. Must be greater than or equal to 0.");
    }
    if (limit != null && limit > 100) {
      throw new IllegalArgumentException("Invalid value for limit. Must be less than or equal to 100.");
    }
    
    
    this.limit = limit;
    return this;
  }

   /**
   * A value between 0 and 100 that indicates the maximum number of results to return for a single request. This only specifies a maximum boundary and will not guarantee the minimum number of results returned.
   * minimum: 0
   * maximum: 100
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50", value = "A value between 0 and 100 that indicates the maximum number of results to return for a single request. This only specifies a maximum boundary and will not guarantee the minimum number of results returned.")

  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    if (limit != null && limit < 0) {
      throw new IllegalArgumentException("Invalid value for limit. Must be greater than or equal to 0.");
    }
    if (limit != null && limit > 100) {
      throw new IllegalArgumentException("Invalid value for limit. Must be less than or equal to 100.");
    }
    
    this.limit = limit;
  }


  public MetadataQuery marker(String marker) {
    
    
    
    
    this.marker = marker;
    return this;
  }

   /**
   * Marker to use for requesting the next page.
   * @return marker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AAAAAmVYB1FWec8GH6yWu2nwmanfMh07IyYInaa7DZDYjgO1H4KoLW29vPlLY173OKsci6h6xGh61gG73gnaxoS+o0BbI1/h6le6cikjlupVhASwJ2Cj0tOD9wlnrUMHHw3/ISf+uuACzrOMhN6d5fYrbidPzS6MdhJOejuYlvsg4tcBYzjauP3+VU51p77HFAIuObnJT0ff", value = "Marker to use for requesting the next page.")

  public String getMarker() {
    return marker;
  }


  public void setMarker(String marker) {
    
    
    
    this.marker = marker;
  }


  public MetadataQuery fields(List<String> fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

  public MetadataQuery addFieldsItem(String fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * By default, this endpoint returns only the most basic info about the items for which the query matches. This attribute can be used to specify a list of additional attributes to return for any item, including its metadata.  This attribute takes a list of item fields, metadata template identifiers, or metadata template field identifiers.  For example:  * &#x60;created_by&#x60; will add the details of the user who created the item to the response. * &#x60;metadata.&lt;scope&gt;.&lt;templateKey&gt;&#x60; will return the mini-representation of the metadata instance identified by the &#x60;scope&#x60; and &#x60;templateKey&#x60;. * &#x60;metadata.&lt;scope&gt;.&lt;templateKey&gt;.&lt;field&gt;&#x60; will return all the mini-representation of the metadata instance identified by the &#x60;scope&#x60; and &#x60;templateKey&#x60; plus the field specified by the &#x60;field&#x60; name. Multiple fields for the same &#x60;scope&#x60; and &#x60;templateKey&#x60; can be defined.
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"extension\",\"created_at\",\"item_status\",\"metadata.enterprise_1234.contracts\",\"metadata.enterprise_1234.regions.location\"]", value = "By default, this endpoint returns only the most basic info about the items for which the query matches. This attribute can be used to specify a list of additional attributes to return for any item, including its metadata.  This attribute takes a list of item fields, metadata template identifiers, or metadata template field identifiers.  For example:  * `created_by` will add the details of the user who created the item to the response. * `metadata.<scope>.<templateKey>` will return the mini-representation of the metadata instance identified by the `scope` and `templateKey`. * `metadata.<scope>.<templateKey>.<field>` will return all the mini-representation of the metadata instance identified by the `scope` and `templateKey` plus the field specified by the `field` name. Multiple fields for the same `scope` and `templateKey` can be defined.")

  public List<String> getFields() {
    return fields;
  }


  public void setFields(List<String> fields) {
    
    
    
    this.fields = fields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MetadataQuery instance itself
   */
  public MetadataQuery putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataQuery metadataQuery = (MetadataQuery) o;
    return Objects.equals(this.from, metadataQuery.from) &&
        Objects.equals(this.query, metadataQuery.query) &&
        Objects.equals(this.queryParams, metadataQuery.queryParams) &&
        Objects.equals(this.ancestorFolderId, metadataQuery.ancestorFolderId) &&
        Objects.equals(this.orderBy, metadataQuery.orderBy) &&
        Objects.equals(this.limit, metadataQuery.limit) &&
        Objects.equals(this.marker, metadataQuery.marker) &&
        Objects.equals(this.fields, metadataQuery.fields)&&
        Objects.equals(this.additionalProperties, metadataQuery.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, query, queryParams, ancestorFolderId, orderBy, limit, marker, fields, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataQuery {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    queryParams: ").append(toIndentedString(queryParams)).append("\n");
    sb.append("    ancestorFolderId: ").append(toIndentedString(ancestorFolderId)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from");
    openapiFields.add("query");
    openapiFields.add("query_params");
    openapiFields.add("ancestor_folder_id");
    openapiFields.add("order_by");
    openapiFields.add("limit");
    openapiFields.add("marker");
    openapiFields.add("fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("ancestor_folder_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MetadataQuery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MetadataQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetadataQuery is not found in the empty JSON string", MetadataQuery.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetadataQuery.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if (!jsonObj.get("ancestor_folder_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ancestor_folder_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ancestor_folder_id").toString()));
      }
      if (jsonObj.get("order_by") != null && !jsonObj.get("order_by").isJsonNull()) {
        JsonArray jsonArrayorderBy = jsonObj.getAsJsonArray("order_by");
        if (jsonArrayorderBy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("order_by").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `order_by` to be an array in the JSON string but got `%s`", jsonObj.get("order_by").toString()));
          }

          // validate the optional field `order_by` (array)
          for (int i = 0; i < jsonArrayorderBy.size(); i++) {
            MetadataQueryOrderByInner.validateJsonObject(jsonArrayorderBy.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("marker") != null && !jsonObj.get("marker").isJsonNull()) && !jsonObj.get("marker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marker").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetadataQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetadataQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetadataQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetadataQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<MetadataQuery>() {
           @Override
           public void write(JsonWriter out, MetadataQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MetadataQuery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MetadataQuery instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MetadataQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MetadataQuery
  * @throws IOException if the JSON string is invalid with respect to MetadataQuery
  */
  public static MetadataQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetadataQuery.class);
  }

 /**
  * Convert an instance of MetadataQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

