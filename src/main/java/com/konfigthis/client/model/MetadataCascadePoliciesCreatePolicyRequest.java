/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MetadataCascadePoliciesCreatePolicyRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MetadataCascadePoliciesCreatePolicyRequest {
  public static final String SERIALIZED_NAME_FOLDER_ID = "folder_id";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private String folderId;

  /**
   * The scope of the targeted metadata template. This template will need to already have an instance applied to the targeted folder.
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
 public enum ScopeEnum {
    GLOBAL("global"),
    
    ENTERPRISE("enterprise");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private ScopeEnum scope;

  public static final String SERIALIZED_NAME_TEMPLATE_KEY = "templateKey";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_KEY)
  private String templateKey;

  public MetadataCascadePoliciesCreatePolicyRequest() {
  }

  public MetadataCascadePoliciesCreatePolicyRequest folderId(String folderId) {
    
    
    
    
    this.folderId = folderId;
    return this;
  }

   /**
   * The ID of the folder to apply the policy to. This folder will need to already have an instance of the targeted metadata template applied to it.
   * @return folderId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1234567", required = true, value = "The ID of the folder to apply the policy to. This folder will need to already have an instance of the targeted metadata template applied to it.")

  public String getFolderId() {
    return folderId;
  }


  public void setFolderId(String folderId) {
    
    
    
    this.folderId = folderId;
  }


  public MetadataCascadePoliciesCreatePolicyRequest scope(ScopeEnum scope) {
    
    
    
    
    this.scope = scope;
    return this;
  }

   /**
   * The scope of the targeted metadata template. This template will need to already have an instance applied to the targeted folder.
   * @return scope
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ENTERPRISE", required = true, value = "The scope of the targeted metadata template. This template will need to already have an instance applied to the targeted folder.")

  public ScopeEnum getScope() {
    return scope;
  }


  public void setScope(ScopeEnum scope) {
    
    
    
    this.scope = scope;
  }


  public MetadataCascadePoliciesCreatePolicyRequest templateKey(String templateKey) {
    
    
    
    
    this.templateKey = templateKey;
    return this;
  }

   /**
   * The key of the targeted metadata template. This template will need to already have an instance applied to the targeted folder.  In many cases the template key is automatically derived of its display name, for example &#x60;Contract Template&#x60; would become &#x60;contractTemplate&#x60;. In some cases the creator of the template will have provided its own template key.  Please [list the templates for an enterprise][list], or get all instances on a [file][file] or [folder][folder] to inspect a template&#39;s key.  [list]: e://get-metadata-templates-enterprise [file]: e://get-files-id-metadata [folder]: e://get-folders-id-metadata
   * @return templateKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "productInfo", required = true, value = "The key of the targeted metadata template. This template will need to already have an instance applied to the targeted folder.  In many cases the template key is automatically derived of its display name, for example `Contract Template` would become `contractTemplate`. In some cases the creator of the template will have provided its own template key.  Please [list the templates for an enterprise][list], or get all instances on a [file][file] or [folder][folder] to inspect a template's key.  [list]: e://get-metadata-templates-enterprise [file]: e://get-files-id-metadata [folder]: e://get-folders-id-metadata")

  public String getTemplateKey() {
    return templateKey;
  }


  public void setTemplateKey(String templateKey) {
    
    
    
    this.templateKey = templateKey;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MetadataCascadePoliciesCreatePolicyRequest instance itself
   */
  public MetadataCascadePoliciesCreatePolicyRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataCascadePoliciesCreatePolicyRequest metadataCascadePoliciesCreatePolicyRequest = (MetadataCascadePoliciesCreatePolicyRequest) o;
    return Objects.equals(this.folderId, metadataCascadePoliciesCreatePolicyRequest.folderId) &&
        Objects.equals(this.scope, metadataCascadePoliciesCreatePolicyRequest.scope) &&
        Objects.equals(this.templateKey, metadataCascadePoliciesCreatePolicyRequest.templateKey)&&
        Objects.equals(this.additionalProperties, metadataCascadePoliciesCreatePolicyRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(folderId, scope, templateKey, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataCascadePoliciesCreatePolicyRequest {\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    templateKey: ").append(toIndentedString(templateKey)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("folder_id");
    openapiFields.add("scope");
    openapiFields.add("templateKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("folder_id");
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("templateKey");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MetadataCascadePoliciesCreatePolicyRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MetadataCascadePoliciesCreatePolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetadataCascadePoliciesCreatePolicyRequest is not found in the empty JSON string", MetadataCascadePoliciesCreatePolicyRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetadataCascadePoliciesCreatePolicyRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("folder_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder_id").toString()));
      }
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("templateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetadataCascadePoliciesCreatePolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetadataCascadePoliciesCreatePolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetadataCascadePoliciesCreatePolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetadataCascadePoliciesCreatePolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MetadataCascadePoliciesCreatePolicyRequest>() {
           @Override
           public void write(JsonWriter out, MetadataCascadePoliciesCreatePolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MetadataCascadePoliciesCreatePolicyRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MetadataCascadePoliciesCreatePolicyRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MetadataCascadePoliciesCreatePolicyRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MetadataCascadePoliciesCreatePolicyRequest
  * @throws IOException if the JSON string is invalid with respect to MetadataCascadePoliciesCreatePolicyRequest
  */
  public static MetadataCascadePoliciesCreatePolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetadataCascadePoliciesCreatePolicyRequest.class);
  }

 /**
  * Convert an instance of MetadataCascadePoliciesCreatePolicyRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

