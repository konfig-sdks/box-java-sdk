/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The status of a &#x60;zip&#x60; archive being downloaded.
 */
@ApiModel(description = "The status of a `zip` archive being downloaded.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ZipDownloadStatus {
  public static final String SERIALIZED_NAME_TOTAL_FILE_COUNT = "total_file_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_FILE_COUNT)
  private Integer totalFileCount;

  public static final String SERIALIZED_NAME_DOWNLOADED_FILE_COUNT = "downloaded_file_count";
  @SerializedName(SERIALIZED_NAME_DOWNLOADED_FILE_COUNT)
  private Integer downloadedFileCount;

  public static final String SERIALIZED_NAME_SKIPPED_FILE_COUNT = "skipped_file_count";
  @SerializedName(SERIALIZED_NAME_SKIPPED_FILE_COUNT)
  private Integer skippedFileCount;

  public static final String SERIALIZED_NAME_SKIPPED_FOLDER_COUNT = "skipped_folder_count";
  @SerializedName(SERIALIZED_NAME_SKIPPED_FOLDER_COUNT)
  private Integer skippedFolderCount;

  /**
   * The state of the archive being downloaded.
   */
  @JsonAdapter(StateEnum.Adapter.class)
 public enum StateEnum {
    IN_PROGRESS("in_progress"),
    
    FAILED("failed"),
    
    SUCCEEDED("succeeded");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state = StateEnum.IN_PROGRESS;

  public ZipDownloadStatus() {
  }

  public ZipDownloadStatus totalFileCount(Integer totalFileCount) {
    if (totalFileCount != null && totalFileCount < 0) {
      throw new IllegalArgumentException("Invalid value for totalFileCount. Must be greater than or equal to 0.");
    }
    if (totalFileCount != null && totalFileCount > 10000) {
      throw new IllegalArgumentException("Invalid value for totalFileCount. Must be less than or equal to 10000.");
    }
    
    
    this.totalFileCount = totalFileCount;
    return this;
  }

   /**
   * The total number of files in the archive.
   * minimum: 0
   * maximum: 10000
   * @return totalFileCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20", value = "The total number of files in the archive.")

  public Integer getTotalFileCount() {
    return totalFileCount;
  }


  public void setTotalFileCount(Integer totalFileCount) {
    if (totalFileCount != null && totalFileCount < 0) {
      throw new IllegalArgumentException("Invalid value for totalFileCount. Must be greater than or equal to 0.");
    }
    if (totalFileCount != null && totalFileCount > 10000) {
      throw new IllegalArgumentException("Invalid value for totalFileCount. Must be less than or equal to 10000.");
    }
    
    this.totalFileCount = totalFileCount;
  }


  public ZipDownloadStatus downloadedFileCount(Integer downloadedFileCount) {
    if (downloadedFileCount != null && downloadedFileCount < 0) {
      throw new IllegalArgumentException("Invalid value for downloadedFileCount. Must be greater than or equal to 0.");
    }
    
    
    
    this.downloadedFileCount = downloadedFileCount;
    return this;
  }

   /**
   * The number of files that have already been downloaded.
   * minimum: 0
   * @return downloadedFileCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "The number of files that have already been downloaded.")

  public Integer getDownloadedFileCount() {
    return downloadedFileCount;
  }


  public void setDownloadedFileCount(Integer downloadedFileCount) {
    if (downloadedFileCount != null && downloadedFileCount < 0) {
      throw new IllegalArgumentException("Invalid value for downloadedFileCount. Must be greater than or equal to 0.");
    }
    
    
    this.downloadedFileCount = downloadedFileCount;
  }


  public ZipDownloadStatus skippedFileCount(Integer skippedFileCount) {
    if (skippedFileCount != null && skippedFileCount < 0) {
      throw new IllegalArgumentException("Invalid value for skippedFileCount. Must be greater than or equal to 0.");
    }
    
    
    
    this.skippedFileCount = skippedFileCount;
    return this;
  }

   /**
   * The number of files that have been skipped as they could not be downloaded. In many cases this is due to permission issues that have surfaced between the creation of the request for the archive and the archive being downloaded.
   * minimum: 0
   * @return skippedFileCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "The number of files that have been skipped as they could not be downloaded. In many cases this is due to permission issues that have surfaced between the creation of the request for the archive and the archive being downloaded.")

  public Integer getSkippedFileCount() {
    return skippedFileCount;
  }


  public void setSkippedFileCount(Integer skippedFileCount) {
    if (skippedFileCount != null && skippedFileCount < 0) {
      throw new IllegalArgumentException("Invalid value for skippedFileCount. Must be greater than or equal to 0.");
    }
    
    
    this.skippedFileCount = skippedFileCount;
  }


  public ZipDownloadStatus skippedFolderCount(Integer skippedFolderCount) {
    if (skippedFolderCount != null && skippedFolderCount < 0) {
      throw new IllegalArgumentException("Invalid value for skippedFolderCount. Must be greater than or equal to 0.");
    }
    
    
    
    this.skippedFolderCount = skippedFolderCount;
    return this;
  }

   /**
   * The number of folders that have been skipped as they could not be downloaded. In many cases this is due to permission issues that have surfaced between the creation of the request for the archive and the archive being downloaded.
   * minimum: 0
   * @return skippedFolderCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "The number of folders that have been skipped as they could not be downloaded. In many cases this is due to permission issues that have surfaced between the creation of the request for the archive and the archive being downloaded.")

  public Integer getSkippedFolderCount() {
    return skippedFolderCount;
  }


  public void setSkippedFolderCount(Integer skippedFolderCount) {
    if (skippedFolderCount != null && skippedFolderCount < 0) {
      throw new IllegalArgumentException("Invalid value for skippedFolderCount. Must be greater than or equal to 0.");
    }
    
    
    this.skippedFolderCount = skippedFolderCount;
  }


  public ZipDownloadStatus state(StateEnum state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * The state of the archive being downloaded.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SUCCEEDED", value = "The state of the archive being downloaded.")

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    
    
    
    this.state = state;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ZipDownloadStatus instance itself
   */
  public ZipDownloadStatus putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZipDownloadStatus zipDownloadStatus = (ZipDownloadStatus) o;
    return Objects.equals(this.totalFileCount, zipDownloadStatus.totalFileCount) &&
        Objects.equals(this.downloadedFileCount, zipDownloadStatus.downloadedFileCount) &&
        Objects.equals(this.skippedFileCount, zipDownloadStatus.skippedFileCount) &&
        Objects.equals(this.skippedFolderCount, zipDownloadStatus.skippedFolderCount) &&
        Objects.equals(this.state, zipDownloadStatus.state)&&
        Objects.equals(this.additionalProperties, zipDownloadStatus.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalFileCount, downloadedFileCount, skippedFileCount, skippedFolderCount, state, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZipDownloadStatus {\n");
    sb.append("    totalFileCount: ").append(toIndentedString(totalFileCount)).append("\n");
    sb.append("    downloadedFileCount: ").append(toIndentedString(downloadedFileCount)).append("\n");
    sb.append("    skippedFileCount: ").append(toIndentedString(skippedFileCount)).append("\n");
    sb.append("    skippedFolderCount: ").append(toIndentedString(skippedFolderCount)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total_file_count");
    openapiFields.add("downloaded_file_count");
    openapiFields.add("skipped_file_count");
    openapiFields.add("skipped_folder_count");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ZipDownloadStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ZipDownloadStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZipDownloadStatus is not found in the empty JSON string", ZipDownloadStatus.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZipDownloadStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZipDownloadStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZipDownloadStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZipDownloadStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ZipDownloadStatus>() {
           @Override
           public void write(JsonWriter out, ZipDownloadStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ZipDownloadStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ZipDownloadStatus instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZipDownloadStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZipDownloadStatus
  * @throws IOException if the JSON string is invalid with respect to ZipDownloadStatus
  */
  public static ZipDownloadStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZipDownloadStatus.class);
  }

 /**
  * Convert an instance of ZipDownloadStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

