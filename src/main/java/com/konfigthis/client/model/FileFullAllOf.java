/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FileFullAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FileFullAllOf {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_VERSION_NUMBER = "version_number";
  @SerializedName(SERIALIZED_NAME_VERSION_NUMBER)
  private String versionNumber;

  public static final String SERIALIZED_NAME_COMMENT_COUNT = "comment_count";
  @SerializedName(SERIALIZED_NAME_COMMENT_COUNT)
  private Integer commentCount;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private Object permissions;

  public static final String SERIALIZED_NAME_LOCK = "lock";
  @SerializedName(SERIALIZED_NAME_LOCK)
  private Object lock;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_IS_PACKAGE = "is_package";
  @SerializedName(SERIALIZED_NAME_IS_PACKAGE)
  private Boolean isPackage;

  public static final String SERIALIZED_NAME_EXPIRING_EMBED_LINK = "expiring_embed_link";
  @SerializedName(SERIALIZED_NAME_EXPIRING_EMBED_LINK)
  private Object expiringEmbedLink;

  public static final String SERIALIZED_NAME_WATERMARK_INFO = "watermark_info";
  @SerializedName(SERIALIZED_NAME_WATERMARK_INFO)
  private Object watermarkInfo;

  /**
   * Specifies if the file can be accessed via the direct shared link or a shared link to a parent folder.
   */
  @JsonAdapter(IsAccessibleViaSharedLinkEnum.Adapter.class)
 public enum IsAccessibleViaSharedLinkEnum {
    TRUE("true"),
    
    FALSE("false");

    private Boolean value;

    IsAccessibleViaSharedLinkEnum(Boolean value) {
      this.value = value;
    }

    public Boolean getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsAccessibleViaSharedLinkEnum fromValue(Boolean value) {
      for (IsAccessibleViaSharedLinkEnum b : IsAccessibleViaSharedLinkEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsAccessibleViaSharedLinkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsAccessibleViaSharedLinkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsAccessibleViaSharedLinkEnum read(final JsonReader jsonReader) throws IOException {
        Boolean value =  jsonReader.nextBoolean();
        return IsAccessibleViaSharedLinkEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IS_ACCESSIBLE_VIA_SHARED_LINK = "is_accessible_via_shared_link";
  @SerializedName(SERIALIZED_NAME_IS_ACCESSIBLE_VIA_SHARED_LINK)
  private IsAccessibleViaSharedLinkEnum isAccessibleViaSharedLink;

  /**
   * Gets or Sets allowedInviteeRoles
   */
  @JsonAdapter(AllowedInviteeRolesEnum.Adapter.class)
 public enum AllowedInviteeRolesEnum {
    EDITOR("editor"),
    
    VIEWER("viewer"),
    
    PREVIEWER("previewer"),
    
    UPLOADER("uploader"),
    
    PREVIEWER_UPLOADER("previewer uploader"),
    
    VIEWER_UPLOADER("viewer uploader"),
    
    CO_OWNER("co-owner");

    private String value;

    AllowedInviteeRolesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedInviteeRolesEnum fromValue(String value) {
      for (AllowedInviteeRolesEnum b : AllowedInviteeRolesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedInviteeRolesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedInviteeRolesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedInviteeRolesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedInviteeRolesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_INVITEE_ROLES = "allowed_invitee_roles";
  @SerializedName(SERIALIZED_NAME_ALLOWED_INVITEE_ROLES)
  private List<AllowedInviteeRolesEnum> allowedInviteeRoles = null;

  public static final String SERIALIZED_NAME_IS_EXTERNALLY_OWNED = "is_externally_owned";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNALLY_OWNED)
  private Boolean isExternallyOwned;

  public static final String SERIALIZED_NAME_HAS_COLLABORATIONS = "has_collaborations";
  @SerializedName(SERIALIZED_NAME_HAS_COLLABORATIONS)
  private Boolean hasCollaborations;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map metadata;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_REPRESENTATIONS = "representations";
  @SerializedName(SERIALIZED_NAME_REPRESENTATIONS)
  private Object representations;

  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private Object classification;

  public static final String SERIALIZED_NAME_UPLOADER_DISPLAY_NAME = "uploader_display_name";
  @SerializedName(SERIALIZED_NAME_UPLOADER_DISPLAY_NAME)
  private String uploaderDisplayName;

  public static final String SERIALIZED_NAME_DISPOSITION_AT = "disposition_at";
  @SerializedName(SERIALIZED_NAME_DISPOSITION_AT)
  private OffsetDateTime dispositionAt;

  /**
   * Gets or Sets sharedLinkPermissionOptions
   */
  @JsonAdapter(SharedLinkPermissionOptionsEnum.Adapter.class)
 public enum SharedLinkPermissionOptionsEnum {
    PREVIEW("can_preview"),
    
    DOWNLOAD("can_download"),
    
    EDIT("can_edit");

    private String value;

    SharedLinkPermissionOptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SharedLinkPermissionOptionsEnum fromValue(String value) {
      for (SharedLinkPermissionOptionsEnum b : SharedLinkPermissionOptionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SharedLinkPermissionOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SharedLinkPermissionOptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SharedLinkPermissionOptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SharedLinkPermissionOptionsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SHARED_LINK_PERMISSION_OPTIONS = "shared_link_permission_options";
  @SerializedName(SERIALIZED_NAME_SHARED_LINK_PERMISSION_OPTIONS)
  private List<SharedLinkPermissionOptionsEnum> sharedLinkPermissionOptions = null;

  public FileFullAllOf() {
  }

  public FileFullAllOf tags(List tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List getTags() {
    return tags;
  }


  public void setTags(List tags) {
    
    
    
    this.tags = tags;
  }


  public FileFullAllOf versionNumber(String versionNumber) {
    
    
    
    
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * The version number of this file
   * @return versionNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The version number of this file")

  public String getVersionNumber() {
    return versionNumber;
  }


  public void setVersionNumber(String versionNumber) {
    
    
    
    this.versionNumber = versionNumber;
  }


  public FileFullAllOf commentCount(Integer commentCount) {
    
    
    
    
    this.commentCount = commentCount;
    return this;
  }

   /**
   * The number of comments on this file
   * @return commentCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "The number of comments on this file")

  public Integer getCommentCount() {
    return commentCount;
  }


  public void setCommentCount(Integer commentCount) {
    
    
    
    this.commentCount = commentCount;
  }


  public FileFullAllOf permissions(Object permissions) {
    
    
    
    
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getPermissions() {
    return permissions;
  }


  public void setPermissions(Object permissions) {
    
    
    
    this.permissions = permissions;
  }


  public FileFullAllOf lock(Object lock) {
    
    
    
    
    this.lock = lock;
    return this;
  }

   /**
   * Get lock
   * @return lock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getLock() {
    return lock;
  }


  public void setLock(Object lock) {
    
    
    
    this.lock = lock;
  }


  public FileFullAllOf extension(String extension) {
    
    
    
    
    this.extension = extension;
    return this;
  }

   /**
   * Indicates the (optional) file extension for this file. By default, this is set to an empty string.
   * @return extension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "pdf", value = "Indicates the (optional) file extension for this file. By default, this is set to an empty string.")

  public String getExtension() {
    return extension;
  }


  public void setExtension(String extension) {
    
    
    
    this.extension = extension;
  }


  public FileFullAllOf isPackage(Boolean isPackage) {
    
    
    
    
    this.isPackage = isPackage;
    return this;
  }

   /**
   * Indicates if the file is a package. Packages are commonly used by Mac Applications and can include iWork files.
   * @return isPackage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates if the file is a package. Packages are commonly used by Mac Applications and can include iWork files.")

  public Boolean getIsPackage() {
    return isPackage;
  }


  public void setIsPackage(Boolean isPackage) {
    
    
    
    this.isPackage = isPackage;
  }


  public FileFullAllOf expiringEmbedLink(Object expiringEmbedLink) {
    
    
    
    
    this.expiringEmbedLink = expiringEmbedLink;
    return this;
  }

   /**
   * Get expiringEmbedLink
   * @return expiringEmbedLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getExpiringEmbedLink() {
    return expiringEmbedLink;
  }


  public void setExpiringEmbedLink(Object expiringEmbedLink) {
    
    
    
    this.expiringEmbedLink = expiringEmbedLink;
  }


  public FileFullAllOf watermarkInfo(Object watermarkInfo) {
    
    
    
    
    this.watermarkInfo = watermarkInfo;
    return this;
  }

   /**
   * Get watermarkInfo
   * @return watermarkInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getWatermarkInfo() {
    return watermarkInfo;
  }


  public void setWatermarkInfo(Object watermarkInfo) {
    
    
    
    this.watermarkInfo = watermarkInfo;
  }


  public FileFullAllOf isAccessibleViaSharedLink(IsAccessibleViaSharedLinkEnum isAccessibleViaSharedLink) {
    
    
    
    
    this.isAccessibleViaSharedLink = isAccessibleViaSharedLink;
    return this;
  }

   /**
   * Specifies if the file can be accessed via the direct shared link or a shared link to a parent folder.
   * @return isAccessibleViaSharedLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TRUE", value = "Specifies if the file can be accessed via the direct shared link or a shared link to a parent folder.")

  public IsAccessibleViaSharedLinkEnum getIsAccessibleViaSharedLink() {
    return isAccessibleViaSharedLink;
  }


  public void setIsAccessibleViaSharedLink(IsAccessibleViaSharedLinkEnum isAccessibleViaSharedLink) {
    
    
    
    this.isAccessibleViaSharedLink = isAccessibleViaSharedLink;
  }


  public FileFullAllOf allowedInviteeRoles(List<AllowedInviteeRolesEnum> allowedInviteeRoles) {
    
    
    
    
    this.allowedInviteeRoles = allowedInviteeRoles;
    return this;
  }

  public FileFullAllOf addAllowedInviteeRolesItem(AllowedInviteeRolesEnum allowedInviteeRolesItem) {
    if (this.allowedInviteeRoles == null) {
      this.allowedInviteeRoles = new ArrayList<>();
    }
    this.allowedInviteeRoles.add(allowedInviteeRolesItem);
    return this;
  }

   /**
   * A list of the types of roles that user can be invited at when sharing this file.
   * @return allowedInviteeRoles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"editor\"]", value = "A list of the types of roles that user can be invited at when sharing this file.")

  public List<AllowedInviteeRolesEnum> getAllowedInviteeRoles() {
    return allowedInviteeRoles;
  }


  public void setAllowedInviteeRoles(List<AllowedInviteeRolesEnum> allowedInviteeRoles) {
    
    
    
    this.allowedInviteeRoles = allowedInviteeRoles;
  }


  public FileFullAllOf isExternallyOwned(Boolean isExternallyOwned) {
    
    
    
    
    this.isExternallyOwned = isExternallyOwned;
    return this;
  }

   /**
   * Specifies if this file is owned by a user outside of the authenticated enterprise.
   * @return isExternallyOwned
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies if this file is owned by a user outside of the authenticated enterprise.")

  public Boolean getIsExternallyOwned() {
    return isExternallyOwned;
  }


  public void setIsExternallyOwned(Boolean isExternallyOwned) {
    
    
    
    this.isExternallyOwned = isExternallyOwned;
  }


  public FileFullAllOf hasCollaborations(Boolean hasCollaborations) {
    
    
    
    
    this.hasCollaborations = hasCollaborations;
    return this;
  }

   /**
   * Specifies if this file has any other collaborators.
   * @return hasCollaborations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies if this file has any other collaborators.")

  public Boolean getHasCollaborations() {
    return hasCollaborations;
  }


  public void setHasCollaborations(Boolean hasCollaborations) {
    
    
    
    this.hasCollaborations = hasCollaborations;
  }


  public FileFullAllOf metadata(Map metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map getMetadata() {
    return metadata;
  }


  public void setMetadata(Map metadata) {
    
    
    
    this.metadata = metadata;
  }


  public FileFullAllOf expiresAt(OffsetDateTime expiresAt) {
    
    
    
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * When the file will automatically be deleted
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "When the file will automatically be deleted")

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(OffsetDateTime expiresAt) {
    
    
    
    this.expiresAt = expiresAt;
  }


  public FileFullAllOf representations(Object representations) {
    
    
    
    
    this.representations = representations;
    return this;
  }

   /**
   * Get representations
   * @return representations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getRepresentations() {
    return representations;
  }


  public void setRepresentations(Object representations) {
    
    
    
    this.representations = representations;
  }


  public FileFullAllOf classification(Object classification) {
    
    
    
    
    this.classification = classification;
    return this;
  }

   /**
   * Get classification
   * @return classification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getClassification() {
    return classification;
  }


  public void setClassification(Object classification) {
    
    
    
    this.classification = classification;
  }


  public FileFullAllOf uploaderDisplayName(String uploaderDisplayName) {
    
    
    
    
    this.uploaderDisplayName = uploaderDisplayName;
    return this;
  }

   /**
   * Get uploaderDisplayName
   * @return uploaderDisplayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUploaderDisplayName() {
    return uploaderDisplayName;
  }


  public void setUploaderDisplayName(String uploaderDisplayName) {
    
    
    
    this.uploaderDisplayName = uploaderDisplayName;
  }


  public FileFullAllOf dispositionAt(OffsetDateTime dispositionAt) {
    
    
    
    
    this.dispositionAt = dispositionAt;
    return this;
  }

   /**
   * The retention expiration timestamp for the given file
   * @return dispositionAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "The retention expiration timestamp for the given file")

  public OffsetDateTime getDispositionAt() {
    return dispositionAt;
  }


  public void setDispositionAt(OffsetDateTime dispositionAt) {
    
    
    
    this.dispositionAt = dispositionAt;
  }


  public FileFullAllOf sharedLinkPermissionOptions(List<SharedLinkPermissionOptionsEnum> sharedLinkPermissionOptions) {
    
    
    
    
    this.sharedLinkPermissionOptions = sharedLinkPermissionOptions;
    return this;
  }

  public FileFullAllOf addSharedLinkPermissionOptionsItem(SharedLinkPermissionOptionsEnum sharedLinkPermissionOptionsItem) {
    if (this.sharedLinkPermissionOptions == null) {
      this.sharedLinkPermissionOptions = new ArrayList<>();
    }
    this.sharedLinkPermissionOptions.add(sharedLinkPermissionOptionsItem);
    return this;
  }

   /**
   * A list of the types of roles that user can be invited at when sharing this file.
   * @return sharedLinkPermissionOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"can_preview\"]", value = "A list of the types of roles that user can be invited at when sharing this file.")

  public List<SharedLinkPermissionOptionsEnum> getSharedLinkPermissionOptions() {
    return sharedLinkPermissionOptions;
  }


  public void setSharedLinkPermissionOptions(List<SharedLinkPermissionOptionsEnum> sharedLinkPermissionOptions) {
    
    
    
    this.sharedLinkPermissionOptions = sharedLinkPermissionOptions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FileFullAllOf instance itself
   */
  public FileFullAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileFullAllOf fileFullAllOf = (FileFullAllOf) o;
    return Objects.equals(this.tags, fileFullAllOf.tags) &&
        Objects.equals(this.versionNumber, fileFullAllOf.versionNumber) &&
        Objects.equals(this.commentCount, fileFullAllOf.commentCount) &&
        Objects.equals(this.permissions, fileFullAllOf.permissions) &&
        Objects.equals(this.lock, fileFullAllOf.lock) &&
        Objects.equals(this.extension, fileFullAllOf.extension) &&
        Objects.equals(this.isPackage, fileFullAllOf.isPackage) &&
        Objects.equals(this.expiringEmbedLink, fileFullAllOf.expiringEmbedLink) &&
        Objects.equals(this.watermarkInfo, fileFullAllOf.watermarkInfo) &&
        Objects.equals(this.isAccessibleViaSharedLink, fileFullAllOf.isAccessibleViaSharedLink) &&
        Objects.equals(this.allowedInviteeRoles, fileFullAllOf.allowedInviteeRoles) &&
        Objects.equals(this.isExternallyOwned, fileFullAllOf.isExternallyOwned) &&
        Objects.equals(this.hasCollaborations, fileFullAllOf.hasCollaborations) &&
        Objects.equals(this.metadata, fileFullAllOf.metadata) &&
        Objects.equals(this.expiresAt, fileFullAllOf.expiresAt) &&
        Objects.equals(this.representations, fileFullAllOf.representations) &&
        Objects.equals(this.classification, fileFullAllOf.classification) &&
        Objects.equals(this.uploaderDisplayName, fileFullAllOf.uploaderDisplayName) &&
        Objects.equals(this.dispositionAt, fileFullAllOf.dispositionAt) &&
        Objects.equals(this.sharedLinkPermissionOptions, fileFullAllOf.sharedLinkPermissionOptions)&&
        Objects.equals(this.additionalProperties, fileFullAllOf.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, versionNumber, commentCount, permissions, lock, extension, isPackage, expiringEmbedLink, watermarkInfo, isAccessibleViaSharedLink, allowedInviteeRoles, isExternallyOwned, hasCollaborations, metadata, expiresAt, representations, classification, uploaderDisplayName, dispositionAt, sharedLinkPermissionOptions, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileFullAllOf {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    lock: ").append(toIndentedString(lock)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    isPackage: ").append(toIndentedString(isPackage)).append("\n");
    sb.append("    expiringEmbedLink: ").append(toIndentedString(expiringEmbedLink)).append("\n");
    sb.append("    watermarkInfo: ").append(toIndentedString(watermarkInfo)).append("\n");
    sb.append("    isAccessibleViaSharedLink: ").append(toIndentedString(isAccessibleViaSharedLink)).append("\n");
    sb.append("    allowedInviteeRoles: ").append(toIndentedString(allowedInviteeRoles)).append("\n");
    sb.append("    isExternallyOwned: ").append(toIndentedString(isExternallyOwned)).append("\n");
    sb.append("    hasCollaborations: ").append(toIndentedString(hasCollaborations)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    representations: ").append(toIndentedString(representations)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    uploaderDisplayName: ").append(toIndentedString(uploaderDisplayName)).append("\n");
    sb.append("    dispositionAt: ").append(toIndentedString(dispositionAt)).append("\n");
    sb.append("    sharedLinkPermissionOptions: ").append(toIndentedString(sharedLinkPermissionOptions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("version_number");
    openapiFields.add("comment_count");
    openapiFields.add("permissions");
    openapiFields.add("lock");
    openapiFields.add("extension");
    openapiFields.add("is_package");
    openapiFields.add("expiring_embed_link");
    openapiFields.add("watermark_info");
    openapiFields.add("is_accessible_via_shared_link");
    openapiFields.add("allowed_invitee_roles");
    openapiFields.add("is_externally_owned");
    openapiFields.add("has_collaborations");
    openapiFields.add("metadata");
    openapiFields.add("expires_at");
    openapiFields.add("representations");
    openapiFields.add("classification");
    openapiFields.add("uploader_display_name");
    openapiFields.add("disposition_at");
    openapiFields.add("shared_link_permission_options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FileFullAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FileFullAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileFullAllOf is not found in the empty JSON string", FileFullAllOf.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonObject(jsonObj.getAsJsonObject("tags"));
      }
      if ((jsonObj.get("version_number") != null && !jsonObj.get("version_number").isJsonNull()) && !jsonObj.get("version_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_number").toString()));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("permissions"));
      }
      // validate the optional field `lock`
      if (jsonObj.get("lock") != null && !jsonObj.get("lock").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("lock"));
      }
      if ((jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) && !jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      // validate the optional field `expiring_embed_link`
      if (jsonObj.get("expiring_embed_link") != null && !jsonObj.get("expiring_embed_link").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("expiring_embed_link"));
      }
      // validate the optional field `watermark_info`
      if (jsonObj.get("watermark_info") != null && !jsonObj.get("watermark_info").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("watermark_info"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_invitee_roles") != null && !jsonObj.get("allowed_invitee_roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_invitee_roles` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_invitee_roles").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        Map.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      }
      // validate the optional field `representations`
      if (jsonObj.get("representations") != null && !jsonObj.get("representations").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("representations"));
      }
      // validate the optional field `classification`
      if (jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("classification"));
      }
      // validate the optional field `uploader_display_name`
      if (jsonObj.get("uploader_display_name") != null && !jsonObj.get("uploader_display_name").isJsonNull()) {
        String.validateJsonObject(jsonObj.getAsJsonObject("uploader_display_name"));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("shared_link_permission_options") != null && !jsonObj.get("shared_link_permission_options").isJsonNull() && !jsonObj.get("shared_link_permission_options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared_link_permission_options` to be an array in the JSON string or null but got `%s`", jsonObj.get("shared_link_permission_options").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileFullAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileFullAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileFullAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileFullAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<FileFullAllOf>() {
           @Override
           public void write(JsonWriter out, FileFullAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FileFullAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FileFullAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FileFullAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FileFullAllOf
  * @throws IOException if the JSON string is invalid with respect to FileFullAllOf
  */
  public static FileFullAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileFullAllOf.class);
  }

 /**
  * Convert an instance of FileFullAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

