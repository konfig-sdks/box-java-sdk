/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LegalHoldPolicyMini;
import com.konfigthis.client.model.UserMini;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LegalHoldPolicyAssignmentAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LegalHoldPolicyAssignmentAllOf {
  public static final String SERIALIZED_NAME_LEGAL_HOLD_POLICY = "legal_hold_policy";
  @SerializedName(SERIALIZED_NAME_LEGAL_HOLD_POLICY)
  private LegalHoldPolicyMini legalHoldPolicy;

  public static final String SERIALIZED_NAME_ASSIGNED_TO = "assigned_to";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO)
  private Object assignedTo;

  public static final String SERIALIZED_NAME_ASSIGNED_BY = "assigned_by";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_BY)
  private UserMini assignedBy;

  public static final String SERIALIZED_NAME_ASSIGNED_AT = "assigned_at";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_AT)
  private OffsetDateTime assignedAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public LegalHoldPolicyAssignmentAllOf() {
  }

  public LegalHoldPolicyAssignmentAllOf legalHoldPolicy(LegalHoldPolicyMini legalHoldPolicy) {
    
    
    
    
    this.legalHoldPolicy = legalHoldPolicy;
    return this;
  }

   /**
   * Get legalHoldPolicy
   * @return legalHoldPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LegalHoldPolicyMini getLegalHoldPolicy() {
    return legalHoldPolicy;
  }


  public void setLegalHoldPolicy(LegalHoldPolicyMini legalHoldPolicy) {
    
    
    
    this.legalHoldPolicy = legalHoldPolicy;
  }


  public LegalHoldPolicyAssignmentAllOf assignedTo(Object assignedTo) {
    
    
    
    
    this.assignedTo = assignedTo;
    return this;
  }

   /**
   * Get assignedTo
   * @return assignedTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAssignedTo() {
    return assignedTo;
  }


  public void setAssignedTo(Object assignedTo) {
    
    
    
    this.assignedTo = assignedTo;
  }


  public LegalHoldPolicyAssignmentAllOf assignedBy(UserMini assignedBy) {
    
    
    
    
    this.assignedBy = assignedBy;
    return this;
  }

   /**
   * Get assignedBy
   * @return assignedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserMini getAssignedBy() {
    return assignedBy;
  }


  public void setAssignedBy(UserMini assignedBy) {
    
    
    
    this.assignedBy = assignedBy;
  }


  public LegalHoldPolicyAssignmentAllOf assignedAt(OffsetDateTime assignedAt) {
    
    
    
    
    this.assignedAt = assignedAt;
    return this;
  }

   /**
   * When the legal hold policy assignment object was created
   * @return assignedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "When the legal hold policy assignment object was created")

  public OffsetDateTime getAssignedAt() {
    return assignedAt;
  }


  public void setAssignedAt(OffsetDateTime assignedAt) {
    
    
    
    this.assignedAt = assignedAt;
  }


  public LegalHoldPolicyAssignmentAllOf deletedAt(OffsetDateTime deletedAt) {
    
    
    
    
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * When the assignment release request was sent. (Because it can take time for an assignment to fully delete, this isn&#39;t quite the same time that the assignment is fully deleted). If null, Assignment was not deleted.
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "When the assignment release request was sent. (Because it can take time for an assignment to fully delete, this isn't quite the same time that the assignment is fully deleted). If null, Assignment was not deleted.")

  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }


  public void setDeletedAt(OffsetDateTime deletedAt) {
    
    
    
    this.deletedAt = deletedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LegalHoldPolicyAssignmentAllOf instance itself
   */
  public LegalHoldPolicyAssignmentAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalHoldPolicyAssignmentAllOf legalHoldPolicyAssignmentAllOf = (LegalHoldPolicyAssignmentAllOf) o;
    return Objects.equals(this.legalHoldPolicy, legalHoldPolicyAssignmentAllOf.legalHoldPolicy) &&
        Objects.equals(this.assignedTo, legalHoldPolicyAssignmentAllOf.assignedTo) &&
        Objects.equals(this.assignedBy, legalHoldPolicyAssignmentAllOf.assignedBy) &&
        Objects.equals(this.assignedAt, legalHoldPolicyAssignmentAllOf.assignedAt) &&
        Objects.equals(this.deletedAt, legalHoldPolicyAssignmentAllOf.deletedAt)&&
        Objects.equals(this.additionalProperties, legalHoldPolicyAssignmentAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(legalHoldPolicy, assignedTo, assignedBy, assignedAt, deletedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalHoldPolicyAssignmentAllOf {\n");
    sb.append("    legalHoldPolicy: ").append(toIndentedString(legalHoldPolicy)).append("\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    assignedBy: ").append(toIndentedString(assignedBy)).append("\n");
    sb.append("    assignedAt: ").append(toIndentedString(assignedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("legal_hold_policy");
    openapiFields.add("assigned_to");
    openapiFields.add("assigned_by");
    openapiFields.add("assigned_at");
    openapiFields.add("deleted_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LegalHoldPolicyAssignmentAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LegalHoldPolicyAssignmentAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalHoldPolicyAssignmentAllOf is not found in the empty JSON string", LegalHoldPolicyAssignmentAllOf.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `legal_hold_policy`
      if (jsonObj.get("legal_hold_policy") != null && !jsonObj.get("legal_hold_policy").isJsonNull()) {
        LegalHoldPolicyMini.validateJsonObject(jsonObj.getAsJsonObject("legal_hold_policy"));
      }
      // validate the optional field `assigned_to`
      if (jsonObj.get("assigned_to") != null && !jsonObj.get("assigned_to").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("assigned_to"));
      }
      // validate the optional field `assigned_by`
      if (jsonObj.get("assigned_by") != null && !jsonObj.get("assigned_by").isJsonNull()) {
        UserMini.validateJsonObject(jsonObj.getAsJsonObject("assigned_by"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalHoldPolicyAssignmentAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalHoldPolicyAssignmentAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalHoldPolicyAssignmentAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalHoldPolicyAssignmentAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalHoldPolicyAssignmentAllOf>() {
           @Override
           public void write(JsonWriter out, LegalHoldPolicyAssignmentAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalHoldPolicyAssignmentAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LegalHoldPolicyAssignmentAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LegalHoldPolicyAssignmentAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LegalHoldPolicyAssignmentAllOf
  * @throws IOException if the JSON string is invalid with respect to LegalHoldPolicyAssignmentAllOf
  */
  public static LegalHoldPolicyAssignmentAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalHoldPolicyAssignmentAllOf.class);
  }

 /**
  * Convert an instance of LegalHoldPolicyAssignmentAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

