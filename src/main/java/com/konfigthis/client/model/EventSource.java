/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EventSourceClassification;
import com.konfigthis.client.model.FileVersionMini;
import com.konfigthis.client.model.FolderAllOfFolderUploadEmail;
import com.konfigthis.client.model.FolderMini;
import com.konfigthis.client.model.Items;
import com.konfigthis.client.model.UserAllOfNotificationEmail;
import com.konfigthis.client.model.UserMini;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EventSource
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EventSource {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * &#x60;folder&#x60;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    FOLDER("folder");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_SPACE_AMOUNT = "space_amount";
  @SerializedName(SERIALIZED_NAME_SPACE_AMOUNT)
  private Long spaceAmount;

  public static final String SERIALIZED_NAME_SPACE_USED = "space_used";
  @SerializedName(SERIALIZED_NAME_SPACE_USED)
  private Long spaceUsed;

  public static final String SERIALIZED_NAME_MAX_UPLOAD_SIZE = "max_upload_size";
  @SerializedName(SERIALIZED_NAME_MAX_UPLOAD_SIZE)
  private Long maxUploadSize;

  /**
   * The user&#39;s account status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("active"),
    
    INACTIVE("inactive"),
    
    CANNOT_DELETE_EDIT("cannot_delete_edit"),
    
    CANNOT_DELETE_EDIT_UPLOAD("cannot_delete_edit_upload");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_NOTIFICATION_EMAIL = "notification_email";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_EMAIL)
  private UserAllOfNotificationEmail notificationEmail;

  /**
   * The type of the item that the event represents. Can be &#x60;file&#x60; or &#x60;folder&#x60;. 
   */
  @JsonAdapter(ItemTypeEnum.Adapter.class)
 public enum ItemTypeEnum {
    FILE("file"),
    
    FOLDER("folder");

    private String value;

    ItemTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemTypeEnum fromValue(String value) {
      for (ItemTypeEnum b : ItemTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ItemTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ItemTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ITEM_TYPE = "item_type";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private ItemTypeEnum itemType;

  public static final String SERIALIZED_NAME_ITEM_ID = "item_id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_ITEM_NAME = "item_name";
  @SerializedName(SERIALIZED_NAME_ITEM_NAME)
  private String itemName;

  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private EventSourceClassification classification;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private FolderMini parent;

  public static final String SERIALIZED_NAME_OWNED_BY = "owned_by";
  @SerializedName(SERIALIZED_NAME_OWNED_BY)
  private UserMini ownedBy;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_SEQUENCE_ID = "sequence_id";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_ID)
  private String sequenceId;

  public static final String SERIALIZED_NAME_SHA1 = "sha1";
  @SerializedName(SERIALIZED_NAME_SHA1)
  private String sha1;

  public static final String SERIALIZED_NAME_FILE_VERSION = "file_version";
  @SerializedName(SERIALIZED_NAME_FILE_VERSION)
  private FileVersionMini fileVersion;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_PATH_COLLECTION = "path_collection";
  @SerializedName(SERIALIZED_NAME_PATH_COLLECTION)
  private Object pathCollection;

  public static final String SERIALIZED_NAME_TRASHED_AT = "trashed_at";
  @SerializedName(SERIALIZED_NAME_TRASHED_AT)
  private OffsetDateTime trashedAt;

  public static final String SERIALIZED_NAME_PURGED_AT = "purged_at";
  @SerializedName(SERIALIZED_NAME_PURGED_AT)
  private OffsetDateTime purgedAt;

  public static final String SERIALIZED_NAME_CONTENT_CREATED_AT = "content_created_at";
  @SerializedName(SERIALIZED_NAME_CONTENT_CREATED_AT)
  private OffsetDateTime contentCreatedAt;

  public static final String SERIALIZED_NAME_CONTENT_MODIFIED_AT = "content_modified_at";
  @SerializedName(SERIALIZED_NAME_CONTENT_MODIFIED_AT)
  private OffsetDateTime contentModifiedAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserMini createdBy;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modified_by";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private UserMini modifiedBy;

  public static final String SERIALIZED_NAME_SHARED_LINK = "shared_link";
  @SerializedName(SERIALIZED_NAME_SHARED_LINK)
  private Object sharedLink;

  /**
   * Defines if this item has been deleted or not.  * &#x60;active&#x60; when the item has is not in the trash * &#x60;trashed&#x60; when the item has been moved to the trash but not deleted * &#x60;deleted&#x60; when the item has been permanently deleted.
   */
  @JsonAdapter(ItemStatusEnum.Adapter.class)
 public enum ItemStatusEnum {
    ACTIVE("active"),
    
    TRASHED("trashed"),
    
    DELETED("deleted");

    private String value;

    ItemStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemStatusEnum fromValue(String value) {
      for (ItemStatusEnum b : ItemStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ItemStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ItemStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ITEM_STATUS = "item_status";
  @SerializedName(SERIALIZED_NAME_ITEM_STATUS)
  private ItemStatusEnum itemStatus;

  public static final String SERIALIZED_NAME_FOLDER_UPLOAD_EMAIL = "folder_upload_email";
  @SerializedName(SERIALIZED_NAME_FOLDER_UPLOAD_EMAIL)
  private FolderAllOfFolderUploadEmail folderUploadEmail;

  public static final String SERIALIZED_NAME_ITEM_COLLECTION = "item_collection";
  @SerializedName(SERIALIZED_NAME_ITEM_COLLECTION)
  private Items itemCollection;

  public EventSource() {
  }

  public EventSource id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier that represent a folder.  The ID for any folder can be determined by visiting a folder in the web application and copying the ID from the URL. For example, for the URL &#x60;https://_*.app.box.com/folders/123&#x60; the &#x60;folder_id&#x60; is &#x60;123&#x60;.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "12345", required = true, value = "The unique identifier that represent a folder.  The ID for any folder can be determined by visiting a folder in the web application and copying the ID from the URL. For example, for the URL `https://_*.app.box.com/folders/123` the `folder_id` is `123`.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public EventSource type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * &#x60;folder&#x60;
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "FOLDER", required = true, value = "`folder`")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public EventSource name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the folder.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Contracts", value = "The name of the folder.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public EventSource login(String login) {
    
    
    
    
    this.login = login;
    return this;
  }

   /**
   * The primary email address of this user
   * @return login
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ceo@example.com", value = "The primary email address of this user")

  public String getLogin() {
    return login;
  }


  public void setLogin(String login) {
    
    
    
    this.login = login;
  }


  public EventSource createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when the folder was created. This value may be &#x60;null&#x60; for some folders such as the root folder or the trash folder.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "The date and time when the folder was created. This value may be `null` for some folders such as the root folder or the trash folder.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public EventSource modifiedAt(OffsetDateTime modifiedAt) {
    
    
    
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * The date and time when the folder was last updated. This value may be &#x60;null&#x60; for some folders such as the root folder or the trash folder.
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "The date and time when the folder was last updated. This value may be `null` for some folders such as the root folder or the trash folder.")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(OffsetDateTime modifiedAt) {
    
    
    
    this.modifiedAt = modifiedAt;
  }


  public EventSource language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * The language of the user, formatted in modified version of the [ISO 639-1](https://raw.githubusercontent.com) format.
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en", value = "The language of the user, formatted in modified version of the [ISO 639-1](https://raw.githubusercontent.com) format.")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public EventSource timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The user&#39;s timezone
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Africa/Bujumbura", value = "The user's timezone")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public EventSource spaceAmount(Long spaceAmount) {
    
    
    
    
    this.spaceAmount = spaceAmount;
    return this;
  }

   /**
   * The user’s total available space amount in bytes
   * @return spaceAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11345156112", value = "The user’s total available space amount in bytes")

  public Long getSpaceAmount() {
    return spaceAmount;
  }


  public void setSpaceAmount(Long spaceAmount) {
    
    
    
    this.spaceAmount = spaceAmount;
  }


  public EventSource spaceUsed(Long spaceUsed) {
    
    
    
    
    this.spaceUsed = spaceUsed;
    return this;
  }

   /**
   * The amount of space in use by the user
   * @return spaceUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1237009912", value = "The amount of space in use by the user")

  public Long getSpaceUsed() {
    return spaceUsed;
  }


  public void setSpaceUsed(Long spaceUsed) {
    
    
    
    this.spaceUsed = spaceUsed;
  }


  public EventSource maxUploadSize(Long maxUploadSize) {
    
    
    
    
    this.maxUploadSize = maxUploadSize;
    return this;
  }

   /**
   * The maximum individual file size in bytes the user can have
   * @return maxUploadSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2147483648", value = "The maximum individual file size in bytes the user can have")

  public Long getMaxUploadSize() {
    return maxUploadSize;
  }


  public void setMaxUploadSize(Long maxUploadSize) {
    
    
    
    this.maxUploadSize = maxUploadSize;
  }


  public EventSource status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The user&#39;s account status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACTIVE", value = "The user's account status")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public EventSource jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * The user’s job title
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CEO", value = "The user’s job title")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public EventSource phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * The user’s phone number
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6509241374", value = "The user’s phone number")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public EventSource address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * The user’s address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "900 Jefferson Ave, Redwood City, CA 94063", value = "The user’s address")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public EventSource avatarUrl(String avatarUrl) {
    
    
    
    
    this.avatarUrl = avatarUrl;
    return this;
  }

   /**
   * URL of the user’s avatar image
   * @return avatarUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.box.com/api/avatar/large/181216415", value = "URL of the user’s avatar image")

  public String getAvatarUrl() {
    return avatarUrl;
  }


  public void setAvatarUrl(String avatarUrl) {
    
    
    
    this.avatarUrl = avatarUrl;
  }


  public EventSource notificationEmail(UserAllOfNotificationEmail notificationEmail) {
    
    
    
    
    this.notificationEmail = notificationEmail;
    return this;
  }

   /**
   * Get notificationEmail
   * @return notificationEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserAllOfNotificationEmail getNotificationEmail() {
    return notificationEmail;
  }


  public void setNotificationEmail(UserAllOfNotificationEmail notificationEmail) {
    
    
    
    this.notificationEmail = notificationEmail;
  }


  public EventSource itemType(ItemTypeEnum itemType) {
    
    
    
    
    this.itemType = itemType;
    return this;
  }

   /**
   * The type of the item that the event represents. Can be &#x60;file&#x60; or &#x60;folder&#x60;. 
   * @return itemType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "FILE", required = true, value = "The type of the item that the event represents. Can be `file` or `folder`. ")

  public ItemTypeEnum getItemType() {
    return itemType;
  }


  public void setItemType(ItemTypeEnum itemType) {
    
    
    
    this.itemType = itemType;
  }


  public EventSource itemId(String itemId) {
    
    
    
    
    this.itemId = itemId;
    return this;
  }

   /**
   * The unique identifier that represents the item. 
   * @return itemId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "560284318361", required = true, value = "The unique identifier that represents the item. ")

  public String getItemId() {
    return itemId;
  }


  public void setItemId(String itemId) {
    
    
    
    this.itemId = itemId;
  }


  public EventSource itemName(String itemName) {
    
    
    
    
    this.itemName = itemName;
    return this;
  }

   /**
   * The name of the item. 
   * @return itemName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "report.pdf", required = true, value = "The name of the item. ")

  public String getItemName() {
    return itemName;
  }


  public void setItemName(String itemName) {
    
    
    
    this.itemName = itemName;
  }


  public EventSource classification(EventSourceClassification classification) {
    
    
    
    
    this.classification = classification;
    return this;
  }

   /**
   * Get classification
   * @return classification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EventSourceClassification getClassification() {
    return classification;
  }


  public void setClassification(EventSourceClassification classification) {
    
    
    
    this.classification = classification;
  }


  public EventSource parent(FolderMini parent) {
    
    
    
    
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FolderMini getParent() {
    return parent;
  }


  public void setParent(FolderMini parent) {
    
    
    
    this.parent = parent;
  }


  public EventSource ownedBy(UserMini ownedBy) {
    
    
    
    
    this.ownedBy = ownedBy;
    return this;
  }

   /**
   * Get ownedBy
   * @return ownedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserMini getOwnedBy() {
    return ownedBy;
  }


  public void setOwnedBy(UserMini ownedBy) {
    
    
    
    this.ownedBy = ownedBy;
  }


  public EventSource etag(String etag) {
    
    
    
    
    this.etag = etag;
    return this;
  }

   /**
   * The HTTP &#x60;etag&#x60; of this folder. This can be used within some API endpoints in the &#x60;If-Match&#x60; and &#x60;If-None-Match&#x60; headers to only perform changes on the folder if (no) changes have happened.
   * @return etag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The HTTP `etag` of this folder. This can be used within some API endpoints in the `If-Match` and `If-None-Match` headers to only perform changes on the folder if (no) changes have happened.")

  public String getEtag() {
    return etag;
  }


  public void setEtag(String etag) {
    
    
    
    this.etag = etag;
  }


  public EventSource sequenceId(String sequenceId) {
    
    
    
    
    this.sequenceId = sequenceId;
    return this;
  }

   /**
   * Get sequenceId
   * @return sequenceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSequenceId() {
    return sequenceId;
  }


  public void setSequenceId(String sequenceId) {
    
    
    
    this.sequenceId = sequenceId;
  }


  public EventSource sha1(String sha1) {
    
    
    
    
    this.sha1 = sha1;
    return this;
  }

   /**
   * The SHA1 hash of the file. This can be used to compare the contents of a file on Box with a local file.
   * @return sha1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "85136C79CBF9FE36BB9D05D0639C70C265C18D37", value = "The SHA1 hash of the file. This can be used to compare the contents of a file on Box with a local file.")

  public String getSha1() {
    return sha1;
  }


  public void setSha1(String sha1) {
    
    
    
    this.sha1 = sha1;
  }


  public EventSource fileVersion(FileVersionMini fileVersion) {
    
    
    
    
    this.fileVersion = fileVersion;
    return this;
  }

   /**
   * Get fileVersion
   * @return fileVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FileVersionMini getFileVersion() {
    return fileVersion;
  }


  public void setFileVersion(FileVersionMini fileVersion) {
    
    
    
    this.fileVersion = fileVersion;
  }


  public EventSource description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public EventSource size(Long size) {
    
    
    
    
    this.size = size;
    return this;
  }

   /**
   * The folder size in bytes.  Be careful parsing this integer as its value can get very large.
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "629644", value = "The folder size in bytes.  Be careful parsing this integer as its value can get very large.")

  public Long getSize() {
    return size;
  }


  public void setSize(Long size) {
    
    
    
    this.size = size;
  }


  public EventSource pathCollection(Object pathCollection) {
    
    
    
    
    this.pathCollection = pathCollection;
    return this;
  }

   /**
   * Get pathCollection
   * @return pathCollection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getPathCollection() {
    return pathCollection;
  }


  public void setPathCollection(Object pathCollection) {
    
    
    
    this.pathCollection = pathCollection;
  }


  public EventSource trashedAt(OffsetDateTime trashedAt) {
    
    
    
    
    this.trashedAt = trashedAt;
    return this;
  }

   /**
   * The time at which this folder was put in the trash.
   * @return trashedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "The time at which this folder was put in the trash.")

  public OffsetDateTime getTrashedAt() {
    return trashedAt;
  }


  public void setTrashedAt(OffsetDateTime trashedAt) {
    
    
    
    this.trashedAt = trashedAt;
  }


  public EventSource purgedAt(OffsetDateTime purgedAt) {
    
    
    
    
    this.purgedAt = purgedAt;
    return this;
  }

   /**
   * The time at which this folder is expected to be purged from the trash.
   * @return purgedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "The time at which this folder is expected to be purged from the trash.")

  public OffsetDateTime getPurgedAt() {
    return purgedAt;
  }


  public void setPurgedAt(OffsetDateTime purgedAt) {
    
    
    
    this.purgedAt = purgedAt;
  }


  public EventSource contentCreatedAt(OffsetDateTime contentCreatedAt) {
    
    
    
    
    this.contentCreatedAt = contentCreatedAt;
    return this;
  }

   /**
   * The date and time at which this folder was originally created.
   * @return contentCreatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "The date and time at which this folder was originally created.")

  public OffsetDateTime getContentCreatedAt() {
    return contentCreatedAt;
  }


  public void setContentCreatedAt(OffsetDateTime contentCreatedAt) {
    
    
    
    this.contentCreatedAt = contentCreatedAt;
  }


  public EventSource contentModifiedAt(OffsetDateTime contentModifiedAt) {
    
    
    
    
    this.contentModifiedAt = contentModifiedAt;
    return this;
  }

   /**
   * The date and time at which this folder was last updated.
   * @return contentModifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "The date and time at which this folder was last updated.")

  public OffsetDateTime getContentModifiedAt() {
    return contentModifiedAt;
  }


  public void setContentModifiedAt(OffsetDateTime contentModifiedAt) {
    
    
    
    this.contentModifiedAt = contentModifiedAt;
  }


  public EventSource createdBy(UserMini createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserMini getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(UserMini createdBy) {
    
    
    
    this.createdBy = createdBy;
  }


  public EventSource modifiedBy(UserMini modifiedBy) {
    
    
    
    
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * Get modifiedBy
   * @return modifiedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserMini getModifiedBy() {
    return modifiedBy;
  }


  public void setModifiedBy(UserMini modifiedBy) {
    
    
    
    this.modifiedBy = modifiedBy;
  }


  public EventSource sharedLink(Object sharedLink) {
    
    
    
    
    this.sharedLink = sharedLink;
    return this;
  }

   /**
   * Get sharedLink
   * @return sharedLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getSharedLink() {
    return sharedLink;
  }


  public void setSharedLink(Object sharedLink) {
    
    
    
    this.sharedLink = sharedLink;
  }


  public EventSource itemStatus(ItemStatusEnum itemStatus) {
    
    
    
    
    this.itemStatus = itemStatus;
    return this;
  }

   /**
   * Defines if this item has been deleted or not.  * &#x60;active&#x60; when the item has is not in the trash * &#x60;trashed&#x60; when the item has been moved to the trash but not deleted * &#x60;deleted&#x60; when the item has been permanently deleted.
   * @return itemStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACTIVE", value = "Defines if this item has been deleted or not.  * `active` when the item has is not in the trash * `trashed` when the item has been moved to the trash but not deleted * `deleted` when the item has been permanently deleted.")

  public ItemStatusEnum getItemStatus() {
    return itemStatus;
  }


  public void setItemStatus(ItemStatusEnum itemStatus) {
    
    
    
    this.itemStatus = itemStatus;
  }


  public EventSource folderUploadEmail(FolderAllOfFolderUploadEmail folderUploadEmail) {
    
    
    
    
    this.folderUploadEmail = folderUploadEmail;
    return this;
  }

   /**
   * Get folderUploadEmail
   * @return folderUploadEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FolderAllOfFolderUploadEmail getFolderUploadEmail() {
    return folderUploadEmail;
  }


  public void setFolderUploadEmail(FolderAllOfFolderUploadEmail folderUploadEmail) {
    
    
    
    this.folderUploadEmail = folderUploadEmail;
  }


  public EventSource itemCollection(Items itemCollection) {
    
    
    
    
    this.itemCollection = itemCollection;
    return this;
  }

   /**
   * Get itemCollection
   * @return itemCollection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Items getItemCollection() {
    return itemCollection;
  }


  public void setItemCollection(Items itemCollection) {
    
    
    
    this.itemCollection = itemCollection;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EventSource instance itself
   */
  public EventSource putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSource eventSource = (EventSource) o;
    return Objects.equals(this.id, eventSource.id) &&
        Objects.equals(this.type, eventSource.type) &&
        Objects.equals(this.name, eventSource.name) &&
        Objects.equals(this.login, eventSource.login) &&
        Objects.equals(this.createdAt, eventSource.createdAt) &&
        Objects.equals(this.modifiedAt, eventSource.modifiedAt) &&
        Objects.equals(this.language, eventSource.language) &&
        Objects.equals(this.timezone, eventSource.timezone) &&
        Objects.equals(this.spaceAmount, eventSource.spaceAmount) &&
        Objects.equals(this.spaceUsed, eventSource.spaceUsed) &&
        Objects.equals(this.maxUploadSize, eventSource.maxUploadSize) &&
        Objects.equals(this.status, eventSource.status) &&
        Objects.equals(this.jobTitle, eventSource.jobTitle) &&
        Objects.equals(this.phone, eventSource.phone) &&
        Objects.equals(this.address, eventSource.address) &&
        Objects.equals(this.avatarUrl, eventSource.avatarUrl) &&
        Objects.equals(this.notificationEmail, eventSource.notificationEmail) &&
        Objects.equals(this.itemType, eventSource.itemType) &&
        Objects.equals(this.itemId, eventSource.itemId) &&
        Objects.equals(this.itemName, eventSource.itemName) &&
        Objects.equals(this.classification, eventSource.classification) &&
        Objects.equals(this.parent, eventSource.parent) &&
        Objects.equals(this.ownedBy, eventSource.ownedBy) &&
        Objects.equals(this.etag, eventSource.etag) &&
        Objects.equals(this.sequenceId, eventSource.sequenceId) &&
        Objects.equals(this.sha1, eventSource.sha1) &&
        Objects.equals(this.fileVersion, eventSource.fileVersion) &&
        Objects.equals(this.description, eventSource.description) &&
        Objects.equals(this.size, eventSource.size) &&
        Objects.equals(this.pathCollection, eventSource.pathCollection) &&
        Objects.equals(this.trashedAt, eventSource.trashedAt) &&
        Objects.equals(this.purgedAt, eventSource.purgedAt) &&
        Objects.equals(this.contentCreatedAt, eventSource.contentCreatedAt) &&
        Objects.equals(this.contentModifiedAt, eventSource.contentModifiedAt) &&
        Objects.equals(this.createdBy, eventSource.createdBy) &&
        Objects.equals(this.modifiedBy, eventSource.modifiedBy) &&
        Objects.equals(this.sharedLink, eventSource.sharedLink) &&
        Objects.equals(this.itemStatus, eventSource.itemStatus) &&
        Objects.equals(this.folderUploadEmail, eventSource.folderUploadEmail) &&
        Objects.equals(this.itemCollection, eventSource.itemCollection)&&
        Objects.equals(this.additionalProperties, eventSource.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, name, login, createdAt, modifiedAt, language, timezone, spaceAmount, spaceUsed, maxUploadSize, status, jobTitle, phone, address, avatarUrl, notificationEmail, itemType, itemId, itemName, classification, parent, ownedBy, etag, sequenceId, sha1, fileVersion, description, size, pathCollection, trashedAt, purgedAt, contentCreatedAt, contentModifiedAt, createdBy, modifiedBy, sharedLink, itemStatus, folderUploadEmail, itemCollection, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSource {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    spaceAmount: ").append(toIndentedString(spaceAmount)).append("\n");
    sb.append("    spaceUsed: ").append(toIndentedString(spaceUsed)).append("\n");
    sb.append("    maxUploadSize: ").append(toIndentedString(maxUploadSize)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    notificationEmail: ").append(toIndentedString(notificationEmail)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemName: ").append(toIndentedString(itemName)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    ownedBy: ").append(toIndentedString(ownedBy)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    sequenceId: ").append(toIndentedString(sequenceId)).append("\n");
    sb.append("    sha1: ").append(toIndentedString(sha1)).append("\n");
    sb.append("    fileVersion: ").append(toIndentedString(fileVersion)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    pathCollection: ").append(toIndentedString(pathCollection)).append("\n");
    sb.append("    trashedAt: ").append(toIndentedString(trashedAt)).append("\n");
    sb.append("    purgedAt: ").append(toIndentedString(purgedAt)).append("\n");
    sb.append("    contentCreatedAt: ").append(toIndentedString(contentCreatedAt)).append("\n");
    sb.append("    contentModifiedAt: ").append(toIndentedString(contentModifiedAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    sharedLink: ").append(toIndentedString(sharedLink)).append("\n");
    sb.append("    itemStatus: ").append(toIndentedString(itemStatus)).append("\n");
    sb.append("    folderUploadEmail: ").append(toIndentedString(folderUploadEmail)).append("\n");
    sb.append("    itemCollection: ").append(toIndentedString(itemCollection)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("name");
    openapiFields.add("login");
    openapiFields.add("created_at");
    openapiFields.add("modified_at");
    openapiFields.add("language");
    openapiFields.add("timezone");
    openapiFields.add("space_amount");
    openapiFields.add("space_used");
    openapiFields.add("max_upload_size");
    openapiFields.add("status");
    openapiFields.add("job_title");
    openapiFields.add("phone");
    openapiFields.add("address");
    openapiFields.add("avatar_url");
    openapiFields.add("notification_email");
    openapiFields.add("item_type");
    openapiFields.add("item_id");
    openapiFields.add("item_name");
    openapiFields.add("classification");
    openapiFields.add("parent");
    openapiFields.add("owned_by");
    openapiFields.add("etag");
    openapiFields.add("sequence_id");
    openapiFields.add("sha1");
    openapiFields.add("file_version");
    openapiFields.add("description");
    openapiFields.add("size");
    openapiFields.add("path_collection");
    openapiFields.add("trashed_at");
    openapiFields.add("purged_at");
    openapiFields.add("content_created_at");
    openapiFields.add("content_modified_at");
    openapiFields.add("created_by");
    openapiFields.add("modified_by");
    openapiFields.add("shared_link");
    openapiFields.add("item_status");
    openapiFields.add("folder_upload_email");
    openapiFields.add("item_collection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("item_type");
    openapiRequiredFields.add("item_id");
    openapiRequiredFields.add("item_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventSource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EventSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventSource is not found in the empty JSON string", EventSource.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventSource.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("login") != null && !jsonObj.get("login").isJsonNull()) && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("job_title") != null && !jsonObj.get("job_title").isJsonNull()) && !jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      // validate the optional field `notification_email`
      if (jsonObj.get("notification_email") != null && !jsonObj.get("notification_email").isJsonNull()) {
        UserAllOfNotificationEmail.validateJsonObject(jsonObj.getAsJsonObject("notification_email"));
      }
      if (!jsonObj.get("item_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_type").toString()));
      }
      if (!jsonObj.get("item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_id").toString()));
      }
      if (!jsonObj.get("item_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_name").toString()));
      }
      // validate the optional field `classification`
      if (jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull()) {
        EventSourceClassification.validateJsonObject(jsonObj.getAsJsonObject("classification"));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        FolderMini.validateJsonObject(jsonObj.getAsJsonObject("parent"));
      }
      // validate the optional field `owned_by`
      if (jsonObj.get("owned_by") != null && !jsonObj.get("owned_by").isJsonNull()) {
        UserMini.validateJsonObject(jsonObj.getAsJsonObject("owned_by"));
      }
      if (!jsonObj.get("etag").isJsonNull() && (jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the optional field `sequence_id`
      if (jsonObj.get("sequence_id") != null && !jsonObj.get("sequence_id").isJsonNull()) {
        String.validateJsonObject(jsonObj.getAsJsonObject("sequence_id"));
      }
      if ((jsonObj.get("sha1") != null && !jsonObj.get("sha1").isJsonNull()) && !jsonObj.get("sha1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha1").toString()));
      }
      // validate the optional field `file_version`
      if (jsonObj.get("file_version") != null && !jsonObj.get("file_version").isJsonNull()) {
        FileVersionMini.validateJsonObject(jsonObj.getAsJsonObject("file_version"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonObject(jsonObj.getAsJsonObject("description"));
      }
      // validate the optional field `path_collection`
      if (jsonObj.get("path_collection") != null && !jsonObj.get("path_collection").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("path_collection"));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        UserMini.validateJsonObject(jsonObj.getAsJsonObject("created_by"));
      }
      // validate the optional field `modified_by`
      if (jsonObj.get("modified_by") != null && !jsonObj.get("modified_by").isJsonNull()) {
        UserMini.validateJsonObject(jsonObj.getAsJsonObject("modified_by"));
      }
      // validate the optional field `shared_link`
      if (jsonObj.get("shared_link") != null && !jsonObj.get("shared_link").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("shared_link"));
      }
      if ((jsonObj.get("item_status") != null && !jsonObj.get("item_status").isJsonNull()) && !jsonObj.get("item_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_status").toString()));
      }
      // validate the optional field `folder_upload_email`
      if (jsonObj.get("folder_upload_email") != null && !jsonObj.get("folder_upload_email").isJsonNull()) {
        FolderAllOfFolderUploadEmail.validateJsonObject(jsonObj.getAsJsonObject("folder_upload_email"));
      }
      // validate the optional field `item_collection`
      if (jsonObj.get("item_collection") != null && !jsonObj.get("item_collection").isJsonNull()) {
        Items.validateJsonObject(jsonObj.getAsJsonObject("item_collection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventSource.class));

       return (TypeAdapter<T>) new TypeAdapter<EventSource>() {
           @Override
           public void write(JsonWriter out, EventSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EventSource read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EventSource instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventSource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventSource
  * @throws IOException if the JSON string is invalid with respect to EventSource
  */
  public static EventSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventSource.class);
  }

 /**
  * Convert an instance of EventSource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

