/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LegalHoldPoliciesCreateNewPolicyRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LegalHoldPoliciesCreateNewPolicyRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policy_name";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_FILTER_STARTED_AT = "filter_started_at";
  @SerializedName(SERIALIZED_NAME_FILTER_STARTED_AT)
  private OffsetDateTime filterStartedAt;

  public static final String SERIALIZED_NAME_FILTER_ENDED_AT = "filter_ended_at";
  @SerializedName(SERIALIZED_NAME_FILTER_ENDED_AT)
  private OffsetDateTime filterEndedAt;

  public static final String SERIALIZED_NAME_IS_ONGOING = "is_ongoing";
  @SerializedName(SERIALIZED_NAME_IS_ONGOING)
  private Boolean isOngoing;

  public LegalHoldPoliciesCreateNewPolicyRequest() {
  }

  public LegalHoldPoliciesCreateNewPolicyRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for the policy.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "A custom policy for the sales team", value = "A description for the policy.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public LegalHoldPoliciesCreateNewPolicyRequest policyName(String policyName) {
    
    
    
    
    this.policyName = policyName;
    return this;
  }

   /**
   * The name of the policy.
   * @return policyName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Sales Policy", required = true, value = "The name of the policy.")

  public String getPolicyName() {
    return policyName;
  }


  public void setPolicyName(String policyName) {
    
    
    
    this.policyName = policyName;
  }


  public LegalHoldPoliciesCreateNewPolicyRequest filterStartedAt(OffsetDateTime filterStartedAt) {
    
    
    
    
    this.filterStartedAt = filterStartedAt;
    return this;
  }

   /**
   * The filter start date.  When this policy is applied using a &#x60;custodian&#x60; legal hold assignments, it will only apply to file versions created or uploaded inside of the date range. Other assignment types, such as folders and files, will ignore the date filter.  Required if &#x60;is_ongoing&#x60; is set to &#x60;false&#x60;.
   * @return filterStartedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "The filter start date.  When this policy is applied using a `custodian` legal hold assignments, it will only apply to file versions created or uploaded inside of the date range. Other assignment types, such as folders and files, will ignore the date filter.  Required if `is_ongoing` is set to `false`.")

  public OffsetDateTime getFilterStartedAt() {
    return filterStartedAt;
  }


  public void setFilterStartedAt(OffsetDateTime filterStartedAt) {
    
    
    
    this.filterStartedAt = filterStartedAt;
  }


  public LegalHoldPoliciesCreateNewPolicyRequest filterEndedAt(OffsetDateTime filterEndedAt) {
    
    
    
    
    this.filterEndedAt = filterEndedAt;
    return this;
  }

   /**
   * The filter end date.  When this policy is applied using a &#x60;custodian&#x60; legal hold assignments, it will only apply to file versions created or uploaded inside of the date range. Other assignment types, such as folders and files, will ignore the date filter.  Required if &#x60;is_ongoing&#x60; is set to &#x60;false&#x60;.
   * @return filterEndedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-18T10:53:43-08:00", value = "The filter end date.  When this policy is applied using a `custodian` legal hold assignments, it will only apply to file versions created or uploaded inside of the date range. Other assignment types, such as folders and files, will ignore the date filter.  Required if `is_ongoing` is set to `false`.")

  public OffsetDateTime getFilterEndedAt() {
    return filterEndedAt;
  }


  public void setFilterEndedAt(OffsetDateTime filterEndedAt) {
    
    
    
    this.filterEndedAt = filterEndedAt;
  }


  public LegalHoldPoliciesCreateNewPolicyRequest isOngoing(Boolean isOngoing) {
    
    
    
    
    this.isOngoing = isOngoing;
    return this;
  }

   /**
   * Whether new assignments under this policy should continue applying to files even after initialization.  When this policy is applied using a legal hold assignment, it will continue applying the policy to any new file versions even after it has been applied.  For example, if a legal hold assignment is placed on a user today, and that user uploads a file tomorrow, that file will get held. This will continue until the policy is retired.  Required if no filter dates are set.
   * @return isOngoing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether new assignments under this policy should continue applying to files even after initialization.  When this policy is applied using a legal hold assignment, it will continue applying the policy to any new file versions even after it has been applied.  For example, if a legal hold assignment is placed on a user today, and that user uploads a file tomorrow, that file will get held. This will continue until the policy is retired.  Required if no filter dates are set.")

  public Boolean getIsOngoing() {
    return isOngoing;
  }


  public void setIsOngoing(Boolean isOngoing) {
    
    
    
    this.isOngoing = isOngoing;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LegalHoldPoliciesCreateNewPolicyRequest instance itself
   */
  public LegalHoldPoliciesCreateNewPolicyRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalHoldPoliciesCreateNewPolicyRequest legalHoldPoliciesCreateNewPolicyRequest = (LegalHoldPoliciesCreateNewPolicyRequest) o;
    return Objects.equals(this.description, legalHoldPoliciesCreateNewPolicyRequest.description) &&
        Objects.equals(this.policyName, legalHoldPoliciesCreateNewPolicyRequest.policyName) &&
        Objects.equals(this.filterStartedAt, legalHoldPoliciesCreateNewPolicyRequest.filterStartedAt) &&
        Objects.equals(this.filterEndedAt, legalHoldPoliciesCreateNewPolicyRequest.filterEndedAt) &&
        Objects.equals(this.isOngoing, legalHoldPoliciesCreateNewPolicyRequest.isOngoing)&&
        Objects.equals(this.additionalProperties, legalHoldPoliciesCreateNewPolicyRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, policyName, filterStartedAt, filterEndedAt, isOngoing, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalHoldPoliciesCreateNewPolicyRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    filterStartedAt: ").append(toIndentedString(filterStartedAt)).append("\n");
    sb.append("    filterEndedAt: ").append(toIndentedString(filterEndedAt)).append("\n");
    sb.append("    isOngoing: ").append(toIndentedString(isOngoing)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("policy_name");
    openapiFields.add("filter_started_at");
    openapiFields.add("filter_ended_at");
    openapiFields.add("is_ongoing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("policy_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LegalHoldPoliciesCreateNewPolicyRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LegalHoldPoliciesCreateNewPolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalHoldPoliciesCreateNewPolicyRequest is not found in the empty JSON string", LegalHoldPoliciesCreateNewPolicyRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LegalHoldPoliciesCreateNewPolicyRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("policy_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalHoldPoliciesCreateNewPolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalHoldPoliciesCreateNewPolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalHoldPoliciesCreateNewPolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalHoldPoliciesCreateNewPolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalHoldPoliciesCreateNewPolicyRequest>() {
           @Override
           public void write(JsonWriter out, LegalHoldPoliciesCreateNewPolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalHoldPoliciesCreateNewPolicyRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LegalHoldPoliciesCreateNewPolicyRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LegalHoldPoliciesCreateNewPolicyRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LegalHoldPoliciesCreateNewPolicyRequest
  * @throws IOException if the JSON string is invalid with respect to LegalHoldPoliciesCreateNewPolicyRequest
  */
  public static LegalHoldPoliciesCreateNewPolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalHoldPoliciesCreateNewPolicyRequest.class);
  }

 /**
  * Convert an instance of LegalHoldPoliciesCreateNewPolicyRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

