/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SignRequestPrefillTag;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A request to create a sign request object
 */
@ApiModel(description = "A request to create a sign request object")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SignRequestBase {
  public static final String SERIALIZED_NAME_IS_DOCUMENT_PREPARATION_NEEDED = "is_document_preparation_needed";
  @SerializedName(SERIALIZED_NAME_IS_DOCUMENT_PREPARATION_NEEDED)
  private Boolean isDocumentPreparationNeeded;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_DECLINED_REDIRECT_URL = "declined_redirect_url";
  @SerializedName(SERIALIZED_NAME_DECLINED_REDIRECT_URL)
  private String declinedRedirectUrl;

  public static final String SERIALIZED_NAME_ARE_TEXT_SIGNATURES_ENABLED = "are_text_signatures_enabled";
  @SerializedName(SERIALIZED_NAME_ARE_TEXT_SIGNATURES_ENABLED)
  private Boolean areTextSignaturesEnabled = true;

  public static final String SERIALIZED_NAME_EMAIL_SUBJECT = "email_subject";
  @SerializedName(SERIALIZED_NAME_EMAIL_SUBJECT)
  private String emailSubject;

  public static final String SERIALIZED_NAME_EMAIL_MESSAGE = "email_message";
  @SerializedName(SERIALIZED_NAME_EMAIL_MESSAGE)
  private String emailMessage;

  public static final String SERIALIZED_NAME_ARE_REMINDERS_ENABLED = "are_reminders_enabled";
  @SerializedName(SERIALIZED_NAME_ARE_REMINDERS_ENABLED)
  private Boolean areRemindersEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFILL_TAGS = "prefill_tags";
  @SerializedName(SERIALIZED_NAME_PREFILL_TAGS)
  private List<SignRequestPrefillTag> prefillTags = null;

  public static final String SERIALIZED_NAME_DAYS_VALID = "days_valid";
  @SerializedName(SERIALIZED_NAME_DAYS_VALID)
  private Integer daysValid;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_IS_PHONE_VERIFICATION_REQUIRED_TO_VIEW = "is_phone_verification_required_to_view";
  @SerializedName(SERIALIZED_NAME_IS_PHONE_VERIFICATION_REQUIRED_TO_VIEW)
  private Boolean isPhoneVerificationRequiredToView;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public SignRequestBase() {
  }

  public SignRequestBase isDocumentPreparationNeeded(Boolean isDocumentPreparationNeeded) {
    
    
    
    
    this.isDocumentPreparationNeeded = isDocumentPreparationNeeded;
    return this;
  }

   /**
   * Indicates if the sender should receive a &#x60;prepare_url&#x60; in the response to complete document preparation via UI.
   * @return isDocumentPreparationNeeded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates if the sender should receive a `prepare_url` in the response to complete document preparation via UI.")

  public Boolean getIsDocumentPreparationNeeded() {
    return isDocumentPreparationNeeded;
  }


  public void setIsDocumentPreparationNeeded(Boolean isDocumentPreparationNeeded) {
    
    
    
    this.isDocumentPreparationNeeded = isDocumentPreparationNeeded;
  }


  public SignRequestBase redirectUrl(String redirectUrl) {
    
    
    
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * When specified, signature request will be redirected to this url when a document is signed.
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.example.com", value = "When specified, signature request will be redirected to this url when a document is signed.")

  public String getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(String redirectUrl) {
    
    
    
    this.redirectUrl = redirectUrl;
  }


  public SignRequestBase declinedRedirectUrl(String declinedRedirectUrl) {
    
    
    
    
    this.declinedRedirectUrl = declinedRedirectUrl;
    return this;
  }

   /**
   * The uri that a signer will be redirected to after declining to sign a document.
   * @return declinedRedirectUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://declined-redirect.com", value = "The uri that a signer will be redirected to after declining to sign a document.")

  public String getDeclinedRedirectUrl() {
    return declinedRedirectUrl;
  }


  public void setDeclinedRedirectUrl(String declinedRedirectUrl) {
    
    
    
    this.declinedRedirectUrl = declinedRedirectUrl;
  }


  public SignRequestBase areTextSignaturesEnabled(Boolean areTextSignaturesEnabled) {
    
    
    
    
    this.areTextSignaturesEnabled = areTextSignaturesEnabled;
    return this;
  }

   /**
   * Disables the usage of signatures generated by typing (text).
   * @return areTextSignaturesEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Disables the usage of signatures generated by typing (text).")

  public Boolean getAreTextSignaturesEnabled() {
    return areTextSignaturesEnabled;
  }


  public void setAreTextSignaturesEnabled(Boolean areTextSignaturesEnabled) {
    
    
    
    this.areTextSignaturesEnabled = areTextSignaturesEnabled;
  }


  public SignRequestBase emailSubject(String emailSubject) {
    
    
    
    
    this.emailSubject = emailSubject;
    return this;
  }

   /**
   * Subject of sign request email. This is cleaned by sign request. If this field is not passed, a default subject will be used.
   * @return emailSubject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sign Request from Acme", value = "Subject of sign request email. This is cleaned by sign request. If this field is not passed, a default subject will be used.")

  public String getEmailSubject() {
    return emailSubject;
  }


  public void setEmailSubject(String emailSubject) {
    
    
    
    this.emailSubject = emailSubject;
  }


  public SignRequestBase emailMessage(String emailMessage) {
    
    
    
    
    this.emailMessage = emailMessage;
    return this;
  }

   /**
   * Message to include in sign request email. The field is cleaned through sanitization of specific characters. However, some html tags are allowed. Links included in the message are also converted to hyperlinks in the email. The message may contain the following html tags including &#x60;a&#x60;, &#x60;abbr&#x60;, &#x60;acronym&#x60;, &#x60;b&#x60;, &#x60;blockquote&#x60;, &#x60;code&#x60;, &#x60;em&#x60;, &#x60;i&#x60;, &#x60;ul&#x60;, &#x60;li&#x60;, &#x60;ol&#x60;, and &#x60;strong&#x60;. Be aware that when the text to html ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed. If this field is not passed, a default message will be used.
   * @return emailMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hello! Please sign the document below", value = "Message to include in sign request email. The field is cleaned through sanitization of specific characters. However, some html tags are allowed. Links included in the message are also converted to hyperlinks in the email. The message may contain the following html tags including `a`, `abbr`, `acronym`, `b`, `blockquote`, `code`, `em`, `i`, `ul`, `li`, `ol`, and `strong`. Be aware that when the text to html ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed. If this field is not passed, a default message will be used.")

  public String getEmailMessage() {
    return emailMessage;
  }


  public void setEmailMessage(String emailMessage) {
    
    
    
    this.emailMessage = emailMessage;
  }


  public SignRequestBase areRemindersEnabled(Boolean areRemindersEnabled) {
    
    
    
    
    this.areRemindersEnabled = areRemindersEnabled;
    return this;
  }

   /**
   * Reminds signers to sign a document on day 3, 8, 13 and 18. Reminders are only sent to outstanding signers.
   * @return areRemindersEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Reminds signers to sign a document on day 3, 8, 13 and 18. Reminders are only sent to outstanding signers.")

  public Boolean getAreRemindersEnabled() {
    return areRemindersEnabled;
  }


  public void setAreRemindersEnabled(Boolean areRemindersEnabled) {
    
    
    
    this.areRemindersEnabled = areRemindersEnabled;
  }


  public SignRequestBase name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the sign request.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "name", value = "Name of the sign request.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public SignRequestBase prefillTags(List<SignRequestPrefillTag> prefillTags) {
    
    
    
    
    this.prefillTags = prefillTags;
    return this;
  }

  public SignRequestBase addPrefillTagsItem(SignRequestPrefillTag prefillTagsItem) {
    if (this.prefillTags == null) {
      this.prefillTags = new ArrayList<>();
    }
    this.prefillTags.add(prefillTagsItem);
    return this;
  }

   /**
   * When a document contains sign related tags in the content, you can prefill them using this &#x60;prefill_tags&#x60; by referencing the &#39;id&#39; of the tag as the &#x60;external_id&#x60; field of the prefill tag.
   * @return prefillTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When a document contains sign related tags in the content, you can prefill them using this `prefill_tags` by referencing the 'id' of the tag as the `external_id` field of the prefill tag.")

  public List<SignRequestPrefillTag> getPrefillTags() {
    return prefillTags;
  }


  public void setPrefillTags(List<SignRequestPrefillTag> prefillTags) {
    
    
    
    this.prefillTags = prefillTags;
  }


  public SignRequestBase daysValid(Integer daysValid) {
    if (daysValid != null && daysValid < 0) {
      throw new IllegalArgumentException("Invalid value for daysValid. Must be greater than or equal to 0.");
    }
    if (daysValid != null && daysValid > 730) {
      throw new IllegalArgumentException("Invalid value for daysValid. Must be less than or equal to 730.");
    }
    
    
    this.daysValid = daysValid;
    return this;
  }

   /**
   * Set the number of days after which the created signature request will automatically expire if not completed. By default, we do not apply any expiration date on signature requests, and the signature request does not expire.
   * minimum: 0
   * maximum: 730
   * @return daysValid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Set the number of days after which the created signature request will automatically expire if not completed. By default, we do not apply any expiration date on signature requests, and the signature request does not expire.")

  public Integer getDaysValid() {
    return daysValid;
  }


  public void setDaysValid(Integer daysValid) {
    if (daysValid != null && daysValid < 0) {
      throw new IllegalArgumentException("Invalid value for daysValid. Must be greater than or equal to 0.");
    }
    if (daysValid != null && daysValid > 730) {
      throw new IllegalArgumentException("Invalid value for daysValid. Must be less than or equal to 730.");
    }
    
    this.daysValid = daysValid;
  }


  public SignRequestBase externalId(String externalId) {
    
    
    
    
    this.externalId = externalId;
    return this;
  }

   /**
   * This can be used to reference an ID in an external system that the sign request is related to.
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123", value = "This can be used to reference an ID in an external system that the sign request is related to.")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    
    this.externalId = externalId;
  }


  public SignRequestBase isPhoneVerificationRequiredToView(Boolean isPhoneVerificationRequiredToView) {
    
    
    
    
    this.isPhoneVerificationRequiredToView = isPhoneVerificationRequiredToView;
    return this;
  }

   /**
   * Forces signers to verify a text message prior to viewing the document. You must specify the phone number of signers to have this setting apply to them.
   * @return isPhoneVerificationRequiredToView
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Forces signers to verify a text message prior to viewing the document. You must specify the phone number of signers to have this setting apply to them.")

  public Boolean getIsPhoneVerificationRequiredToView() {
    return isPhoneVerificationRequiredToView;
  }


  public void setIsPhoneVerificationRequiredToView(Boolean isPhoneVerificationRequiredToView) {
    
    
    
    this.isPhoneVerificationRequiredToView = isPhoneVerificationRequiredToView;
  }


  public SignRequestBase templateId(String templateId) {
    
    
    
    
    this.templateId = templateId;
    return this;
  }

   /**
   * When a signature request is created from a template this field will indicate the id of that template.
   * @return templateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123075213-af2c8822-3ef2-4952-8557-52d69c2fe9cb", value = "When a signature request is created from a template this field will indicate the id of that template.")

  public String getTemplateId() {
    return templateId;
  }


  public void setTemplateId(String templateId) {
    
    
    
    this.templateId = templateId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SignRequestBase instance itself
   */
  public SignRequestBase putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignRequestBase signRequestBase = (SignRequestBase) o;
    return Objects.equals(this.isDocumentPreparationNeeded, signRequestBase.isDocumentPreparationNeeded) &&
        Objects.equals(this.redirectUrl, signRequestBase.redirectUrl) &&
        Objects.equals(this.declinedRedirectUrl, signRequestBase.declinedRedirectUrl) &&
        Objects.equals(this.areTextSignaturesEnabled, signRequestBase.areTextSignaturesEnabled) &&
        Objects.equals(this.emailSubject, signRequestBase.emailSubject) &&
        Objects.equals(this.emailMessage, signRequestBase.emailMessage) &&
        Objects.equals(this.areRemindersEnabled, signRequestBase.areRemindersEnabled) &&
        Objects.equals(this.name, signRequestBase.name) &&
        Objects.equals(this.prefillTags, signRequestBase.prefillTags) &&
        Objects.equals(this.daysValid, signRequestBase.daysValid) &&
        Objects.equals(this.externalId, signRequestBase.externalId) &&
        Objects.equals(this.isPhoneVerificationRequiredToView, signRequestBase.isPhoneVerificationRequiredToView) &&
        Objects.equals(this.templateId, signRequestBase.templateId)&&
        Objects.equals(this.additionalProperties, signRequestBase.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isDocumentPreparationNeeded, redirectUrl, declinedRedirectUrl, areTextSignaturesEnabled, emailSubject, emailMessage, areRemindersEnabled, name, prefillTags, daysValid, externalId, isPhoneVerificationRequiredToView, templateId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignRequestBase {\n");
    sb.append("    isDocumentPreparationNeeded: ").append(toIndentedString(isDocumentPreparationNeeded)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    declinedRedirectUrl: ").append(toIndentedString(declinedRedirectUrl)).append("\n");
    sb.append("    areTextSignaturesEnabled: ").append(toIndentedString(areTextSignaturesEnabled)).append("\n");
    sb.append("    emailSubject: ").append(toIndentedString(emailSubject)).append("\n");
    sb.append("    emailMessage: ").append(toIndentedString(emailMessage)).append("\n");
    sb.append("    areRemindersEnabled: ").append(toIndentedString(areRemindersEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prefillTags: ").append(toIndentedString(prefillTags)).append("\n");
    sb.append("    daysValid: ").append(toIndentedString(daysValid)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    isPhoneVerificationRequiredToView: ").append(toIndentedString(isPhoneVerificationRequiredToView)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_document_preparation_needed");
    openapiFields.add("redirect_url");
    openapiFields.add("declined_redirect_url");
    openapiFields.add("are_text_signatures_enabled");
    openapiFields.add("email_subject");
    openapiFields.add("email_message");
    openapiFields.add("are_reminders_enabled");
    openapiFields.add("name");
    openapiFields.add("prefill_tags");
    openapiFields.add("days_valid");
    openapiFields.add("external_id");
    openapiFields.add("is_phone_verification_required_to_view");
    openapiFields.add("template_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SignRequestBase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SignRequestBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignRequestBase is not found in the empty JSON string", SignRequestBase.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("redirect_url").isJsonNull() && (jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      if (!jsonObj.get("declined_redirect_url").isJsonNull() && (jsonObj.get("declined_redirect_url") != null && !jsonObj.get("declined_redirect_url").isJsonNull()) && !jsonObj.get("declined_redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `declined_redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("declined_redirect_url").toString()));
      }
      if (!jsonObj.get("email_subject").isJsonNull() && (jsonObj.get("email_subject") != null && !jsonObj.get("email_subject").isJsonNull()) && !jsonObj.get("email_subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_subject").toString()));
      }
      if (!jsonObj.get("email_message").isJsonNull() && (jsonObj.get("email_message") != null && !jsonObj.get("email_message").isJsonNull()) && !jsonObj.get("email_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_message").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("prefill_tags") != null && !jsonObj.get("prefill_tags").isJsonNull()) {
        JsonArray jsonArrayprefillTags = jsonObj.getAsJsonArray("prefill_tags");
        if (jsonArrayprefillTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("prefill_tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `prefill_tags` to be an array in the JSON string but got `%s`", jsonObj.get("prefill_tags").toString()));
          }

          // validate the optional field `prefill_tags` (array)
          for (int i = 0; i < jsonArrayprefillTags.size(); i++) {
            SignRequestPrefillTag.validateJsonObject(jsonArrayprefillTags.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("external_id").isJsonNull() && (jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if (!jsonObj.get("template_id").isJsonNull() && (jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignRequestBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignRequestBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignRequestBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignRequestBase.class));

       return (TypeAdapter<T>) new TypeAdapter<SignRequestBase>() {
           @Override
           public void write(JsonWriter out, SignRequestBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SignRequestBase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SignRequestBase instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SignRequestBase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SignRequestBase
  * @throws IOException if the JSON string is invalid with respect to SignRequestBase
  */
  public static SignRequestBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignRequestBase.class);
  }

 /**
  * Convert an instance of SignRequestBase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

