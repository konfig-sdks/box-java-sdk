/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TrackingCode;
import com.konfigthis.client.model.UserAllOfNotificationEmail;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A full representation of a user, as can be returned from any user API endpoint.
 */
@ApiModel(description = "A full representation of a user, as can be returned from any user API endpoint.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UserFull {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * &#x60;user&#x60;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    USER("user");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_SPACE_AMOUNT = "space_amount";
  @SerializedName(SERIALIZED_NAME_SPACE_AMOUNT)
  private Long spaceAmount;

  public static final String SERIALIZED_NAME_SPACE_USED = "space_used";
  @SerializedName(SERIALIZED_NAME_SPACE_USED)
  private Long spaceUsed;

  public static final String SERIALIZED_NAME_MAX_UPLOAD_SIZE = "max_upload_size";
  @SerializedName(SERIALIZED_NAME_MAX_UPLOAD_SIZE)
  private Long maxUploadSize;

  /**
   * The user&#39;s account status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("active"),
    
    INACTIVE("inactive"),
    
    CANNOT_DELETE_EDIT("cannot_delete_edit"),
    
    CANNOT_DELETE_EDIT_UPLOAD("cannot_delete_edit_upload");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_NOTIFICATION_EMAIL = "notification_email";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_EMAIL)
  private UserAllOfNotificationEmail notificationEmail;

  /**
   * The userâ€™s enterprise role
   */
  @JsonAdapter(RoleEnum.Adapter.class)
 public enum RoleEnum {
    ADMIN("admin"),
    
    COADMIN("coadmin"),
    
    USER("user");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  public static final String SERIALIZED_NAME_TRACKING_CODES = "tracking_codes";
  @SerializedName(SERIALIZED_NAME_TRACKING_CODES)
  private List<TrackingCode> trackingCodes = null;

  public static final String SERIALIZED_NAME_CAN_SEE_MANAGED_USERS = "can_see_managed_users";
  @SerializedName(SERIALIZED_NAME_CAN_SEE_MANAGED_USERS)
  private Boolean canSeeManagedUsers;

  public static final String SERIALIZED_NAME_IS_SYNC_ENABLED = "is_sync_enabled";
  @SerializedName(SERIALIZED_NAME_IS_SYNC_ENABLED)
  private Boolean isSyncEnabled;

  public static final String SERIALIZED_NAME_IS_EXTERNAL_COLLAB_RESTRICTED = "is_external_collab_restricted";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL_COLLAB_RESTRICTED)
  private Boolean isExternalCollabRestricted;

  public static final String SERIALIZED_NAME_IS_EXEMPT_FROM_DEVICE_LIMITS = "is_exempt_from_device_limits";
  @SerializedName(SERIALIZED_NAME_IS_EXEMPT_FROM_DEVICE_LIMITS)
  private Boolean isExemptFromDeviceLimits;

  public static final String SERIALIZED_NAME_IS_EXEMPT_FROM_LOGIN_VERIFICATION = "is_exempt_from_login_verification";
  @SerializedName(SERIALIZED_NAME_IS_EXEMPT_FROM_LOGIN_VERIFICATION)
  private Boolean isExemptFromLoginVerification;

  public static final String SERIALIZED_NAME_ENTERPRISE = "enterprise";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE)
  private Object enterprise;

  public static final String SERIALIZED_NAME_MY_TAGS = "my_tags";
  @SerializedName(SERIALIZED_NAME_MY_TAGS)
  private List<String> myTags = null;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_IS_PLATFORM_ACCESS_ONLY = "is_platform_access_only";
  @SerializedName(SERIALIZED_NAME_IS_PLATFORM_ACCESS_ONLY)
  private Boolean isPlatformAccessOnly;

  public static final String SERIALIZED_NAME_EXTERNAL_APP_USER_ID = "external_app_user_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_APP_USER_ID)
  private String externalAppUserId;

  public UserFull() {
  }

  public UserFull id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for this user
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "11446498", required = true, value = "The unique identifier for this user")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public UserFull type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * &#x60;user&#x60;
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "USER", required = true, value = "`user`")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public UserFull name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The display name of this user
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Aaron Levie", value = "The display name of this user")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public UserFull login(String login) {
    
    
    
    
    this.login = login;
    return this;
  }

   /**
   * The primary email address of this user
   * @return login
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ceo@example.com", value = "The primary email address of this user")

  public String getLogin() {
    return login;
  }


  public void setLogin(String login) {
    
    
    
    this.login = login;
  }


  public UserFull createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When the user object was created
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "When the user object was created")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public UserFull modifiedAt(OffsetDateTime modifiedAt) {
    
    
    
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * When the user object was last modified
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "When the user object was last modified")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(OffsetDateTime modifiedAt) {
    
    
    
    this.modifiedAt = modifiedAt;
  }


  public UserFull language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * The language of the user, formatted in modified version of the [ISO 639-1](https://raw.githubusercontent.com) format.
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en", value = "The language of the user, formatted in modified version of the [ISO 639-1](https://raw.githubusercontent.com) format.")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public UserFull timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The user&#39;s timezone
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Africa/Bujumbura", value = "The user's timezone")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public UserFull spaceAmount(Long spaceAmount) {
    
    
    
    
    this.spaceAmount = spaceAmount;
    return this;
  }

   /**
   * The userâ€™s total available space amount in bytes
   * @return spaceAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11345156112", value = "The userâ€™s total available space amount in bytes")

  public Long getSpaceAmount() {
    return spaceAmount;
  }


  public void setSpaceAmount(Long spaceAmount) {
    
    
    
    this.spaceAmount = spaceAmount;
  }


  public UserFull spaceUsed(Long spaceUsed) {
    
    
    
    
    this.spaceUsed = spaceUsed;
    return this;
  }

   /**
   * The amount of space in use by the user
   * @return spaceUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1237009912", value = "The amount of space in use by the user")

  public Long getSpaceUsed() {
    return spaceUsed;
  }


  public void setSpaceUsed(Long spaceUsed) {
    
    
    
    this.spaceUsed = spaceUsed;
  }


  public UserFull maxUploadSize(Long maxUploadSize) {
    
    
    
    
    this.maxUploadSize = maxUploadSize;
    return this;
  }

   /**
   * The maximum individual file size in bytes the user can have
   * @return maxUploadSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2147483648", value = "The maximum individual file size in bytes the user can have")

  public Long getMaxUploadSize() {
    return maxUploadSize;
  }


  public void setMaxUploadSize(Long maxUploadSize) {
    
    
    
    this.maxUploadSize = maxUploadSize;
  }


  public UserFull status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The user&#39;s account status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACTIVE", value = "The user's account status")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public UserFull jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * The userâ€™s job title
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CEO", value = "The userâ€™s job title")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public UserFull phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * The userâ€™s phone number
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6509241374", value = "The userâ€™s phone number")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public UserFull address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * The userâ€™s address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "900 Jefferson Ave, Redwood City, CA 94063", value = "The userâ€™s address")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public UserFull avatarUrl(String avatarUrl) {
    
    
    
    
    this.avatarUrl = avatarUrl;
    return this;
  }

   /**
   * URL of the userâ€™s avatar image
   * @return avatarUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.box.com/api/avatar/large/181216415", value = "URL of the userâ€™s avatar image")

  public String getAvatarUrl() {
    return avatarUrl;
  }


  public void setAvatarUrl(String avatarUrl) {
    
    
    
    this.avatarUrl = avatarUrl;
  }


  public UserFull notificationEmail(UserAllOfNotificationEmail notificationEmail) {
    
    
    
    
    this.notificationEmail = notificationEmail;
    return this;
  }

   /**
   * Get notificationEmail
   * @return notificationEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserAllOfNotificationEmail getNotificationEmail() {
    return notificationEmail;
  }


  public void setNotificationEmail(UserAllOfNotificationEmail notificationEmail) {
    
    
    
    this.notificationEmail = notificationEmail;
  }


  public UserFull role(RoleEnum role) {
    
    
    
    
    this.role = role;
    return this;
  }

   /**
   * The userâ€™s enterprise role
   * @return role
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ADMIN", value = "The userâ€™s enterprise role")

  public RoleEnum getRole() {
    return role;
  }


  public void setRole(RoleEnum role) {
    
    
    
    this.role = role;
  }


  public UserFull trackingCodes(List<TrackingCode> trackingCodes) {
    
    
    
    
    this.trackingCodes = trackingCodes;
    return this;
  }

  public UserFull addTrackingCodesItem(TrackingCode trackingCodesItem) {
    if (this.trackingCodes == null) {
      this.trackingCodes = new ArrayList<>();
    }
    this.trackingCodes.add(trackingCodesItem);
    return this;
  }

   /**
   * Tracking codes allow an admin to generate reports from the admin console and assign an attribute to a specific group of users. This setting must be enabled for an enterprise before it can be used.
   * @return trackingCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tracking codes allow an admin to generate reports from the admin console and assign an attribute to a specific group of users. This setting must be enabled for an enterprise before it can be used.")

  public List<TrackingCode> getTrackingCodes() {
    return trackingCodes;
  }


  public void setTrackingCodes(List<TrackingCode> trackingCodes) {
    
    
    
    this.trackingCodes = trackingCodes;
  }


  public UserFull canSeeManagedUsers(Boolean canSeeManagedUsers) {
    
    
    
    
    this.canSeeManagedUsers = canSeeManagedUsers;
    return this;
  }

   /**
   * Whether the user can see other enterprise users in their contact list
   * @return canSeeManagedUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the user can see other enterprise users in their contact list")

  public Boolean getCanSeeManagedUsers() {
    return canSeeManagedUsers;
  }


  public void setCanSeeManagedUsers(Boolean canSeeManagedUsers) {
    
    
    
    this.canSeeManagedUsers = canSeeManagedUsers;
  }


  public UserFull isSyncEnabled(Boolean isSyncEnabled) {
    
    
    
    
    this.isSyncEnabled = isSyncEnabled;
    return this;
  }

   /**
   * Whether the user can use Box Sync
   * @return isSyncEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the user can use Box Sync")

  public Boolean getIsSyncEnabled() {
    return isSyncEnabled;
  }


  public void setIsSyncEnabled(Boolean isSyncEnabled) {
    
    
    
    this.isSyncEnabled = isSyncEnabled;
  }


  public UserFull isExternalCollabRestricted(Boolean isExternalCollabRestricted) {
    
    
    
    
    this.isExternalCollabRestricted = isExternalCollabRestricted;
    return this;
  }

   /**
   * Whether the user is allowed to collaborate with users outside their enterprise
   * @return isExternalCollabRestricted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the user is allowed to collaborate with users outside their enterprise")

  public Boolean getIsExternalCollabRestricted() {
    return isExternalCollabRestricted;
  }


  public void setIsExternalCollabRestricted(Boolean isExternalCollabRestricted) {
    
    
    
    this.isExternalCollabRestricted = isExternalCollabRestricted;
  }


  public UserFull isExemptFromDeviceLimits(Boolean isExemptFromDeviceLimits) {
    
    
    
    
    this.isExemptFromDeviceLimits = isExemptFromDeviceLimits;
    return this;
  }

   /**
   * Whether to exempt the user from Enterprise device limits
   * @return isExemptFromDeviceLimits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to exempt the user from Enterprise device limits")

  public Boolean getIsExemptFromDeviceLimits() {
    return isExemptFromDeviceLimits;
  }


  public void setIsExemptFromDeviceLimits(Boolean isExemptFromDeviceLimits) {
    
    
    
    this.isExemptFromDeviceLimits = isExemptFromDeviceLimits;
  }


  public UserFull isExemptFromLoginVerification(Boolean isExemptFromLoginVerification) {
    
    
    
    
    this.isExemptFromLoginVerification = isExemptFromLoginVerification;
    return this;
  }

   /**
   * Whether the user must use two-factor authentication
   * @return isExemptFromLoginVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the user must use two-factor authentication")

  public Boolean getIsExemptFromLoginVerification() {
    return isExemptFromLoginVerification;
  }


  public void setIsExemptFromLoginVerification(Boolean isExemptFromLoginVerification) {
    
    
    
    this.isExemptFromLoginVerification = isExemptFromLoginVerification;
  }


  public UserFull enterprise(Object enterprise) {
    
    
    
    
    this.enterprise = enterprise;
    return this;
  }

   /**
   * Get enterprise
   * @return enterprise
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getEnterprise() {
    return enterprise;
  }


  public void setEnterprise(Object enterprise) {
    
    
    
    this.enterprise = enterprise;
  }


  public UserFull myTags(List<String> myTags) {
    
    
    
    
    this.myTags = myTags;
    return this;
  }

  public UserFull addMyTagsItem(String myTagsItem) {
    if (this.myTags == null) {
      this.myTags = new ArrayList<>();
    }
    this.myTags.add(myTagsItem);
    return this;
  }

   /**
   * Tags for all files and folders owned by the user. Values returned will only contain tags that were set by the requester.
   * @return myTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"important\"]", value = "Tags for all files and folders owned by the user. Values returned will only contain tags that were set by the requester.")

  public List<String> getMyTags() {
    return myTags;
  }


  public void setMyTags(List<String> myTags) {
    
    
    
    this.myTags = myTags;
  }


  public UserFull hostname(String hostname) {
    
    
    
    
    this.hostname = hostname;
    return this;
  }

   /**
   * The root (protocol, subdomain, domain) of any links that need to be generated for the user
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.app.box.com/", value = "The root (protocol, subdomain, domain) of any links that need to be generated for the user")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    
    
    
    this.hostname = hostname;
  }


  public UserFull isPlatformAccessOnly(Boolean isPlatformAccessOnly) {
    
    
    
    
    this.isPlatformAccessOnly = isPlatformAccessOnly;
    return this;
  }

   /**
   * Whether the user is an App User
   * @return isPlatformAccessOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the user is an App User")

  public Boolean getIsPlatformAccessOnly() {
    return isPlatformAccessOnly;
  }


  public void setIsPlatformAccessOnly(Boolean isPlatformAccessOnly) {
    
    
    
    this.isPlatformAccessOnly = isPlatformAccessOnly;
  }


  public UserFull externalAppUserId(String externalAppUserId) {
    
    
    
    
    this.externalAppUserId = externalAppUserId;
    return this;
  }

   /**
   * An external identifier for an app user, which can be used to look up the user. This can be used to tie user IDs from external identity providers to Box users.
   * @return externalAppUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "my-user-1234", value = "An external identifier for an app user, which can be used to look up the user. This can be used to tie user IDs from external identity providers to Box users.")

  public String getExternalAppUserId() {
    return externalAppUserId;
  }


  public void setExternalAppUserId(String externalAppUserId) {
    
    
    
    this.externalAppUserId = externalAppUserId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UserFull instance itself
   */
  public UserFull putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserFull userFull = (UserFull) o;
    return Objects.equals(this.id, userFull.id) &&
        Objects.equals(this.type, userFull.type) &&
        Objects.equals(this.name, userFull.name) &&
        Objects.equals(this.login, userFull.login) &&
        Objects.equals(this.createdAt, userFull.createdAt) &&
        Objects.equals(this.modifiedAt, userFull.modifiedAt) &&
        Objects.equals(this.language, userFull.language) &&
        Objects.equals(this.timezone, userFull.timezone) &&
        Objects.equals(this.spaceAmount, userFull.spaceAmount) &&
        Objects.equals(this.spaceUsed, userFull.spaceUsed) &&
        Objects.equals(this.maxUploadSize, userFull.maxUploadSize) &&
        Objects.equals(this.status, userFull.status) &&
        Objects.equals(this.jobTitle, userFull.jobTitle) &&
        Objects.equals(this.phone, userFull.phone) &&
        Objects.equals(this.address, userFull.address) &&
        Objects.equals(this.avatarUrl, userFull.avatarUrl) &&
        Objects.equals(this.notificationEmail, userFull.notificationEmail) &&
        Objects.equals(this.role, userFull.role) &&
        Objects.equals(this.trackingCodes, userFull.trackingCodes) &&
        Objects.equals(this.canSeeManagedUsers, userFull.canSeeManagedUsers) &&
        Objects.equals(this.isSyncEnabled, userFull.isSyncEnabled) &&
        Objects.equals(this.isExternalCollabRestricted, userFull.isExternalCollabRestricted) &&
        Objects.equals(this.isExemptFromDeviceLimits, userFull.isExemptFromDeviceLimits) &&
        Objects.equals(this.isExemptFromLoginVerification, userFull.isExemptFromLoginVerification) &&
        Objects.equals(this.enterprise, userFull.enterprise) &&
        Objects.equals(this.myTags, userFull.myTags) &&
        Objects.equals(this.hostname, userFull.hostname) &&
        Objects.equals(this.isPlatformAccessOnly, userFull.isPlatformAccessOnly) &&
        Objects.equals(this.externalAppUserId, userFull.externalAppUserId)&&
        Objects.equals(this.additionalProperties, userFull.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, name, login, createdAt, modifiedAt, language, timezone, spaceAmount, spaceUsed, maxUploadSize, status, jobTitle, phone, address, avatarUrl, notificationEmail, role, trackingCodes, canSeeManagedUsers, isSyncEnabled, isExternalCollabRestricted, isExemptFromDeviceLimits, isExemptFromLoginVerification, enterprise, myTags, hostname, isPlatformAccessOnly, externalAppUserId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserFull {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    spaceAmount: ").append(toIndentedString(spaceAmount)).append("\n");
    sb.append("    spaceUsed: ").append(toIndentedString(spaceUsed)).append("\n");
    sb.append("    maxUploadSize: ").append(toIndentedString(maxUploadSize)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    notificationEmail: ").append(toIndentedString(notificationEmail)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    trackingCodes: ").append(toIndentedString(trackingCodes)).append("\n");
    sb.append("    canSeeManagedUsers: ").append(toIndentedString(canSeeManagedUsers)).append("\n");
    sb.append("    isSyncEnabled: ").append(toIndentedString(isSyncEnabled)).append("\n");
    sb.append("    isExternalCollabRestricted: ").append(toIndentedString(isExternalCollabRestricted)).append("\n");
    sb.append("    isExemptFromDeviceLimits: ").append(toIndentedString(isExemptFromDeviceLimits)).append("\n");
    sb.append("    isExemptFromLoginVerification: ").append(toIndentedString(isExemptFromLoginVerification)).append("\n");
    sb.append("    enterprise: ").append(toIndentedString(enterprise)).append("\n");
    sb.append("    myTags: ").append(toIndentedString(myTags)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    isPlatformAccessOnly: ").append(toIndentedString(isPlatformAccessOnly)).append("\n");
    sb.append("    externalAppUserId: ").append(toIndentedString(externalAppUserId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("name");
    openapiFields.add("login");
    openapiFields.add("created_at");
    openapiFields.add("modified_at");
    openapiFields.add("language");
    openapiFields.add("timezone");
    openapiFields.add("space_amount");
    openapiFields.add("space_used");
    openapiFields.add("max_upload_size");
    openapiFields.add("status");
    openapiFields.add("job_title");
    openapiFields.add("phone");
    openapiFields.add("address");
    openapiFields.add("avatar_url");
    openapiFields.add("notification_email");
    openapiFields.add("role");
    openapiFields.add("tracking_codes");
    openapiFields.add("can_see_managed_users");
    openapiFields.add("is_sync_enabled");
    openapiFields.add("is_external_collab_restricted");
    openapiFields.add("is_exempt_from_device_limits");
    openapiFields.add("is_exempt_from_login_verification");
    openapiFields.add("enterprise");
    openapiFields.add("my_tags");
    openapiFields.add("hostname");
    openapiFields.add("is_platform_access_only");
    openapiFields.add("external_app_user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserFull
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserFull.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserFull is not found in the empty JSON string", UserFull.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserFull.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("login") != null && !jsonObj.get("login").isJsonNull()) && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("job_title") != null && !jsonObj.get("job_title").isJsonNull()) && !jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      // validate the optional field `notification_email`
      if (jsonObj.get("notification_email") != null && !jsonObj.get("notification_email").isJsonNull()) {
        UserAllOfNotificationEmail.validateJsonObject(jsonObj.getAsJsonObject("notification_email"));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if (jsonObj.get("tracking_codes") != null && !jsonObj.get("tracking_codes").isJsonNull()) {
        JsonArray jsonArraytrackingCodes = jsonObj.getAsJsonArray("tracking_codes");
        if (jsonArraytrackingCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracking_codes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracking_codes` to be an array in the JSON string but got `%s`", jsonObj.get("tracking_codes").toString()));
          }

          // validate the optional field `tracking_codes` (array)
          for (int i = 0; i < jsonArraytrackingCodes.size(); i++) {
            TrackingCode.validateJsonObject(jsonArraytrackingCodes.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `enterprise`
      if (jsonObj.get("enterprise") != null && !jsonObj.get("enterprise").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("enterprise"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("my_tags") != null && !jsonObj.get("my_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `my_tags` to be an array in the JSON string but got `%s`", jsonObj.get("my_tags").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("external_app_user_id") != null && !jsonObj.get("external_app_user_id").isJsonNull()) && !jsonObj.get("external_app_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_app_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_app_user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserFull.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserFull' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserFull> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserFull.class));

       return (TypeAdapter<T>) new TypeAdapter<UserFull>() {
           @Override
           public void write(JsonWriter out, UserFull value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UserFull read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UserFull instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserFull given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserFull
  * @throws IOException if the JSON string is invalid with respect to UserFull
  */
  public static UserFull fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserFull.class);
  }

 /**
  * Convert an instance of UserFull to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

