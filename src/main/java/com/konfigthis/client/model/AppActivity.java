/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AppActivityActivityTemplate;
import com.konfigthis.client.model.AppGroupMini;
import com.konfigthis.client.model.AppMini;
import com.konfigthis.client.model.FileActivityUser;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * App activity
 */
@ApiModel(description = "App activity")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AppActivity {
  public static final String SERIALIZED_NAME_ACTIVITY_TEMPLATE = "activity_template";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TEMPLATE)
  private AppActivityActivityTemplate activityTemplate;

  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private AppMini app;

  public static final String SERIALIZED_NAME_APP_GROUP = "app_group";
  @SerializedName(SERIALIZED_NAME_APP_GROUP)
  private AppGroupMini appGroup;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private FileActivityUser createdBy;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurred_at";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  private OffsetDateTime occurredAt;

  public static final String SERIALIZED_NAME_RENDERED_TEXT = "rendered_text";
  @SerializedName(SERIALIZED_NAME_RENDERED_TEXT)
  private String renderedText;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    APP_ACTIVITY("app_activity");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public AppActivity() {
  }

  public AppActivity activityTemplate(AppActivityActivityTemplate activityTemplate) {
    
    
    
    
    this.activityTemplate = activityTemplate;
    return this;
  }

   /**
   * Get activityTemplate
   * @return activityTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AppActivityActivityTemplate getActivityTemplate() {
    return activityTemplate;
  }


  public void setActivityTemplate(AppActivityActivityTemplate activityTemplate) {
    
    
    
    this.activityTemplate = activityTemplate;
  }


  public AppActivity app(AppMini app) {
    
    
    
    
    this.app = app;
    return this;
  }

   /**
   * Get app
   * @return app
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AppMini getApp() {
    return app;
  }


  public void setApp(AppMini app) {
    
    
    
    this.app = app;
  }


  public AppActivity appGroup(AppGroupMini appGroup) {
    
    
    
    
    this.appGroup = appGroup;
    return this;
  }

   /**
   * Get appGroup
   * @return appGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AppGroupMini getAppGroup() {
    return appGroup;
  }


  public void setAppGroup(AppGroupMini appGroup) {
    
    
    
    this.appGroup = appGroup;
  }


  public AppActivity createdBy(FileActivityUser createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FileActivityUser getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(FileActivityUser createdBy) {
    
    
    
    this.createdBy = createdBy;
  }


  public AppActivity id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public AppActivity occurredAt(OffsetDateTime occurredAt) {
    
    
    
    
    this.occurredAt = occurredAt;
    return this;
  }

   /**
   * When the &#x60;app_activity&#x60; object was created.
   * @return occurredAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "When the `app_activity` object was created.")

  public OffsetDateTime getOccurredAt() {
    return occurredAt;
  }


  public void setOccurredAt(OffsetDateTime occurredAt) {
    
    
    
    this.occurredAt = occurredAt;
  }


  public AppActivity renderedText(String renderedText) {
    
    
    
    
    this.renderedText = renderedText;
    return this;
  }

   /**
   * Get renderedText
   * @return renderedText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRenderedText() {
    return renderedText;
  }


  public void setRenderedText(String renderedText) {
    
    
    
    this.renderedText = renderedText;
  }


  public AppActivity type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AppActivity instance itself
   */
  public AppActivity putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppActivity appActivity = (AppActivity) o;
    return Objects.equals(this.activityTemplate, appActivity.activityTemplate) &&
        Objects.equals(this.app, appActivity.app) &&
        Objects.equals(this.appGroup, appActivity.appGroup) &&
        Objects.equals(this.createdBy, appActivity.createdBy) &&
        Objects.equals(this.id, appActivity.id) &&
        Objects.equals(this.occurredAt, appActivity.occurredAt) &&
        Objects.equals(this.renderedText, appActivity.renderedText) &&
        Objects.equals(this.type, appActivity.type)&&
        Objects.equals(this.additionalProperties, appActivity.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityTemplate, app, appGroup, createdBy, id, occurredAt, renderedText, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppActivity {\n");
    sb.append("    activityTemplate: ").append(toIndentedString(activityTemplate)).append("\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    appGroup: ").append(toIndentedString(appGroup)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    renderedText: ").append(toIndentedString(renderedText)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity_template");
    openapiFields.add("app");
    openapiFields.add("app_group");
    openapiFields.add("created_by");
    openapiFields.add("id");
    openapiFields.add("occurred_at");
    openapiFields.add("rendered_text");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AppActivity
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AppActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppActivity is not found in the empty JSON string", AppActivity.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppActivity.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `activity_template`
      if (jsonObj.get("activity_template") != null && !jsonObj.get("activity_template").isJsonNull()) {
        AppActivityActivityTemplate.validateJsonObject(jsonObj.getAsJsonObject("activity_template"));
      }
      // validate the optional field `app`
      if (jsonObj.get("app") != null && !jsonObj.get("app").isJsonNull()) {
        AppMini.validateJsonObject(jsonObj.getAsJsonObject("app"));
      }
      // validate the optional field `app_group`
      if (jsonObj.get("app_group") != null && !jsonObj.get("app_group").isJsonNull()) {
        AppGroupMini.validateJsonObject(jsonObj.getAsJsonObject("app_group"));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        FileActivityUser.validateJsonObject(jsonObj.getAsJsonObject("created_by"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("rendered_text") != null && !jsonObj.get("rendered_text").isJsonNull()) && !jsonObj.get("rendered_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rendered_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rendered_text").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<AppActivity>() {
           @Override
           public void write(JsonWriter out, AppActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AppActivity read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AppActivity instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppActivity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppActivity
  * @throws IOException if the JSON string is invalid with respect to AppActivity
  */
  public static AppActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppActivity.class);
  }

 /**
  * Convert an instance of AppActivity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

