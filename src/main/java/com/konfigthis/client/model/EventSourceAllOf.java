/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EventSource;
import com.konfigthis.client.model.EventSourceClassification;
import com.konfigthis.client.model.FileVersionMini;
import com.konfigthis.client.model.Folder;
import com.konfigthis.client.model.FolderAllOfFolderUploadEmail;
import com.konfigthis.client.model.FolderMini;
import com.konfigthis.client.model.Items;
import com.konfigthis.client.model.ModelFile;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UserAllOfNotificationEmail;
import com.konfigthis.client.model.UserMini;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.konfigthis.client.JSON;
@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EventSourceAllOf extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(EventSourceAllOf.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EventSourceAllOf.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EventSourceAllOf' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EventSource> adapterEventSource = gson.getDelegateAdapter(this, TypeToken.get(EventSource.class));
            final TypeAdapter<Folder> adapterFolder = gson.getDelegateAdapter(this, TypeToken.get(Folder.class));
            final TypeAdapter<Map&lt;String, Object&gt;> adapterMap&lt;String, Object&gt; = gson.getDelegateAdapter(this, TypeToken.get(Map&lt;String, Object&gt;.class));
            final TypeAdapter<ModelFile> adapterModelFile = gson.getDelegateAdapter(this, TypeToken.get(ModelFile.class));
            final TypeAdapter<User> adapterUser = gson.getDelegateAdapter(this, TypeToken.get(User.class));

            return (TypeAdapter<T>) new TypeAdapter<EventSourceAllOf>() {
                @Override
                public void write(JsonWriter out, EventSourceAllOf value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `EventSource`
                    if (value.getActualInstance() instanceof EventSource) {
                        JsonObject obj = adapterEventSource.toJsonTree((EventSource)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `Folder`
                    if (value.getActualInstance() instanceof Folder) {
                        JsonObject obj = adapterFolder.toJsonTree((Folder)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `Map&lt;String, Object&gt;`
                    if (value.getActualInstance() instanceof Map&lt;String, Object&gt;) {
                        JsonObject obj = adapterMap&lt;String, Object&gt;.toJsonTree((Map&lt;String, Object&gt;)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ModelFile`
                    if (value.getActualInstance() instanceof ModelFile) {
                        JsonObject obj = adapterModelFile.toJsonTree((ModelFile)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `User`
                    if (value.getActualInstance() instanceof User) {
                        JsonObject obj = adapterUser.toJsonTree((User)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: EventSource, Folder, Map<String, Object>, ModelFile, User");
                }

                @Override
                public EventSourceAllOf read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize EventSource
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EventSource.validateJsonObject(jsonObject);
                        actualAdapter = adapterEventSource;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EventSource'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EventSource failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EventSource'", e);
                    }

                    // deserialize Folder
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Folder.validateJsonObject(jsonObject);
                        actualAdapter = adapterFolder;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Folder'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Folder failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Folder'", e);
                    }

                    // deserialize Map<String, Object>
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Map&lt;String, Object&gt;.validateJsonObject(jsonObject);
                        actualAdapter = adapterMap&lt;String, Object&gt;;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Map<String, Object>'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Map<String, Object> failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Map<String, Object>'", e);
                    }

                    // deserialize ModelFile
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ModelFile.validateJsonObject(jsonObject);
                        actualAdapter = adapterModelFile;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ModelFile'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ModelFile failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ModelFile'", e);
                    }

                    // deserialize User
                    try {
                        // validate the JSON object to see if any exception is thrown
                        User.validateJsonObject(jsonObject);
                        actualAdapter = adapterUser;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'User'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for User failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'User'", e);
                    }

                    if (match == 1) {
                        EventSourceAllOf ret = new EventSourceAllOf();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for EventSourceAllOf: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public EventSourceAllOf() {
        super("oneOf", Boolean.FALSE);
    }

    public EventSourceAllOf(EventSource o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EventSourceAllOf(Folder o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EventSourceAllOf(Map<String, Object> o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EventSourceAllOf(ModelFile o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EventSourceAllOf(User o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("EventSource", new GenericType<EventSource>() {
        });
        schemas.put("Folder", new GenericType<Folder>() {
        });
        schemas.put("Map<String, Object>", new GenericType<Map<String, Object>>() {
        });
        schemas.put("ModelFile", new GenericType<ModelFile>() {
        });
        schemas.put("User", new GenericType<User>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return EventSourceAllOf.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * EventSource, Folder, Map<String, Object>, ModelFile, User
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof EventSource) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Folder) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Map<String, Object>) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ModelFile) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof User) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be EventSource, Folder, Map<String, Object>, ModelFile, User");
    }

    /**
     * Get the actual instance, which can be the following:
     * EventSource, Folder, Map<String, Object>, ModelFile, User
     *
     * @return The actual instance (EventSource, Folder, Map<String, Object>, ModelFile, User)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `EventSource`. If the actual instance is not `EventSource`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventSource`
     * @throws ClassCastException if the instance is not `EventSource`
     */
    public EventSource getEventSource() throws ClassCastException {
        return (EventSource)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Folder`. If the actual instance is not `Folder`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Folder`
     * @throws ClassCastException if the instance is not `Folder`
     */
    public Folder getFolder() throws ClassCastException {
        return (Folder)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Map<String, Object>`. If the actual instance is not `Map<String, Object>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Map<String, Object>`
     * @throws ClassCastException if the instance is not `Map<String, Object>`
     */
    public Map<String, Object> getMap<String, Object>() throws ClassCastException {
        return (Map<String, Object>)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ModelFile`. If the actual instance is not `ModelFile`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ModelFile`
     * @throws ClassCastException if the instance is not `ModelFile`
     */
    public ModelFile getModelFile() throws ClassCastException {
        return (ModelFile)super.getActualInstance();
    }

    /**
     * Get the actual instance of `User`. If the actual instance is not `User`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `User`
     * @throws ClassCastException if the instance is not `User`
     */
    public User getUser() throws ClassCastException {
        return (User)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventSourceAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with EventSource
    try {
      EventSource.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EventSource failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with Folder
    try {
      Folder.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for Folder failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with Map<String, Object>
    try {
      Map<String, Object>.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for Map<String, Object> failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ModelFile
    try {
      ModelFile.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ModelFile failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with User
    try {
      User.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for User failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for EventSourceAllOf with oneOf schemas: EventSource, Folder, Map<String, Object>, ModelFile, User. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of EventSourceAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventSourceAllOf
  * @throws IOException if the JSON string is invalid with respect to EventSourceAllOf
  */
  public static EventSourceAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventSourceAllOf.class);
  }

 /**
  * Convert an instance of EventSourceAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

