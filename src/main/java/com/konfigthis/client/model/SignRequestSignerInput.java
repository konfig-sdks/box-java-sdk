/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Input created by a Signer on a Sign Request
 */
@ApiModel(description = "Input created by a Signer on a Sign Request")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SignRequestSignerInput {
  public static final String SERIALIZED_NAME_DOCUMENT_TAG_ID = "document_tag_id";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TAG_ID)
  private String documentTagId;

  public static final String SERIALIZED_NAME_TEXT_VALUE = "text_value";
  @SerializedName(SERIALIZED_NAME_TEXT_VALUE)
  private String textValue;

  public static final String SERIALIZED_NAME_CHECKBOX_VALUE = "checkbox_value";
  @SerializedName(SERIALIZED_NAME_CHECKBOX_VALUE)
  private Boolean checkboxValue;

  public static final String SERIALIZED_NAME_DATE_VALUE = "date_value";
  @SerializedName(SERIALIZED_NAME_DATE_VALUE)
  private LocalDate dateValue;

  /**
   * Type of input
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    SIGNATURE("signature"),
    
    DATE("date"),
    
    TEXT("text"),
    
    CHECKBOX("checkbox"),
    
    RADIO("radio"),
    
    DROPDOWN("dropdown");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Content type of input
   */
  @JsonAdapter(ContentTypeEnum.Adapter.class)
 public enum ContentTypeEnum {
    SIGNATURE("signature"),
    
    INITIAL("initial"),
    
    STAMP("stamp"),
    
    DATE("date"),
    
    CHECKBOX("checkbox"),
    
    TEXT("text"),
    
    FULL_NAME("full_name"),
    
    FIRST_NAME("first_name"),
    
    LAST_NAME("last_name"),
    
    COMPANY("company"),
    
    TITLE("title"),
    
    EMAIL("email"),
    
    ATTACHMENT("attachment"),
    
    RADIO("radio"),
    
    DROPDOWN("dropdown");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private ContentTypeEnum contentType;

  public static final String SERIALIZED_NAME_PAGE_INDEX = "page_index";
  @SerializedName(SERIALIZED_NAME_PAGE_INDEX)
  private Integer pageIndex;

  public static final String SERIALIZED_NAME_READ_ONLY = "read_only";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public SignRequestSignerInput() {
  }

  public SignRequestSignerInput documentTagId(String documentTagId) {
    
    
    
    
    this.documentTagId = documentTagId;
    return this;
  }

   /**
   * This references the ID of a specific tag contained in a file of the sign request.
   * @return documentTagId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234", value = "This references the ID of a specific tag contained in a file of the sign request.")

  public String getDocumentTagId() {
    return documentTagId;
  }


  public void setDocumentTagId(String documentTagId) {
    
    
    
    this.documentTagId = documentTagId;
  }


  public SignRequestSignerInput textValue(String textValue) {
    
    
    
    
    this.textValue = textValue;
    return this;
  }

   /**
   * Text prefill value
   * @return textValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "text", value = "Text prefill value")

  public String getTextValue() {
    return textValue;
  }


  public void setTextValue(String textValue) {
    
    
    
    this.textValue = textValue;
  }


  public SignRequestSignerInput checkboxValue(Boolean checkboxValue) {
    
    
    
    
    this.checkboxValue = checkboxValue;
    return this;
  }

   /**
   * Checkbox prefill value
   * @return checkboxValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Checkbox prefill value")

  public Boolean getCheckboxValue() {
    return checkboxValue;
  }


  public void setCheckboxValue(Boolean checkboxValue) {
    
    
    
    this.checkboxValue = checkboxValue;
  }


  public SignRequestSignerInput dateValue(LocalDate dateValue) {
    
    
    
    
    this.dateValue = dateValue;
    return this;
  }

   /**
   * Date prefill value
   * @return dateValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sun Apr 25 17:00:00 PDT 2021", value = "Date prefill value")

  public LocalDate getDateValue() {
    return dateValue;
  }


  public void setDateValue(LocalDate dateValue) {
    
    
    
    this.dateValue = dateValue;
  }


  public SignRequestSignerInput type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Type of input
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TEXT", value = "Type of input")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public SignRequestSignerInput contentType(ContentTypeEnum contentType) {
    
    
    
    
    this.contentType = contentType;
    return this;
  }

   /**
   * Content type of input
   * @return contentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SIGNATURE", value = "Content type of input")

  public ContentTypeEnum getContentType() {
    return contentType;
  }


  public void setContentType(ContentTypeEnum contentType) {
    
    
    
    this.contentType = contentType;
  }


  public SignRequestSignerInput pageIndex(Integer pageIndex) {
    
    
    
    
    this.pageIndex = pageIndex;
    return this;
  }

   /**
   * Index of page that the input is on
   * @return pageIndex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4", required = true, value = "Index of page that the input is on")

  public Integer getPageIndex() {
    return pageIndex;
  }


  public void setPageIndex(Integer pageIndex) {
    
    
    
    this.pageIndex = pageIndex;
  }


  public SignRequestSignerInput readOnly(Boolean readOnly) {
    
    
    
    
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Whether this input was defined as read-only(immutable by signers) or not
   * @return readOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether this input was defined as read-only(immutable by signers) or not")

  public Boolean getReadOnly() {
    return readOnly;
  }


  public void setReadOnly(Boolean readOnly) {
    
    
    
    this.readOnly = readOnly;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SignRequestSignerInput instance itself
   */
  public SignRequestSignerInput putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignRequestSignerInput signRequestSignerInput = (SignRequestSignerInput) o;
    return Objects.equals(this.documentTagId, signRequestSignerInput.documentTagId) &&
        Objects.equals(this.textValue, signRequestSignerInput.textValue) &&
        Objects.equals(this.checkboxValue, signRequestSignerInput.checkboxValue) &&
        Objects.equals(this.dateValue, signRequestSignerInput.dateValue) &&
        Objects.equals(this.type, signRequestSignerInput.type) &&
        Objects.equals(this.contentType, signRequestSignerInput.contentType) &&
        Objects.equals(this.pageIndex, signRequestSignerInput.pageIndex) &&
        Objects.equals(this.readOnly, signRequestSignerInput.readOnly)&&
        Objects.equals(this.additionalProperties, signRequestSignerInput.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentTagId, textValue, checkboxValue, dateValue, type, contentType, pageIndex, readOnly, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignRequestSignerInput {\n");
    sb.append("    documentTagId: ").append(toIndentedString(documentTagId)).append("\n");
    sb.append("    textValue: ").append(toIndentedString(textValue)).append("\n");
    sb.append("    checkboxValue: ").append(toIndentedString(checkboxValue)).append("\n");
    sb.append("    dateValue: ").append(toIndentedString(dateValue)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    pageIndex: ").append(toIndentedString(pageIndex)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document_tag_id");
    openapiFields.add("text_value");
    openapiFields.add("checkbox_value");
    openapiFields.add("date_value");
    openapiFields.add("type");
    openapiFields.add("content_type");
    openapiFields.add("page_index");
    openapiFields.add("read_only");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("page_index");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SignRequestSignerInput
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SignRequestSignerInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignRequestSignerInput is not found in the empty JSON string", SignRequestSignerInput.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SignRequestSignerInput.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("document_tag_id").isJsonNull() && (jsonObj.get("document_tag_id") != null && !jsonObj.get("document_tag_id").isJsonNull()) && !jsonObj.get("document_tag_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_tag_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_tag_id").toString()));
      }
      if (!jsonObj.get("text_value").isJsonNull() && (jsonObj.get("text_value") != null && !jsonObj.get("text_value").isJsonNull()) && !jsonObj.get("text_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_value").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignRequestSignerInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignRequestSignerInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignRequestSignerInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignRequestSignerInput.class));

       return (TypeAdapter<T>) new TypeAdapter<SignRequestSignerInput>() {
           @Override
           public void write(JsonWriter out, SignRequestSignerInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SignRequestSignerInput read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SignRequestSignerInput instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SignRequestSignerInput given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SignRequestSignerInput
  * @throws IOException if the JSON string is invalid with respect to SignRequestSignerInput
  */
  public static SignRequestSignerInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignRequestSignerInput.class);
  }

 /**
  * Convert an instance of SignRequestSignerInput to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

