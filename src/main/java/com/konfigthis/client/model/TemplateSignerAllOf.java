/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TemplateSignerInput;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TemplateSignerAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TemplateSignerAllOf {
  public static final String SERIALIZED_NAME_INPUTS = "inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List<TemplateSignerInput> inputs = null;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  /**
   * Defines the role of the signer in the signature request. A role of &#x60;signer&#x60; needs to sign the document, a role &#x60;approver&#x60; approves the document and a &#x60;final_copy_reader&#x60; role only receives the final signed document and signing log.
   */
  @JsonAdapter(RoleEnum.Adapter.class)
 public enum RoleEnum {
    SIGNER("signer"),
    
    APPROVER("approver"),
    
    FINAL_COPY_READER("final_copy_reader");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role = RoleEnum.SIGNER;

  public static final String SERIALIZED_NAME_IS_IN_PERSON = "is_in_person";
  @SerializedName(SERIALIZED_NAME_IS_IN_PERSON)
  private Boolean isInPerson;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_SIGNER_GROUP_ID = "signer_group_id";
  @SerializedName(SERIALIZED_NAME_SIGNER_GROUP_ID)
  private String signerGroupId;

  public TemplateSignerAllOf() {
  }

  
  public TemplateSignerAllOf(
     List<TemplateSignerInput> inputs
  ) {
    this();
    this.inputs = inputs;
  }

   /**
   * Get inputs
   * @return inputs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TemplateSignerInput> getInputs() {
    return inputs;
  }




  public TemplateSignerAllOf email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Email address of the signer
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example@mail.com", value = "Email address of the signer")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public TemplateSignerAllOf role(RoleEnum role) {
    
    
    
    
    this.role = role;
    return this;
  }

   /**
   * Defines the role of the signer in the signature request. A role of &#x60;signer&#x60; needs to sign the document, a role &#x60;approver&#x60; approves the document and a &#x60;final_copy_reader&#x60; role only receives the final signed document and signing log.
   * @return role
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SIGNER", value = "Defines the role of the signer in the signature request. A role of `signer` needs to sign the document, a role `approver` approves the document and a `final_copy_reader` role only receives the final signed document and signing log.")

  public RoleEnum getRole() {
    return role;
  }


  public void setRole(RoleEnum role) {
    
    
    
    this.role = role;
  }


  public TemplateSignerAllOf isInPerson(Boolean isInPerson) {
    
    
    
    
    this.isInPerson = isInPerson;
    return this;
  }

   /**
   * Used in combination with an embed URL for a sender. After the sender signs, they will be redirected to the next &#x60;in_person&#x60; signer.
   * @return isInPerson
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Used in combination with an embed URL for a sender. After the sender signs, they will be redirected to the next `in_person` signer.")

  public Boolean getIsInPerson() {
    return isInPerson;
  }


  public void setIsInPerson(Boolean isInPerson) {
    
    
    
    this.isInPerson = isInPerson;
  }


  public TemplateSignerAllOf order(Integer order) {
    if (order != null && order < 0) {
      throw new IllegalArgumentException("Invalid value for order. Must be greater than or equal to 0.");
    }
    
    
    
    this.order = order;
    return this;
  }

   /**
   * Order of the signer
   * minimum: 0
   * @return order
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Order of the signer")

  public Integer getOrder() {
    return order;
  }


  public void setOrder(Integer order) {
    if (order != null && order < 0) {
      throw new IllegalArgumentException("Invalid value for order. Must be greater than or equal to 0.");
    }
    
    
    this.order = order;
  }


  public TemplateSignerAllOf signerGroupId(String signerGroupId) {
    
    
    
    
    this.signerGroupId = signerGroupId;
    return this;
  }

   /**
   * If provided, this value points signers that are assigned the same inputs and belongs to same signer group. A signer group is not a Box Group. It is an entity that belongs to the template itself and can only be used within Sign Requests created from it.
   * @return signerGroupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "cd4ff89-8fc1-42cf-8b29-1890dedd26d7", value = "If provided, this value points signers that are assigned the same inputs and belongs to same signer group. A signer group is not a Box Group. It is an entity that belongs to the template itself and can only be used within Sign Requests created from it.")

  public String getSignerGroupId() {
    return signerGroupId;
  }


  public void setSignerGroupId(String signerGroupId) {
    
    
    
    this.signerGroupId = signerGroupId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TemplateSignerAllOf instance itself
   */
  public TemplateSignerAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateSignerAllOf templateSignerAllOf = (TemplateSignerAllOf) o;
    return Objects.equals(this.inputs, templateSignerAllOf.inputs) &&
        Objects.equals(this.email, templateSignerAllOf.email) &&
        Objects.equals(this.role, templateSignerAllOf.role) &&
        Objects.equals(this.isInPerson, templateSignerAllOf.isInPerson) &&
        Objects.equals(this.order, templateSignerAllOf.order) &&
        Objects.equals(this.signerGroupId, templateSignerAllOf.signerGroupId)&&
        Objects.equals(this.additionalProperties, templateSignerAllOf.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputs, email, role, isInPerson, order, signerGroupId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateSignerAllOf {\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    isInPerson: ").append(toIndentedString(isInPerson)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    signerGroupId: ").append(toIndentedString(signerGroupId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inputs");
    openapiFields.add("email");
    openapiFields.add("role");
    openapiFields.add("is_in_person");
    openapiFields.add("order");
    openapiFields.add("signer_group_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TemplateSignerAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TemplateSignerAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateSignerAllOf is not found in the empty JSON string", TemplateSignerAllOf.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("inputs") != null && !jsonObj.get("inputs").isJsonNull()) {
        JsonArray jsonArrayinputs = jsonObj.getAsJsonArray("inputs");
        if (jsonArrayinputs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputs` to be an array in the JSON string but got `%s`", jsonObj.get("inputs").toString()));
          }

          // validate the optional field `inputs` (array)
          for (int i = 0; i < jsonArrayinputs.size(); i++) {
            TemplateSignerInput.validateJsonObject(jsonArrayinputs.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("email").isJsonNull() && (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if (!jsonObj.get("signer_group_id").isJsonNull() && (jsonObj.get("signer_group_id") != null && !jsonObj.get("signer_group_id").isJsonNull()) && !jsonObj.get("signer_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signer_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signer_group_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateSignerAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateSignerAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateSignerAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateSignerAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateSignerAllOf>() {
           @Override
           public void write(JsonWriter out, TemplateSignerAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateSignerAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TemplateSignerAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TemplateSignerAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TemplateSignerAllOf
  * @throws IOException if the JSON string is invalid with respect to TemplateSignerAllOf
  */
  public static TemplateSignerAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateSignerAllOf.class);
  }

 /**
  * Convert an instance of TemplateSignerAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

