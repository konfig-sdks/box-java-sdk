/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FoldersUpdateFolderRequestFolderUploadEmail;
import com.konfigthis.client.model.FoldersUpdateFolderRequestParent;
import com.konfigthis.client.model.FoldersUpdateFolderRequestSharedLink;
import com.konfigthis.client.model.Reference2;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FoldersUpdateFolderRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FoldersUpdateFolderRequest {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Specifies whether a folder should be synced to a user&#39;s device or not. This is used by Box Sync (discontinued) and is not used by Box Drive.
   */
  @JsonAdapter(SyncStateEnum.Adapter.class)
 public enum SyncStateEnum {
    SYNCED("synced"),
    
    NOT_SYNCED("not_synced"),
    
    PARTIALLY_SYNCED("partially_synced");

    private String value;

    SyncStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncStateEnum fromValue(String value) {
      for (SyncStateEnum b : SyncStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncStateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SYNC_STATE = "sync_state";
  @SerializedName(SERIALIZED_NAME_SYNC_STATE)
  private SyncStateEnum syncState;

  public static final String SERIALIZED_NAME_CAN_NON_OWNERS_INVITE = "can_non_owners_invite";
  @SerializedName(SERIALIZED_NAME_CAN_NON_OWNERS_INVITE)
  private Boolean canNonOwnersInvite;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private FoldersUpdateFolderRequestParent parent;

  public static final String SERIALIZED_NAME_SHARED_LINK = "shared_link";
  @SerializedName(SERIALIZED_NAME_SHARED_LINK)
  private FoldersUpdateFolderRequestSharedLink sharedLink;

  public static final String SERIALIZED_NAME_FOLDER_UPLOAD_EMAIL = "folder_upload_email";
  @SerializedName(SERIALIZED_NAME_FOLDER_UPLOAD_EMAIL)
  private FoldersUpdateFolderRequestFolderUploadEmail folderUploadEmail;

  public static final String SERIALIZED_NAME_IS_COLLABORATION_RESTRICTED_TO_ENTERPRISE = "is_collaboration_restricted_to_enterprise";
  @SerializedName(SERIALIZED_NAME_IS_COLLABORATION_RESTRICTED_TO_ENTERPRISE)
  private Boolean isCollaborationRestrictedToEnterprise;

  public static final String SERIALIZED_NAME_COLLECTIONS = "collections";
  @SerializedName(SERIALIZED_NAME_COLLECTIONS)
  private List<Reference2> collections = null;

  public static final String SERIALIZED_NAME_CAN_NON_OWNERS_VIEW_COLLABORATORS = "can_non_owners_view_collaborators";
  @SerializedName(SERIALIZED_NAME_CAN_NON_OWNERS_VIEW_COLLABORATORS)
  private Boolean canNonOwnersViewCollaborators;

  public FoldersUpdateFolderRequest() {
  }

  public FoldersUpdateFolderRequest tags(List<String> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public FoldersUpdateFolderRequest addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags for this item. These tags are shown in the Box web app and mobile apps next to an item.  To add or remove a tag, retrieve the item&#39;s current tags, modify them, and then update this field.  There is a limit of 100 tags per item, and 10,000 unique tags per enterprise.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"approved\"]", value = "The tags for this item. These tags are shown in the Box web app and mobile apps next to an item.  To add or remove a tag, retrieve the item's current tags, modify them, and then update this field.  There is a limit of 100 tags per item, and 10,000 unique tags per enterprise.")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    
    
    
    this.tags = tags;
  }


  public FoldersUpdateFolderRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The optional description of this folder
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Legal contracts for the new ACME deal", value = "The optional description of this folder")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public FoldersUpdateFolderRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The optional new name for this folder.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "New Folder", value = "The optional new name for this folder.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public FoldersUpdateFolderRequest syncState(SyncStateEnum syncState) {
    
    
    
    
    this.syncState = syncState;
    return this;
  }

   /**
   * Specifies whether a folder should be synced to a user&#39;s device or not. This is used by Box Sync (discontinued) and is not used by Box Drive.
   * @return syncState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SYNCED", value = "Specifies whether a folder should be synced to a user's device or not. This is used by Box Sync (discontinued) and is not used by Box Drive.")

  public SyncStateEnum getSyncState() {
    return syncState;
  }


  public void setSyncState(SyncStateEnum syncState) {
    
    
    
    this.syncState = syncState;
  }


  public FoldersUpdateFolderRequest canNonOwnersInvite(Boolean canNonOwnersInvite) {
    
    
    
    
    this.canNonOwnersInvite = canNonOwnersInvite;
    return this;
  }

   /**
   * Specifies if users who are not the owner of the folder can invite new collaborators to the folder.
   * @return canNonOwnersInvite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies if users who are not the owner of the folder can invite new collaborators to the folder.")

  public Boolean getCanNonOwnersInvite() {
    return canNonOwnersInvite;
  }


  public void setCanNonOwnersInvite(Boolean canNonOwnersInvite) {
    
    
    
    this.canNonOwnersInvite = canNonOwnersInvite;
  }


  public FoldersUpdateFolderRequest parent(FoldersUpdateFolderRequestParent parent) {
    
    
    
    
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FoldersUpdateFolderRequestParent getParent() {
    return parent;
  }


  public void setParent(FoldersUpdateFolderRequestParent parent) {
    
    
    
    this.parent = parent;
  }


  public FoldersUpdateFolderRequest sharedLink(FoldersUpdateFolderRequestSharedLink sharedLink) {
    
    
    
    
    this.sharedLink = sharedLink;
    return this;
  }

   /**
   * Get sharedLink
   * @return sharedLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FoldersUpdateFolderRequestSharedLink getSharedLink() {
    return sharedLink;
  }


  public void setSharedLink(FoldersUpdateFolderRequestSharedLink sharedLink) {
    
    
    
    this.sharedLink = sharedLink;
  }


  public FoldersUpdateFolderRequest folderUploadEmail(FoldersUpdateFolderRequestFolderUploadEmail folderUploadEmail) {
    
    
    
    
    this.folderUploadEmail = folderUploadEmail;
    return this;
  }

   /**
   * Get folderUploadEmail
   * @return folderUploadEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FoldersUpdateFolderRequestFolderUploadEmail getFolderUploadEmail() {
    return folderUploadEmail;
  }


  public void setFolderUploadEmail(FoldersUpdateFolderRequestFolderUploadEmail folderUploadEmail) {
    
    
    
    this.folderUploadEmail = folderUploadEmail;
  }


  public FoldersUpdateFolderRequest isCollaborationRestrictedToEnterprise(Boolean isCollaborationRestrictedToEnterprise) {
    
    
    
    
    this.isCollaborationRestrictedToEnterprise = isCollaborationRestrictedToEnterprise;
    return this;
  }

   /**
   * Specifies if new invites to this folder are restricted to users within the enterprise. This does not affect existing collaborations.
   * @return isCollaborationRestrictedToEnterprise
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies if new invites to this folder are restricted to users within the enterprise. This does not affect existing collaborations.")

  public Boolean getIsCollaborationRestrictedToEnterprise() {
    return isCollaborationRestrictedToEnterprise;
  }


  public void setIsCollaborationRestrictedToEnterprise(Boolean isCollaborationRestrictedToEnterprise) {
    
    
    
    this.isCollaborationRestrictedToEnterprise = isCollaborationRestrictedToEnterprise;
  }


  public FoldersUpdateFolderRequest collections(List<Reference2> collections) {
    
    
    
    
    this.collections = collections;
    return this;
  }

  public FoldersUpdateFolderRequest addCollectionsItem(Reference2 collectionsItem) {
    if (this.collections == null) {
      this.collections = new ArrayList<>();
    }
    this.collections.add(collectionsItem);
    return this;
  }

   /**
   * An array of collections to make this folder a member of. Currently we only support the &#x60;favorites&#x60; collection.  To get the ID for a collection, use the [List all collections][1] endpoint.  Passing an empty array &#x60;[]&#x60; or &#x60;null&#x60; will remove the folder from all collections.  [1]: e://get-collections
   * @return collections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of collections to make this folder a member of. Currently we only support the `favorites` collection.  To get the ID for a collection, use the [List all collections][1] endpoint.  Passing an empty array `[]` or `null` will remove the folder from all collections.  [1]: e://get-collections")

  public List<Reference2> getCollections() {
    return collections;
  }


  public void setCollections(List<Reference2> collections) {
    
    
    
    this.collections = collections;
  }


  public FoldersUpdateFolderRequest canNonOwnersViewCollaborators(Boolean canNonOwnersViewCollaborators) {
    
    
    
    
    this.canNonOwnersViewCollaborators = canNonOwnersViewCollaborators;
    return this;
  }

   /**
   * Restricts collaborators who are not the owner of this folder from viewing other collaborations on this folder.  It also restricts non-owners from inviting new collaborators.  When setting this field to &#x60;false&#x60;, it is required to also set &#x60;can_non_owners_invite_collaborators&#x60; to &#x60;false&#x60; if it has not already been set.
   * @return canNonOwnersViewCollaborators
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Restricts collaborators who are not the owner of this folder from viewing other collaborations on this folder.  It also restricts non-owners from inviting new collaborators.  When setting this field to `false`, it is required to also set `can_non_owners_invite_collaborators` to `false` if it has not already been set.")

  public Boolean getCanNonOwnersViewCollaborators() {
    return canNonOwnersViewCollaborators;
  }


  public void setCanNonOwnersViewCollaborators(Boolean canNonOwnersViewCollaborators) {
    
    
    
    this.canNonOwnersViewCollaborators = canNonOwnersViewCollaborators;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FoldersUpdateFolderRequest instance itself
   */
  public FoldersUpdateFolderRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FoldersUpdateFolderRequest foldersUpdateFolderRequest = (FoldersUpdateFolderRequest) o;
    return Objects.equals(this.tags, foldersUpdateFolderRequest.tags) &&
        Objects.equals(this.description, foldersUpdateFolderRequest.description) &&
        Objects.equals(this.name, foldersUpdateFolderRequest.name) &&
        Objects.equals(this.syncState, foldersUpdateFolderRequest.syncState) &&
        Objects.equals(this.canNonOwnersInvite, foldersUpdateFolderRequest.canNonOwnersInvite) &&
        Objects.equals(this.parent, foldersUpdateFolderRequest.parent) &&
        Objects.equals(this.sharedLink, foldersUpdateFolderRequest.sharedLink) &&
        Objects.equals(this.folderUploadEmail, foldersUpdateFolderRequest.folderUploadEmail) &&
        Objects.equals(this.isCollaborationRestrictedToEnterprise, foldersUpdateFolderRequest.isCollaborationRestrictedToEnterprise) &&
        Objects.equals(this.collections, foldersUpdateFolderRequest.collections) &&
        Objects.equals(this.canNonOwnersViewCollaborators, foldersUpdateFolderRequest.canNonOwnersViewCollaborators)&&
        Objects.equals(this.additionalProperties, foldersUpdateFolderRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, description, name, syncState, canNonOwnersInvite, parent, sharedLink, folderUploadEmail, isCollaborationRestrictedToEnterprise, collections, canNonOwnersViewCollaborators, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FoldersUpdateFolderRequest {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    syncState: ").append(toIndentedString(syncState)).append("\n");
    sb.append("    canNonOwnersInvite: ").append(toIndentedString(canNonOwnersInvite)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    sharedLink: ").append(toIndentedString(sharedLink)).append("\n");
    sb.append("    folderUploadEmail: ").append(toIndentedString(folderUploadEmail)).append("\n");
    sb.append("    isCollaborationRestrictedToEnterprise: ").append(toIndentedString(isCollaborationRestrictedToEnterprise)).append("\n");
    sb.append("    collections: ").append(toIndentedString(collections)).append("\n");
    sb.append("    canNonOwnersViewCollaborators: ").append(toIndentedString(canNonOwnersViewCollaborators)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("sync_state");
    openapiFields.add("can_non_owners_invite");
    openapiFields.add("parent");
    openapiFields.add("shared_link");
    openapiFields.add("folder_upload_email");
    openapiFields.add("is_collaboration_restricted_to_enterprise");
    openapiFields.add("collections");
    openapiFields.add("can_non_owners_view_collaborators");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FoldersUpdateFolderRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FoldersUpdateFolderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FoldersUpdateFolderRequest is not found in the empty JSON string", FoldersUpdateFolderRequest.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sync_state") != null && !jsonObj.get("sync_state").isJsonNull()) && !jsonObj.get("sync_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_state").toString()));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        FoldersUpdateFolderRequestParent.validateJsonObject(jsonObj.getAsJsonObject("parent"));
      }
      // validate the optional field `shared_link`
      if (jsonObj.get("shared_link") != null && !jsonObj.get("shared_link").isJsonNull()) {
        FoldersUpdateFolderRequestSharedLink.validateJsonObject(jsonObj.getAsJsonObject("shared_link"));
      }
      // validate the optional field `folder_upload_email`
      if (jsonObj.get("folder_upload_email") != null && !jsonObj.get("folder_upload_email").isJsonNull()) {
        FoldersUpdateFolderRequestFolderUploadEmail.validateJsonObject(jsonObj.getAsJsonObject("folder_upload_email"));
      }
      if (jsonObj.get("collections") != null && !jsonObj.get("collections").isJsonNull()) {
        JsonArray jsonArraycollections = jsonObj.getAsJsonArray("collections");
        if (jsonArraycollections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("collections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `collections` to be an array in the JSON string but got `%s`", jsonObj.get("collections").toString()));
          }

          // validate the optional field `collections` (array)
          for (int i = 0; i < jsonArraycollections.size(); i++) {
            Reference2.validateJsonObject(jsonArraycollections.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FoldersUpdateFolderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FoldersUpdateFolderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FoldersUpdateFolderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FoldersUpdateFolderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FoldersUpdateFolderRequest>() {
           @Override
           public void write(JsonWriter out, FoldersUpdateFolderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FoldersUpdateFolderRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FoldersUpdateFolderRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FoldersUpdateFolderRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FoldersUpdateFolderRequest
  * @throws IOException if the JSON string is invalid with respect to FoldersUpdateFolderRequest
  */
  public static FoldersUpdateFolderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FoldersUpdateFolderRequest.class);
  }

 /**
  * Convert an instance of FoldersUpdateFolderRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

