/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.UserAllOfNotificationEmail;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UserAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UserAllOf {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_SPACE_AMOUNT = "space_amount";
  @SerializedName(SERIALIZED_NAME_SPACE_AMOUNT)
  private Long spaceAmount;

  public static final String SERIALIZED_NAME_SPACE_USED = "space_used";
  @SerializedName(SERIALIZED_NAME_SPACE_USED)
  private Long spaceUsed;

  public static final String SERIALIZED_NAME_MAX_UPLOAD_SIZE = "max_upload_size";
  @SerializedName(SERIALIZED_NAME_MAX_UPLOAD_SIZE)
  private Long maxUploadSize;

  /**
   * The user&#39;s account status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("active"),
    
    INACTIVE("inactive"),
    
    CANNOT_DELETE_EDIT("cannot_delete_edit"),
    
    CANNOT_DELETE_EDIT_UPLOAD("cannot_delete_edit_upload");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_NOTIFICATION_EMAIL = "notification_email";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_EMAIL)
  private UserAllOfNotificationEmail notificationEmail;

  public UserAllOf() {
  }

  public UserAllOf createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When the user object was created
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "When the user object was created")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public UserAllOf modifiedAt(OffsetDateTime modifiedAt) {
    
    
    
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * When the user object was last modified
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-12-12T10:53:43-08:00", value = "When the user object was last modified")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(OffsetDateTime modifiedAt) {
    
    
    
    this.modifiedAt = modifiedAt;
  }


  public UserAllOf language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * The language of the user, formatted in modified version of the [ISO 639-1](https://raw.githubusercontent.com) format.
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en", value = "The language of the user, formatted in modified version of the [ISO 639-1](https://raw.githubusercontent.com) format.")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public UserAllOf timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The user&#39;s timezone
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Africa/Bujumbura", value = "The user's timezone")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public UserAllOf spaceAmount(Long spaceAmount) {
    
    
    
    
    this.spaceAmount = spaceAmount;
    return this;
  }

   /**
   * The user’s total available space amount in bytes
   * @return spaceAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11345156112", value = "The user’s total available space amount in bytes")

  public Long getSpaceAmount() {
    return spaceAmount;
  }


  public void setSpaceAmount(Long spaceAmount) {
    
    
    
    this.spaceAmount = spaceAmount;
  }


  public UserAllOf spaceUsed(Long spaceUsed) {
    
    
    
    
    this.spaceUsed = spaceUsed;
    return this;
  }

   /**
   * The amount of space in use by the user
   * @return spaceUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1237009912", value = "The amount of space in use by the user")

  public Long getSpaceUsed() {
    return spaceUsed;
  }


  public void setSpaceUsed(Long spaceUsed) {
    
    
    
    this.spaceUsed = spaceUsed;
  }


  public UserAllOf maxUploadSize(Long maxUploadSize) {
    
    
    
    
    this.maxUploadSize = maxUploadSize;
    return this;
  }

   /**
   * The maximum individual file size in bytes the user can have
   * @return maxUploadSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2147483648", value = "The maximum individual file size in bytes the user can have")

  public Long getMaxUploadSize() {
    return maxUploadSize;
  }


  public void setMaxUploadSize(Long maxUploadSize) {
    
    
    
    this.maxUploadSize = maxUploadSize;
  }


  public UserAllOf status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The user&#39;s account status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACTIVE", value = "The user's account status")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public UserAllOf jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * The user’s job title
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CEO", value = "The user’s job title")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public UserAllOf phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * The user’s phone number
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6509241374", value = "The user’s phone number")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public UserAllOf address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * The user’s address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "900 Jefferson Ave, Redwood City, CA 94063", value = "The user’s address")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public UserAllOf avatarUrl(String avatarUrl) {
    
    
    
    
    this.avatarUrl = avatarUrl;
    return this;
  }

   /**
   * URL of the user’s avatar image
   * @return avatarUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.box.com/api/avatar/large/181216415", value = "URL of the user’s avatar image")

  public String getAvatarUrl() {
    return avatarUrl;
  }


  public void setAvatarUrl(String avatarUrl) {
    
    
    
    this.avatarUrl = avatarUrl;
  }


  public UserAllOf notificationEmail(UserAllOfNotificationEmail notificationEmail) {
    
    
    
    
    this.notificationEmail = notificationEmail;
    return this;
  }

   /**
   * Get notificationEmail
   * @return notificationEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserAllOfNotificationEmail getNotificationEmail() {
    return notificationEmail;
  }


  public void setNotificationEmail(UserAllOfNotificationEmail notificationEmail) {
    
    
    
    this.notificationEmail = notificationEmail;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UserAllOf instance itself
   */
  public UserAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAllOf userAllOf = (UserAllOf) o;
    return Objects.equals(this.createdAt, userAllOf.createdAt) &&
        Objects.equals(this.modifiedAt, userAllOf.modifiedAt) &&
        Objects.equals(this.language, userAllOf.language) &&
        Objects.equals(this.timezone, userAllOf.timezone) &&
        Objects.equals(this.spaceAmount, userAllOf.spaceAmount) &&
        Objects.equals(this.spaceUsed, userAllOf.spaceUsed) &&
        Objects.equals(this.maxUploadSize, userAllOf.maxUploadSize) &&
        Objects.equals(this.status, userAllOf.status) &&
        Objects.equals(this.jobTitle, userAllOf.jobTitle) &&
        Objects.equals(this.phone, userAllOf.phone) &&
        Objects.equals(this.address, userAllOf.address) &&
        Objects.equals(this.avatarUrl, userAllOf.avatarUrl) &&
        Objects.equals(this.notificationEmail, userAllOf.notificationEmail)&&
        Objects.equals(this.additionalProperties, userAllOf.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, modifiedAt, language, timezone, spaceAmount, spaceUsed, maxUploadSize, status, jobTitle, phone, address, avatarUrl, notificationEmail, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAllOf {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    spaceAmount: ").append(toIndentedString(spaceAmount)).append("\n");
    sb.append("    spaceUsed: ").append(toIndentedString(spaceUsed)).append("\n");
    sb.append("    maxUploadSize: ").append(toIndentedString(maxUploadSize)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    notificationEmail: ").append(toIndentedString(notificationEmail)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("modified_at");
    openapiFields.add("language");
    openapiFields.add("timezone");
    openapiFields.add("space_amount");
    openapiFields.add("space_used");
    openapiFields.add("max_upload_size");
    openapiFields.add("status");
    openapiFields.add("job_title");
    openapiFields.add("phone");
    openapiFields.add("address");
    openapiFields.add("avatar_url");
    openapiFields.add("notification_email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserAllOf is not found in the empty JSON string", UserAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("job_title") != null && !jsonObj.get("job_title").isJsonNull()) && !jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      // validate the optional field `notification_email`
      if (jsonObj.get("notification_email") != null && !jsonObj.get("notification_email").isJsonNull()) {
        UserAllOfNotificationEmail.validateJsonObject(jsonObj.getAsJsonObject("notification_email"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<UserAllOf>() {
           @Override
           public void write(JsonWriter out, UserAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UserAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UserAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserAllOf
  * @throws IOException if the JSON string is invalid with respect to UserAllOf
  */
  public static UserAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserAllOf.class);
  }

 /**
  * Convert an instance of UserAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

