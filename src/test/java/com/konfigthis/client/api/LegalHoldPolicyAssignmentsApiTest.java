/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FileVersionLegalHolds;
import com.konfigthis.client.model.LegalHoldPolicyAssignment;
import com.konfigthis.client.model.LegalHoldPolicyAssignments;
import com.konfigthis.client.model.LegalHoldPolicyAssignmentsAssignFileLegalHoldRequest;
import com.konfigthis.client.model.LegalHoldPolicyAssignmentsAssignFileLegalHoldRequestAssignTo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LegalHoldPolicyAssignmentsApi
 */
@Disabled
public class LegalHoldPolicyAssignmentsApiTest {

    private static LegalHoldPolicyAssignmentsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new LegalHoldPolicyAssignmentsApi(apiClient);
    }

    /**
     * Assign legal hold policy
     *
     * Assign a legal hold to a file, file version, folder, or user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignFileLegalHoldTest() throws ApiException {
        String policyId = null;
        LegalHoldPolicyAssignmentsAssignFileLegalHoldRequestAssignTo assignTo = null;
        LegalHoldPolicyAssignment response = api.assignFileLegalHold(policyId, assignTo)
                .execute();
        // TODO: test validations
    }

    /**
     * Get legal hold policy assignment
     *
     * Retrieve a legal hold policy assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssignmentTest() throws ApiException {
        String legalHoldPolicyAssignmentId = null;
        LegalHoldPolicyAssignment response = api.getAssignment(legalHoldPolicyAssignmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * List legal hold policy assignments
     *
     * Retrieves a list of items a legal hold policy has been assigned to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListItemsTest() throws ApiException {
        String policyId = null;
        String assignToType = null;
        String assignToId = null;
        String marker = null;
        Long limit = null;
        List<String> fields = null;
        LegalHoldPolicyAssignments response = api.getListItems(policyId)
                .assignToType(assignToType)
                .assignToId(assignToId)
                .marker(marker)
                .limit(limit)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * List current file versions for legal hold policy assignment
     *
     * Get a list of current file versions for a legal hold assignment.  In some cases you may want to get previous file versions instead. In these cases, use the &#x60;GET  /legal_hold_policy_assignments/:id/file_versions_on_hold&#x60; API instead to return any previous versions of a file for this legal hold policy assignment.  Due to ongoing re-architecture efforts this API might not return all file versions held for this policy ID. Instead, this API will only return the latest file version held in the newly developed architecture. The &#x60;GET /file_version_legal_holds&#x60; API can be used to fetch current and past versions of files held within the legacy architecture.  The &#x60;GET /legal_hold_policy_assignments?policy_id&#x3D;{id}&#x60; API can be used to find a list of policy assignments for a given policy ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFileVersionsTest() throws ApiException {
        String legalHoldPolicyAssignmentId = null;
        String marker = null;
        Long limit = null;
        List<String> fields = null;
        FileVersionLegalHolds response = api.listFileVersions(legalHoldPolicyAssignmentId)
                .marker(marker)
                .limit(limit)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * List previous file versions for legal hold policy assignment
     *
     * Get a list of previous file versions for a legal hold assignment.  In some cases you may only need the latest file versions instead. In these cases, use the &#x60;GET  /legal_hold_policy_assignments/:id/files_on_hold&#x60; API instead to return any current (latest) versions of a file for this legal hold policy assignment.  Due to ongoing re-architecture efforts this API might not return all files held for this policy ID. Instead, this API will only return past file versions held in the newly developed architecture. The &#x60;GET /file_version_legal_holds&#x60; API can be used to fetch current and past versions of files held within the legacy architecture.  The &#x60;GET /legal_hold_policy_assignments?policy_id&#x3D;{id}&#x60; API can be used to find a list of policy assignments for a given policy ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPreviousFileVersionsTest() throws ApiException {
        String legalHoldPolicyAssignmentId = null;
        String marker = null;
        Long limit = null;
        List<String> fields = null;
        FileVersionLegalHolds response = api.listPreviousFileVersions(legalHoldPolicyAssignmentId)
                .marker(marker)
                .limit(limit)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * Unassign legal hold policy
     *
     * Remove a legal hold from an item.  This is an asynchronous process. The policy will not be fully removed yet when the response returns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unassignPolicyTest() throws ApiException {
        String legalHoldPolicyAssignmentId = null;
        api.unassignPolicy(legalHoldPolicyAssignmentId)
                .execute();
        // TODO: test validations
    }

}
