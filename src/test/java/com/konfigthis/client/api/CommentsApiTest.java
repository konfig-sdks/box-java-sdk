/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.CommentFull;
import com.konfigthis.client.model.Comments;
import com.konfigthis.client.model.CommentsUpdateMessageRequest;
import com.konfigthis.client.model.PostCommentsRequest;
import com.konfigthis.client.model.PostCommentsRequestItem;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommentsApi
 */
@Disabled
public class CommentsApiTest {

    private static CommentsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CommentsApi(apiClient);
    }

    /**
     * Create comment
     *
     * Adds a comment by the user to a specific file, or as a reply to an other comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commentsTest() throws ApiException {
        String message = null;
        PostCommentsRequestItem item = null;
        String taggedMessage = null;
        List<String> fields = null;
        CommentFull response = api.comments(message, item)
                .taggedMessage(taggedMessage)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get comment
     *
     * Retrieves the message and metadata for a specific comment, as well as information on the user who created the comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String commentId = null;
        List<String> fields = null;
        CommentFull response = api.getById(commentId)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * List file comments
     *
     * Retrieves a list of comments for a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFileCommentsTest() throws ApiException {
        String fileId = null;
        List<String> fields = null;
        Long limit = null;
        Long offset = null;
        Comments response = api.listFileComments(fileId)
                .fields(fields)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove comment
     *
     * Permanently deletes a comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String commentId = null;
        api.removeById(commentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update comment
     *
     * Update the message of a comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMessageTest() throws ApiException {
        String commentId = null;
        String message = null;
        List<String> fields = null;
        CommentFull response = api.updateMessage(commentId)
                .message(message)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

}
