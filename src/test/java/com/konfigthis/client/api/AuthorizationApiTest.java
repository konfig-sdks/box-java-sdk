/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AccessToken;
import com.konfigthis.client.model.OAuth2Error;
import com.konfigthis.client.model.PostOAuth2Revoke;
import com.konfigthis.client.model.PostOAuth2Token;
import com.konfigthis.client.model.PostOAuth2TokenRefreshAccessToken;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthorizationApi
 */
@Disabled
public class AuthorizationApiTest {

    private static AuthorizationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AuthorizationApi(apiClient);
    }

    /**
     * Authorize user
     *
     * Authorize a user by sending them through the [Box](https://box.com) website and request their permission to act on their behalf.  This is the first step when authenticating a user using OAuth 2.0. To request a user&#39;s authorization to use the Box APIs on their behalf you will need to send a user to the URL with this format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizeTest() throws ApiException {
        String responseType = null;
        String clientId = null;
        String redirectUri = null;
        String state = null;
        String scope = null;
        String response = api.authorize(responseType, clientId)
                .redirectUri(redirectUri)
                .state(state)
                .scope(scope)
                .execute();
        // TODO: test validations
    }

    /**
     * Refresh access token
     *
     * Refresh an Access Token using its client ID, secret, and refresh token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshAccessTokenTest() throws ApiException {
        String grantType = null;
        String clientId = null;
        String clientSecret = null;
        String refreshToken = null;
        AccessToken response = api.refreshAccessToken(grantType, clientId, clientSecret, refreshToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Request access token
     *
     * Request an Access Token using either a client-side obtained OAuth 2.0 authorization code or a server-side JWT assertion.  An Access Token is a string that enables Box to verify that a request belongs to an authorized session. In the normal order of operations you will begin by requesting authentication from the [authorize](https://raw.githubusercontent.com) endpoint and Box will send you an authorization code.  You will then send this code to this endpoint to exchange it for an Access Token. The returned Access Token can then be used to to make Box API calls.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestAccessTokenTest() throws ApiException {
        String grantType = null;
        String clientId = null;
        String clientSecret = null;
        String code = null;
        String refreshToken = null;
        String assertion = null;
        String subjectToken = null;
        String subjectTokenType = null;
        String actorToken = null;
        String actorTokenType = null;
        String scope = null;
        String resource = null;
        String boxSubjectType = null;
        String boxSubjectId = null;
        String boxSharedLink = null;
        AccessToken response = api.requestAccessToken(grantType)
                .clientId(clientId)
                .clientSecret(clientSecret)
                .code(code)
                .refreshToken(refreshToken)
                .assertion(assertion)
                .subjectToken(subjectToken)
                .subjectTokenType(subjectTokenType)
                .actorToken(actorToken)
                .actorTokenType(actorTokenType)
                .scope(scope)
                .resource(resource)
                .boxSubjectType(boxSubjectType)
                .boxSubjectId(boxSubjectId)
                .boxSharedLink(boxSharedLink)
                .execute();
        // TODO: test validations
    }

    /**
     * Revoke access token
     *
     * Revoke an active Access Token, effectively logging a user out that has been previously authenticated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeAccessTokenTest() throws ApiException {
        String clientId = null;
        String clientSecret = null;
        String token = null;
        api.revokeAccessToken()
                .clientId(clientId)
                .clientSecret(clientSecret)
                .token(token)
                .execute();
        // TODO: test validations
    }

}
