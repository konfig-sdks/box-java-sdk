/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.TaskAssignment;
import com.konfigthis.client.model.TaskAssignments;
import com.konfigthis.client.model.TaskAssignmentsAssignMultipleUsersRequest;
import com.konfigthis.client.model.TaskAssignmentsAssignMultipleUsersRequestAssignTo;
import com.konfigthis.client.model.TaskAssignmentsAssignMultipleUsersRequestTask;
import com.konfigthis.client.model.TaskAssignmentsUpdateStateAssignedToUserRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskAssignmentsApi
 */
@Disabled
public class TaskAssignmentsApiTest {

    private static TaskAssignmentsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TaskAssignmentsApi(apiClient);
    }

    /**
     * Assign task
     *
     * Assigns a task to a user.  A task can be assigned to more than one user by creating multiple assignments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignMultipleUsersTest() throws ApiException {
        TaskAssignmentsAssignMultipleUsersRequestTask task = null;
        TaskAssignmentsAssignMultipleUsersRequestAssignTo assignTo = null;
        TaskAssignment response = api.assignMultipleUsers(task, assignTo)
                .execute();
        // TODO: test validations
    }

    /**
     * Unassign task
     *
     * Deletes a specific task assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSpecificAssignmentTest() throws ApiException {
        String taskAssignmentId = null;
        api.deleteSpecificAssignment(taskAssignmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get task assignment
     *
     * Retrieves information about a task assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskAssignmentInfoTest() throws ApiException {
        String taskAssignmentId = null;
        TaskAssignment response = api.getTaskAssignmentInfo(taskAssignmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * List task assignments
     *
     * Lists all of the assignments for a given task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listForTaskTest() throws ApiException {
        String taskId = null;
        TaskAssignments response = api.listForTask(taskId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update task assignment
     *
     * Updates a task assignment. This endpoint can be used to update the state of a task assigned to a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStateAssignedToUserTest() throws ApiException {
        String taskAssignmentId = null;
        String message = null;
        String resolutionState = null;
        TaskAssignment response = api.updateStateAssignedToUser(taskAssignmentId)
                .message(message)
                .resolutionState(resolutionState)
                .execute();
        // TODO: test validations
    }

}
