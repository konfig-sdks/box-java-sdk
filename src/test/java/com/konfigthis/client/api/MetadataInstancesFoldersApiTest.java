/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AMetadataInstanceUpdateOperation1;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.MetadataFull;
import com.konfigthis.client.model.Metadatas;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetadataInstancesFoldersApi
 */
@Disabled
public class MetadataInstancesFoldersApiTest {

    private static MetadataInstancesFoldersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MetadataInstancesFoldersApi(apiClient);
    }

    /**
     * Create metadata instance on folder
     *
     * Applies an instance of a metadata template to a folder.  In most cases only values that are present in the metadata template will be accepted, except for the &#x60;global.properties&#x60; template which accepts any key-value pair.  To display the metadata template in the Box web app the enterprise needs to be configured to enable **Cascading Folder Level Metadata** for the user in the admin console.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyTemplateTest() throws ApiException {
        String folderId = null;
        String scope = null;
        String templateKey = null;
        MetadataFull response = api.applyTemplate(folderId, scope, templateKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Get metadata instance on folder
     *
     * Retrieves the instance of a metadata template that has been applied to a folder. This can not be used on the root folder with ID &#x60;0&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFolderMetadataInstanceTest() throws ApiException {
        String folderId = null;
        String scope = null;
        String templateKey = null;
        MetadataFull response = api.getFolderMetadataInstance(folderId, scope, templateKey)
                .execute();
        // TODO: test validations
    }

    /**
     * List metadata instances on folder
     *
     * Retrieves all metadata for a given folder. This can not be used on the root folder with ID &#x60;0&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOnFolderTest() throws ApiException {
        String folderId = null;
        Metadatas response = api.listOnFolder(folderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove metadata instance from folder
     *
     * Deletes a piece of folder metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeInstanceTest() throws ApiException {
        String folderId = null;
        String scope = null;
        String templateKey = null;
        api.removeInstance(folderId, scope, templateKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Update metadata instance on folder
     *
     * Updates a piece of metadata on a folder.  The metadata instance can only be updated if the template has already been applied to the folder before. When editing metadata, only values that match the metadata template schema will be accepted.  The update is applied atomically. If any errors occur during the application of the operations, the metadata instance will not be changed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInstanceOnFolderTest() throws ApiException {
        String folderId = null;
        String scope = null;
        String templateKey = null;
        MetadataFull response = api.updateInstanceOnFolder(folderId, scope, templateKey)
                .execute();
        // TODO: test validations
    }

}
