/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.FolderFull;
import com.konfigthis.client.model.FoldersCreateCopyRequest;
import com.konfigthis.client.model.FoldersCreateCopyRequestParent;
import com.konfigthis.client.model.FoldersUpdateFolderRequest;
import com.konfigthis.client.model.FoldersUpdateFolderRequestFolderUploadEmail;
import com.konfigthis.client.model.FoldersUpdateFolderRequestParent;
import com.konfigthis.client.model.FoldersUpdateFolderRequestSharedLink;
import com.konfigthis.client.model.Items;
import com.konfigthis.client.model.PostFoldersRequest;
import com.konfigthis.client.model.PostFoldersRequestFolderUploadEmail;
import com.konfigthis.client.model.PostFoldersRequestParent;
import com.konfigthis.client.model.Reference2;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FoldersApi
 */
@Disabled
public class FoldersApiTest {

    private static FoldersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new FoldersApi(apiClient);
    }

    /**
     * Copy folder
     *
     * Creates a copy of a folder within a destination folder.  The original folder will not be changed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCopyTest() throws ApiException {
        FoldersCreateCopyRequestParent parent = null;
        String folderId = null;
        String name = null;
        List<String> fields = null;
        FolderFull response = api.createCopy(parent, folderId)
                .name(name)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete folder
     *
     * Deletes a folder, either permanently or by moving it to the trash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        String folderId = null;
        String ifMatch = null;
        Boolean recursive = null;
        api.deleteById(folderId)
                .ifMatch(ifMatch)
                .recursive(recursive)
                .execute();
        // TODO: test validations
    }

    /**
     * Create folder
     *
     * Creates a new empty folder within the specified parent folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void foldersTest() throws ApiException {
        String name = null;
        PostFoldersRequestParent parent = null;
        PostFoldersRequestFolderUploadEmail folderUploadEmail = null;
        String syncState = null;
        List<String> fields = null;
        FolderFull response = api.folders(name, parent)
                .folderUploadEmail(folderUploadEmail)
                .syncState(syncState)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get folder information
     *
     * Retrieves details for a folder, including the first 100 entries in the folder.  Passing &#x60;sort&#x60;, &#x60;direction&#x60;, &#x60;offset&#x60;, and &#x60;limit&#x60; parameters in query allows you to manage the list of returned [folder items](r://folder--full#param-item-collection).  To fetch more items within the folder, use the [Get items in a folder](e://get-folders-id-items) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFolderDetailsTest() throws ApiException {
        String folderId = null;
        List<String> fields = null;
        String ifNoneMatch = null;
        String boxapi = null;
        String sort = null;
        String direction = null;
        Long offset = null;
        Long limit = null;
        FolderFull response = api.getFolderDetails(folderId)
                .fields(fields)
                .ifNoneMatch(ifNoneMatch)
                .boxapi(boxapi)
                .sort(sort)
                .direction(direction)
                .offset(offset)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * List items in folder
     *
     * Retrieves a page of items in a folder. These items can be files, folders, and web links.  To request more information about the folder itself, like its size, use the [Get a folder](https://raw.githubusercontent.com) endpoint instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listItemsInFolderTest() throws ApiException {
        String folderId = null;
        List<String> fields = null;
        Boolean usemarker = null;
        String marker = null;
        Long offset = null;
        Long limit = null;
        String boxapi = null;
        String sort = null;
        String direction = null;
        Items response = api.listItemsInFolder(folderId)
                .fields(fields)
                .usemarker(usemarker)
                .marker(marker)
                .offset(offset)
                .limit(limit)
                .boxapi(boxapi)
                .sort(sort)
                .direction(direction)
                .execute();
        // TODO: test validations
    }

    /**
     * Update folder
     *
     * Updates a folder. This can be also be used to move the folder, create shared links, update collaborations, and more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFolderTest() throws ApiException {
        String folderId = null;
        List<String> tags = null;
        String description = null;
        String name = null;
        String syncState = null;
        Boolean canNonOwnersInvite = null;
        FoldersUpdateFolderRequestParent parent = null;
        FoldersUpdateFolderRequestSharedLink sharedLink = null;
        FoldersUpdateFolderRequestFolderUploadEmail folderUploadEmail = null;
        Boolean isCollaborationRestrictedToEnterprise = null;
        List<Reference2> collections = null;
        Boolean canNonOwnersViewCollaborators = null;
        List<String> fields = null;
        String ifMatch = null;
        FolderFull response = api.updateFolder(folderId)
                .tags(tags)
                .description(description)
                .name(name)
                .syncState(syncState)
                .canNonOwnersInvite(canNonOwnersInvite)
                .parent(parent)
                .sharedLink(sharedLink)
                .folderUploadEmail(folderUploadEmail)
                .isCollaborationRestrictedToEnterprise(isCollaborationRestrictedToEnterprise)
                .collections(collections)
                .canNonOwnersViewCollaborators(canNonOwnersViewCollaborators)
                .fields(fields)
                .ifMatch(ifMatch)
                .execute();
        // TODO: test validations
    }

}
