/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AMetadataInstanceUpdateOperation;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.MetadataFull;
import com.konfigthis.client.model.Metadatas;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetadataInstancesFilesApi
 */
@Disabled
public class MetadataInstancesFilesApiTest {

    private static MetadataInstancesFilesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MetadataInstancesFilesApi(apiClient);
    }

    /**
     * Create metadata instance on file
     *
     * Applies an instance of a metadata template to a file.  In most cases only values that are present in the metadata template will be accepted, except for the &#x60;global.properties&#x60; template which accepts any key-value pair.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyTemplateTest() throws ApiException {
        String fileId = null;
        String scope = null;
        String templateKey = null;
        MetadataFull response = api.applyTemplate(fileId, scope, templateKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Get metadata instance on file
     *
     * Retrieves the instance of a metadata template that has been applied to a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstanceTest() throws ApiException {
        String fileId = null;
        String scope = null;
        String templateKey = null;
        MetadataFull response = api.getInstance(fileId, scope, templateKey)
                .execute();
        // TODO: test validations
    }

    /**
     * List metadata instances on file
     *
     * Retrieves all metadata for a given file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFileMetadataTest() throws ApiException {
        String fileId = null;
        Metadatas response = api.listFileMetadata(fileId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove metadata instance from file
     *
     * Deletes a piece of file metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeInstanceTest() throws ApiException {
        String fileId = null;
        String scope = null;
        String templateKey = null;
        api.removeInstance(fileId, scope, templateKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Update metadata instance on file
     *
     * Updates a piece of metadata on a file.  The metadata instance can only be updated if the template has already been applied to the file before. When editing metadata, only values that match the metadata template schema will be accepted.  The update is applied atomically. If any errors occur during the application of the operations, the metadata instance will not be changed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInstanceOnFileTest() throws ApiException {
        String fileId = null;
        String scope = null;
        String templateKey = null;
        MetadataFull response = api.updateInstanceOnFile(fileId, scope, templateKey)
                .execute();
        // TODO: test validations
    }

}
