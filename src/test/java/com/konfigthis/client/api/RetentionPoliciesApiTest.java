/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.RetentionPolicies;
import com.konfigthis.client.model.RetentionPoliciesCreatePolicyRequest;
import com.konfigthis.client.model.RetentionPoliciesUpdatePolicyRequest;
import com.konfigthis.client.model.RetentionPolicy;
import com.konfigthis.client.model.UserBase;
import com.konfigthis.client.model.UserMini;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RetentionPoliciesApi
 */
@Disabled
public class RetentionPoliciesApiTest {

    private static RetentionPoliciesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new RetentionPoliciesApi(apiClient);
    }

    /**
     * Create retention policy
     *
     * Creates a retention policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyTest() throws ApiException {
        String policyName = null;
        String policyType = null;
        String dispositionAction = null;
        String description = null;
        Object retentionLength = null;
        String retentionType = null;
        Boolean canOwnerExtendRetention = null;
        Boolean areOwnersNotified = null;
        List<UserMini> customNotificationRecipients = null;
        RetentionPolicy response = api.createPolicy(policyName, policyType, dispositionAction)
                .description(description)
                .retentionLength(retentionLength)
                .retentionType(retentionType)
                .canOwnerExtendRetention(canOwnerExtendRetention)
                .areOwnersNotified(areOwnersNotified)
                .customNotificationRecipients(customNotificationRecipients)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete retention policy
     *
     * Permanently deletes a retention policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePolicyTest() throws ApiException {
        String retentionPolicyId = null;
        api.deletePolicy(retentionPolicyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get retention policy
     *
     * Retrieves a retention policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyTest() throws ApiException {
        String retentionPolicyId = null;
        List<String> fields = null;
        RetentionPolicy response = api.getPolicy(retentionPolicyId)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * List retention policies
     *
     * Retrieves all of the retention policies for an enterprise.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        String policyName = null;
        String policyType = null;
        String createdByUserId = null;
        List<String> fields = null;
        Long limit = null;
        String marker = null;
        RetentionPolicies response = api.listAll()
                .policyName(policyName)
                .policyType(policyType)
                .createdByUserId(createdByUserId)
                .fields(fields)
                .limit(limit)
                .marker(marker)
                .execute();
        // TODO: test validations
    }

    /**
     * Update retention policy
     *
     * Updates a retention policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePolicyTest() throws ApiException {
        String retentionPolicyId = null;
        String description = null;
        String policyName = null;
        String dispositionAction = null;
        String retentionType = null;
        Object retentionLength = null;
        String status = null;
        Boolean canOwnerExtendRetention = null;
        Boolean areOwnersNotified = null;
        List<UserBase> customNotificationRecipients = null;
        RetentionPolicy response = api.updatePolicy(retentionPolicyId)
                .description(description)
                .policyName(policyName)
                .dispositionAction(dispositionAction)
                .retentionType(retentionType)
                .retentionLength(retentionLength)
                .status(status)
                .canOwnerExtendRetention(canOwnerExtendRetention)
                .areOwnersNotified(areOwnersNotified)
                .customNotificationRecipients(customNotificationRecipients)
                .execute();
        // TODO: test validations
    }

}
