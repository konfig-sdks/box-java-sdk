/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ClientError;
import java.io.File;
import com.konfigthis.client.model.FileFull;
import com.konfigthis.client.model.FilesCreateCopyRequest;
import com.konfigthis.client.model.FilesCreateCopyRequestParent;
import com.konfigthis.client.model.FilesPreflightCheckBeforeUploadRequest;
import com.konfigthis.client.model.FilesPreflightCheckBeforeUploadRequestParent;
import com.konfigthis.client.model.FilesUpdateFileRequest;
import com.konfigthis.client.model.FilesUpdateFileRequestLock;
import com.konfigthis.client.model.FilesUpdateFileRequestParent;
import com.konfigthis.client.model.FilesUpdateFileRequestPermissions;
import com.konfigthis.client.model.FilesUpdateFileRequestSharedLink;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Reference1;
import com.konfigthis.client.model.UploadUrl;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FilesApi
 */
@Disabled
public class FilesApiTest {

    private static FilesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new FilesApi(apiClient);
    }

    /**
     * Copy file
     *
     * Creates a copy of a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCopyTest() throws ApiException {
        FilesCreateCopyRequestParent parent = null;
        String fileId = null;
        String version = null;
        String name = null;
        List<String> fields = null;
        FileFull response = api.createCopy(parent, fileId)
                .version(version)
                .name(name)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete file
     *
     * Deletes a file, either permanently or by moving it to the trash.  The the enterprise settings determine whether the item will be permanently deleted from Box or moved to the trash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFileTest() throws ApiException {
        String fileId = null;
        String ifMatch = null;
        api.deleteFile(fileId)
                .ifMatch(ifMatch)
                .execute();
        // TODO: test validations
    }

    /**
     * Get file information
     *
     * Retrieves the details about a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        String fileId = null;
        List<String> fields = null;
        String ifNoneMatch = null;
        String boxapi = null;
        String xRepHints = null;
        FileFull response = api.getDetails(fileId)
                .fields(fields)
                .ifNoneMatch(ifNoneMatch)
                .boxapi(boxapi)
                .xRepHints(xRepHints)
                .execute();
        // TODO: test validations
    }

    /**
     * Get file thumbnail
     *
     * Retrieves a thumbnail, or smaller image representation, of a file.  Sizes of &#x60;32x32&#x60;,&#x60;64x64&#x60;, &#x60;128x128&#x60;, and &#x60;256x256&#x60; can be returned in the &#x60;.png&#x60; format and sizes of &#x60;32x32&#x60;, &#x60;160x160&#x60;, and &#x60;320x320&#x60; can be returned in the &#x60;.jpg&#x60; format.  Thumbnails can be generated for the image and video file formats listed [found on our community site][1].  [1]: https://community.box.com/t5/Migrating-and-Previewing-Content/File-Types-and-Fonts-Supported-in-Box-Content-Preview/ta-p/327
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThumbnailTest() throws ApiException {
        String fileId = null;
        String extension = null;
        Integer minHeight = null;
        Integer minWidth = null;
        Integer maxHeight = null;
        Integer maxWidth = null;
        File response = api.getThumbnail(fileId, extension)
                .minHeight(minHeight)
                .minWidth(minWidth)
                .maxHeight(maxHeight)
                .maxWidth(maxWidth)
                .execute();
        // TODO: test validations
    }

    /**
     * Preflight check before upload
     *
     * Performs a check to verify that a file will be accepted by Box before you upload the entire file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void preflightCheckBeforeUploadTest() throws ApiException {
        String name = null;
        Integer size = null;
        FilesPreflightCheckBeforeUploadRequestParent parent = null;
        UploadUrl response = api.preflightCheckBeforeUpload()
                .name(name)
                .size(size)
                .parent(parent)
                .execute();
        // TODO: test validations
    }

    /**
     * Update file
     *
     * Updates a file. This can be used to rename or move a file, create a shared link, or lock a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFileTest() throws ApiException {
        String fileId = null;
        List<String> tags = null;
        String description = null;
        String name = null;
        FilesUpdateFileRequestParent parent = null;
        FilesUpdateFileRequestSharedLink sharedLink = null;
        FilesUpdateFileRequestLock lock = null;
        OffsetDateTime dispositionAt = null;
        FilesUpdateFileRequestPermissions permissions = null;
        List<Reference1> collections = null;
        List<String> fields = null;
        String ifMatch = null;
        FileFull response = api.updateFile(fileId)
                .tags(tags)
                .description(description)
                .name(name)
                .parent(parent)
                .sharedLink(sharedLink)
                .lock(lock)
                .dispositionAt(dispositionAt)
                .permissions(permissions)
                .collections(collections)
                .fields(fields)
                .ifMatch(ifMatch)
                .execute();
        // TODO: test validations
    }

}
