/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.PostUsersRequest;
import com.konfigthis.client.model.TrackingCode;
import com.konfigthis.client.model.UserFull;
import com.konfigthis.client.model.Users;
import com.konfigthis.client.model.UsersUpdateManagedUserRequest;
import com.konfigthis.client.model.UsersUpdateManagedUserRequestNotificationEmail;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private static UsersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsersApi(apiClient);
    }

    /**
     * Delete user
     *
     * Deletes a user. By default this will fail if the user still owns any content. Move their owned content first before proceeding, or use the &#x60;force&#x60; field to delete the user and their files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String userId = null;
        Boolean notify = null;
        Boolean force = null;
        api.deleteUser(userId)
                .notify(notify)
                .force(force)
                .execute();
        // TODO: test validations
    }

    /**
     * Get current user
     *
     * Retrieves information about the user who is currently authenticated.  In the case of a client-side authenticated OAuth 2.0 application this will be the user who authorized the app.  In the case of a JWT, server-side authenticated application this will be the service account that belongs to the application by default.  Use the &#x60;As-User&#x60; header to change who this API call is made on behalf of.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws ApiException {
        List<String> fields = null;
        UserFull response = api.getCurrentUser()
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get user
     *
     * Retrieves information about a user in the enterprise.  The application and the authenticated user need to have the permission to look up users in the entire enterprise.  This endpoint also returns a limited set of information for external users who are collaborated on content owned by the enterprise for authenticated users with the right scopes. In this case, disallowed fields will return null instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserInfoTest() throws ApiException {
        String userId = null;
        List<String> fields = null;
        UserFull response = api.getUserInfo(userId)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * Update user
     *
     * Updates a managed or app user in an enterprise. This endpoint is only available to users and applications with the right admin permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateManagedUserTest() throws ApiException {
        String userId = null;
        String enterprise = null;
        Boolean notify = null;
        String name = null;
        String login = null;
        String role = null;
        String language = null;
        Boolean isSyncEnabled = null;
        String jobTitle = null;
        String phone = null;
        String address = null;
        List<TrackingCode> trackingCodes = null;
        Boolean canSeeManagedUsers = null;
        String timezone = null;
        Boolean isExternalCollabRestricted = null;
        Boolean isExemptFromDeviceLimits = null;
        Boolean isExemptFromLoginVerification = null;
        Boolean isPasswordResetRequired = null;
        String status = null;
        Long spaceAmount = null;
        UsersUpdateManagedUserRequestNotificationEmail notificationEmail = null;
        String externalAppUserId = null;
        List<String> fields = null;
        UserFull response = api.updateManagedUser(userId)
                .enterprise(enterprise)
                .notify(notify)
                .name(name)
                .login(login)
                .role(role)
                .language(language)
                .isSyncEnabled(isSyncEnabled)
                .jobTitle(jobTitle)
                .phone(phone)
                .address(address)
                .trackingCodes(trackingCodes)
                .canSeeManagedUsers(canSeeManagedUsers)
                .timezone(timezone)
                .isExternalCollabRestricted(isExternalCollabRestricted)
                .isExemptFromDeviceLimits(isExemptFromDeviceLimits)
                .isExemptFromLoginVerification(isExemptFromLoginVerification)
                .isPasswordResetRequired(isPasswordResetRequired)
                .status(status)
                .spaceAmount(spaceAmount)
                .notificationEmail(notificationEmail)
                .externalAppUserId(externalAppUserId)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * List enterprise users
     *
     * Returns a list of all users for the Enterprise along with their &#x60;user_id&#x60;, &#x60;public_name&#x60;, and &#x60;login&#x60;.  The application and the authenticated user need to have the permission to look up users in the entire enterprise.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersTest() throws ApiException {
        String filterTerm = null;
        String userType = null;
        String externalAppUserId = null;
        List<String> fields = null;
        Long offset = null;
        Long limit = null;
        Boolean usemarker = null;
        String marker = null;
        Users response = api.users()
                .filterTerm(filterTerm)
                .userType(userType)
                .externalAppUserId(externalAppUserId)
                .fields(fields)
                .offset(offset)
                .limit(limit)
                .usemarker(usemarker)
                .marker(marker)
                .execute();
        // TODO: test validations
    }

    /**
     * Create user
     *
     * Creates a new managed user in an enterprise. This endpoint is only available to users and applications with the right admin permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void users_0Test() throws ApiException {
        String name = null;
        String login = null;
        Boolean isPlatformAccessOnly = null;
        String role = null;
        String language = null;
        Boolean isSyncEnabled = null;
        String jobTitle = null;
        String phone = null;
        String address = null;
        Long spaceAmount = null;
        List<TrackingCode> trackingCodes = null;
        Boolean canSeeManagedUsers = null;
        String timezone = null;
        Boolean isExternalCollabRestricted = null;
        Boolean isExemptFromDeviceLimits = null;
        Boolean isExemptFromLoginVerification = null;
        String status = null;
        String externalAppUserId = null;
        List<String> fields = null;
        UserFull response = api.users_0(name)
                .login(login)
                .isPlatformAccessOnly(isPlatformAccessOnly)
                .role(role)
                .language(language)
                .isSyncEnabled(isSyncEnabled)
                .jobTitle(jobTitle)
                .phone(phone)
                .address(address)
                .spaceAmount(spaceAmount)
                .trackingCodes(trackingCodes)
                .canSeeManagedUsers(canSeeManagedUsers)
                .timezone(timezone)
                .isExternalCollabRestricted(isExternalCollabRestricted)
                .isExemptFromDeviceLimits(isExemptFromDeviceLimits)
                .isExemptFromLoginVerification(isExemptFromLoginVerification)
                .status(status)
                .externalAppUserId(externalAppUserId)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

}
