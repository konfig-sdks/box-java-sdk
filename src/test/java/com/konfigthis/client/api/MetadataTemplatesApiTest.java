/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AMetadataTemplateUpdateOperation;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.MetadataFieldWrite;
import com.konfigthis.client.model.MetadataTemplate;
import com.konfigthis.client.model.MetadataTemplates;
import com.konfigthis.client.model.MetadataTemplatesCreateNewTemplateRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetadataTemplatesApi
 */
@Disabled
public class MetadataTemplatesApiTest {

    private static MetadataTemplatesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MetadataTemplatesApi(apiClient);
    }

    /**
     * Create metadata template
     *
     * Creates a new metadata template that can be applied to files and folders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTemplateTest() throws ApiException {
        String scope = null;
        String displayName = null;
        String templateKey = null;
        Boolean hidden = null;
        List<MetadataFieldWrite> fields = null;
        Boolean copyInstanceOnItemCopy = null;
        MetadataTemplate response = api.createNewTemplate(scope, displayName)
                .templateKey(templateKey)
                .hidden(hidden)
                .fields(fields)
                .copyInstanceOnItemCopy(copyInstanceOnItemCopy)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove metadata template
     *
     * Delete a metadata template and its instances. This deletion is permanent and can not be reversed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSchemaTest() throws ApiException {
        String scope = null;
        String templateKey = null;
        api.deleteSchema(scope, templateKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Find metadata template by instance ID
     *
     * Finds a metadata template by searching for the ID of an instance of the template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findByInstanceIdTest() throws ApiException {
        UUID metadataInstanceId = null;
        MetadataTemplates response = api.findByInstanceId(metadataInstanceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get metadata template by ID
     *
     * Retrieves a metadata template by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String templateId = null;
        MetadataTemplate response = api.getById(templateId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get metadata template by name
     *
     * Retrieves a metadata template by its &#x60;scope&#x60; and &#x60;templateKey&#x60; values.  To find the &#x60;scope&#x60; and &#x60;templateKey&#x60; for a template, list all templates for an enterprise or globally, or list all templates applied to a file or folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByNameSchemaTest() throws ApiException {
        String scope = null;
        String templateKey = null;
        MetadataTemplate response = api.getByNameSchema(scope, templateKey)
                .execute();
        // TODO: test validations
    }

    /**
     * List all metadata templates for enterprise
     *
     * Used to retrieve all metadata templates created to be used specifically within the user&#39;s enterprise
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listForEnterpriseTest() throws ApiException {
        String marker = null;
        Long limit = null;
        MetadataTemplates response = api.listForEnterprise()
                .marker(marker)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * List all global metadata templates
     *
     * Used to retrieve all generic, global metadata templates available to all enterprises using Box.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGlobalTest() throws ApiException {
        String marker = null;
        Long limit = null;
        MetadataTemplates response = api.listGlobal()
                .marker(marker)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Update metadata template
     *
     * Updates a metadata template.  The metadata template can only be updated if the template already exists.  The update is applied atomically. If any errors occur during the application of the operations, the metadata template will not be changed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSchemaTest() throws ApiException {
        String scope = null;
        String templateKey = null;
        MetadataTemplate response = api.updateSchema(scope, templateKey)
                .execute();
        // TODO: test validations
    }

}
