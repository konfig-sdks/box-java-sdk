/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ClientError;
import com.konfigthis.client.model.MetadataCascadePolicies;
import com.konfigthis.client.model.MetadataCascadePoliciesApplyToChildrenRequest;
import com.konfigthis.client.model.MetadataCascadePoliciesCreatePolicyRequest;
import com.konfigthis.client.model.MetadataCascadePolicy;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetadataCascadePoliciesApi
 */
@Disabled
public class MetadataCascadePoliciesApiTest {

    private static MetadataCascadePoliciesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MetadataCascadePoliciesApi(apiClient);
    }

    /**
     * Force-apply metadata cascade policy to folder
     *
     * Force the metadata on a folder with a metadata cascade policy to be applied to all of its children. This can be used after creating a new cascade policy to enforce the metadata to be cascaded down to all existing files within that folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyToChildrenTest() throws ApiException {
        String conflictResolution = null;
        String metadataCascadePolicyId = null;
        api.applyToChildren(conflictResolution, metadataCascadePolicyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create metadata cascade policy
     *
     * Creates a new metadata cascade policy that applies a given metadata template to a given folder and automatically cascades it down to any files within that folder.  In order for the policy to be applied a metadata instance must first be applied to the folder the policy is to be applied to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyTest() throws ApiException {
        String folderId = null;
        String scope = null;
        String templateKey = null;
        MetadataCascadePolicy response = api.createPolicy(folderId, scope, templateKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Get metadata cascade policy
     *
     * Retrieve a specific metadata cascade policy assigned to a folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyAssignedToFolderTest() throws ApiException {
        String metadataCascadePolicyId = null;
        MetadataCascadePolicy response = api.getPolicyAssignedToFolder(metadataCascadePolicyId)
                .execute();
        // TODO: test validations
    }

    /**
     * List metadata cascade policies
     *
     * Retrieves a list of all the metadata cascade policies that are applied to a given folder. This can not be used on the root folder with ID &#x60;0&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String folderId = null;
        String ownerEnterpriseId = null;
        String marker = null;
        Long offset = null;
        MetadataCascadePolicies response = api.list(folderId)
                .ownerEnterpriseId(ownerEnterpriseId)
                .marker(marker)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove metadata cascade policy
     *
     * Deletes a metadata cascade policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePolicyTest() throws ApiException {
        String metadataCascadePolicyId = null;
        api.removePolicy(metadataCascadePolicyId)
                .execute();
        // TODO: test validations
    }

}
